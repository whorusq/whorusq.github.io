<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Less 的基本使用入门</title>
    <url>/post/48640546.html</url>
    <content><![CDATA[<blockquote>
<p>给 CSS 加点料 ~</p>
<p>LESS（Leaner Style Sheets 的缩写） 为 CSS 赋予了动态语言的特性，如变量，继承，运算，函数等，它是一门向后兼容的 CSS 扩展语言。</p>
<p>当前最新版本：<a href="https://github.com/less/less.js/blob/master/CHANGELOG.md">Less 3.0</a></p>
</blockquote>
<p>官方文档：<a href="http://lesscss.org/">http://lesscss.org</a></p>
<p>快速入门：<a href="http://www.bootcss.com/p/lesscss">http://www.bootcss.com/p/lesscss</a></p>
<p>源码地址：<a href="https://github.com/less/less.js">https://github.com/less/less.js</a></p>
<span id="more"></span>

<h3 id="1-浏览器使用"><a href="#1-浏览器使用" class="headerlink" title="1. 浏览器使用"></a>1. 浏览器使用</h3><h4 id="1-1-编译成-css-👍"><a href="#1-1-编译成-css-👍" class="headerlink" title="1.1. 编译成 *.css 👍"></a>1.1. 编译成 *.css 👍</h4><ul>
<li><p>node.js</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  npm install -g less</span><br><span class="line">➜  lessc styles.less styles.css</span><br></pre></td></tr></table></figure></li>
<li><p>koala</p>
<p>  这是一个简单易用的 GUI 工具，可以对 less 进行实时编译、压缩等，详见：<a href="http://koala-app.com/index-zh.html">http://koala-app.com/index-zh.html</a></p>
<p>  更多工具，请访问官网：<a href="http://lesscss.org/tools/#guis-for-less">http://lesscss.org/tools/#guis-for-less</a></p>
</li>
<li><p>webapck（后续待补充…）</p>
</li>
</ul>
<h4 id="1-2-借助-less-js"><a href="#1-2-借助-less-js" class="headerlink" title="1.2. 借助 less.js"></a>1.2. 借助 less.js</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 首先引入 less 文件，注意这里的 rel 类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.less&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 之后引入 less.js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/less.js/3.0.0/less.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：</p>
<ul>
<li>*.less 文件一定要在引入 less.js 之前引入。</li>
<li>请在 web 服务环境下使用，直接双击打开可能报错。</li>
</ul>
</blockquote>
<h3 id="2-语法规则"><a href="#2-语法规则" class="headerlink" title="2. 语法规则"></a>2. 语法规则</h3><h4 id="2-1-变量（Variables）"><a href="#2-1-变量（Variables）" class="headerlink" title="2.1. 变量（Variables）"></a>2.1. 变量（Variables）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="variable">@bg-color:</span> <span class="number">#fffccc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用变量</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@bg-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还支持这样：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@size:</span> <span class="number">14px</span>;</span><br><span class="line"><span class="variable">@content-font-size:</span> <span class="string">&#x27;size&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@@content-font-size</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-混合（Mixins）"><a href="#2-2-混合（Mixins）" class="headerlink" title="2.2. 混合（Mixins）"></a>2.2. 混合（Mixins）</h4><p>我们可以预先定义一个通用的属性集（mixin，如下面的 .bordered），然后在另一个需要用到的属性集（如下面的 #menu）里面去调用（或称作引入、合并），这种方式叫混合。</p>
<ul>
<li><p>基本使用</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123; <span class="comment">// 如果不想这个 mixin 被编译输出，可以写成 .bordered() &#123; ... &#125;</span></span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#link</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="selector-class">.bordered</span>; <span class="comment">// .bordered(); 完成同样的功能，括号不是必须的。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#link</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>带参数的混合</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-radius</span> (<span class="variable">@radius</span>) &#123; <span class="comment">// 不设置参数默认值，调用时必须传参，否则编译报错</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border-radius2</span> (<span class="variable">@radius</span>: <span class="number">5px</span>) &#123; <span class="comment">// 设置参数默认值</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="selector-class">.border-radius</span>(<span class="number">4px</span>); <span class="comment">// 传参 4px</span></span><br><span class="line">  <span class="comment">//.border-radius; // 编译报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="selector-class">.border-radius2</span>; <span class="comment">// 编译正常，不传参时，可以省略 ()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>@arguments 变量</p>
<p>  <strong>@arguments</strong> 包含了所有传递进来的参数，如下示例</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-shadow</span> (<span class="variable">@x</span>: <span class="number">0</span>, <span class="variable">@y</span>: <span class="number">0</span>, <span class="variable">@blur</span>: <span class="number">1px</span>, <span class="variable">@color</span>: <span class="number">#000</span>) &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">    <span class="selector-class">.box-shadow</span>(<span class="number">2px</span>, <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000000</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000000</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>匹配模式</p>
<p>  只有被匹配的混合才会被使用。</p>
<p>  变量可以匹配任意的传入值，而变量以外的固定值就仅仅匹配与其相等的传入值。</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span> (dark, <span class="variable">@color</span>) &#123; <span class="comment">// 调用时，第一个参数必须传 dark 才会匹配</span></span><br><span class="line">    <span class="attribute">color</span>: darken(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (light, <span class="variable">@color</span>) &#123; <span class="comment">// 调用时，第一个参数必须传 light 才会匹配</span></span><br><span class="line">    <span class="attribute">color</span>: lighten(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@_</span>, <span class="variable">@color</span>) &#123; <span class="comment">// 不管第一个参数传什么，都会匹配</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@switch:</span> light;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="selector-class">.mixin</span>(<span class="variable">@switch</span>, <span class="number">#888</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a2a2a2</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  也可以匹配多个参数，即<strong>根据调用时传参的多少，匹配对应的混合规则</strong>（如下）。</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin2</span> (<span class="variable">@a</span>) &#123; <span class="comment">// 调用时传1个参数</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin2</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) &#123; <span class="comment">// 调用时传2个参数</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">    <span class="selector-class">.mixin2</span>(<span class="number">#888</span>, <span class="number">#eee</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>导引（Guards ）</p>
<p>  使用关键字 when 根据表达式进行匹配混合（mixin）。</p>
<p>  为了尽可能地保留 CSS 的可声明性，Less 通过导引（Guards ）而非 <strong>if/else</strong> 语句来实现条件判断，因为前者已在 <strong><a href="https://my.oschina.net/u/1447355">@media</a> query</strong> 特性中被定义。</p>
<p>  如下示例：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// when 关键字用以定义一个导引（Guards）序列（此例只有一个导引）</span><br><span class="line">.mixin (@a) when (lightness(@a) &gt;= 50%) &#123; // 颜色的亮度大于等于 50% 时匹配</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@a) when (lightness(@a) &lt; 50%) &#123; // 颜色的亮度小于 50% 时匹配</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@a) &#123; // 不管传什么，始终匹配</span><br><span class="line">  color: @a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.class3 &#123; .mixin(#ddd) &#125;</span><br><span class="line">.class4 &#123; .mixin(#555) &#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">.class3 &#123;</span><br><span class="line">  background-color: black;</span><br><span class="line">  color: #dddddd;</span><br><span class="line">&#125;</span><br><span class="line">.class4 &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  color: #555555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  导引中可用的比较运算符 **&gt;<strong>、</strong>&gt;=<strong>、</strong>=<strong>、</strong>=&lt;<strong>、</strong>&lt;**。</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键字 true 只表示布尔真</span></span><br><span class="line"><span class="comment">// 下面两种方式是等价的</span></span><br><span class="line"><span class="selector-class">.truth</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span>) &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.truth</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> = true) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除关键字 true 以外的其它值都被视作布尔假</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.truth</span>(<span class="number">40</span>); <span class="comment">// 这里的传参 40 被视作布尔假，不会匹配上面定义的混合（mixin）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  导引序列可以使用基于 <strong>CSS media queries</strong> 的逻辑操作符</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用关键字 and 合并导引序列，表示条件的并且关系</span></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (isnumber(<span class="variable">@a</span>)) <span class="keyword">and</span> (<span class="variable">@a</span> &gt; <span class="number">0</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用逗号 , 合并导引序列，表示条件的或者（or）关系</span></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="number">10</span>), (<span class="variable">@a</span> &lt; -<span class="number">10</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用关键字 not 取反</span></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@b</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@b</span> &gt; <span class="number">0</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>  最后，如果想基于值的类型进行匹配，我们就可以使用 <strong>is</strong>* 函式</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.mixin (@a, @b: 0) when (isnumber(@b)) &#123; ... &#125;</span><br><span class="line">.mixin (@a, @b: black) when (iscolor(@b)) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>  可用的 is* 函数</p>
<ul>
<li><a href="http://lesscss.org/functions/#type-functions-iscolor">iscolor</a></li>
<li><a href="http://lesscss.org/functions/#type-functions-isnumber">isnumber</a></li>
<li><a href="http://lesscss.org/functions/#type-functions-isstring">isstring</a></li>
<li><a href="http://lesscss.org/functions/#type-functions-iskeyword">iskeyword</a></li>
<li><a href="http://lesscss.org/functions/#type-functions-isurl">isurl</a></li>
<li><a href="http://lesscss.org/functions/#type-functions-ispixel">ispixel</a> 判断一个值的单位是否是 px</li>
<li><a href="http://lesscss.org/functions/#type-functions-ispercentage">ispercentage</a> 判断一个值的单位是否是 百分比</li>
<li><a href="http://lesscss.org/functions/#type-functions-isem">isem</a> 判断一个值的单位是否是 em</li>
<li><a href="http://lesscss.org/functions/#type-functions-isunit">isunit(value, unit)</a> 判断一个值是否是指定的单位类型</li>
<li><a href="http://lesscss.org/functions/#type-functions-isruleset">isruleset</a></li>
</ul>
</li>
</ul>
<h4 id="2-3-嵌套（Nesting）"><a href="#2-3-嵌套（Nesting）" class="headerlink" title="2.3. 嵌套（Nesting）"></a>2.3. 嵌套（Nesting）</h4><p>LESS 可以让我们以嵌套的方式编写层叠样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  color: black;</span><br><span class="line"></span><br><span class="line">  .navigation &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">  .logo &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    // 符号 &amp; 表示当前选择器的父级</span><br><span class="line">    // 主要用于编写串联选择器，对伪类（如:hover、:focus）尤其有用</span><br><span class="line">    &amp;:hover &#123; text-decoration: none &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">#header &#123;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line">#header .navigation &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">#header .logo &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">#header .logo:hover &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@规则（At-rules）例如 <strong>@media</strong> 或 <strong>@supports</strong>，同样是可以被嵌套的，编译后，@规则被放在顶级，同一个规则集下的其它元素相对顺序保持不变，如下示例：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="keyword">@media</span>  (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-运算（Operations）"><a href="#2-4-运算（Operations）" class="headerlink" title="2.4. 运算（Operations）"></a>2.4. 运算（Operations）</h4><p>任何数字、颜色或者变量都可以采用运算符 <strong>加（ + ）</strong>、<strong>减（ - ）</strong>、<strong>乘（ * ）</strong>、 <strong>除（ / ）</strong> 进行运算。</p>
<p>在加、减或比较数字之前，如果数字包含单位，则先转换成相同的单位（比如 10mm 转成 1cm），并且<strong>以最左侧的单位为基准</strong>。如果单位是不可转换的（比如 px → cm）或转换是没有意义的，则会被忽略。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 结果：6cm（10mm 先转成 1cm 然后再计算）</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3mm</span> - <span class="number">5cm</span>; <span class="comment">// 结果：-51mm（5cm 先转成 50mm 然后再计算）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; <span class="comment">// 结果：4px（cm 不能转成 px，所以单位被忽略）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 结果：10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 结果：15%</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span> / <span class="number">4</span>; <span class="comment">// 结果：#222222</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span> / <span class="number">2</span> + <span class="variable">@filler</span>; <span class="comment">// 结果：60%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>乘法</strong> 和 <strong>除法</strong> 运算不会转换数字，因为在大多数情况下，这是没有意义的：长度乘以长度会产生一个区域，而css不支持指定区域。所以，LESS 将会对数字进行原样操作（忽略单位）,并将最左侧指定的单位带到结果里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@base: 2cm * 3mm; // 结果：6cm</span><br></pre></td></tr></table></figure>

<h4 id="2-5-函数（Functions）"><a href="#2-5-函数（Functions）" class="headerlink" title="2.5. 函数（Functions）"></a>2.5. 函数（Functions）</h4><p>LESS 提供了一系列针对颜色、字符串和数学运算的函数，详见<a href="http://lesscss.org/functions">官方文档</a>。</p>
<p>下面是一些示例：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hue</span>(<span class="variable">@color</span>);        <span class="comment">// 获取颜色的色调</span></span><br><span class="line"><span class="selector-tag">saturation</span>(<span class="variable">@color</span>); <span class="comment">// 获取颜色的饱和度</span></span><br><span class="line"><span class="selector-tag">lightness</span>(<span class="variable">@color</span>);  <span class="comment">// 获取颜色的亮度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于一种颜色创建另一种颜色</span></span><br><span class="line"><span class="comment">// @new 将会保持 @old的 色调, 但是具有不同的饱和度和亮度</span></span><br><span class="line">@<span class="selector-tag">new</span>: <span class="selector-tag">hsl</span>(hue(<span class="variable">@old</span>), <span class="number">45%</span>, <span class="number">90%</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">percentage</span>(<span class="number">0.5</span>); <span class="comment">// 转成百分比 50%</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-命名空间"><a href="#2-6-命名空间" class="headerlink" title="2.6. 命名空间"></a>2.6. 命名空间</h4><p>有时候，为了更好组织 CSS 或者单纯是为了更好的封装，将一些变量或者混合（mixins）模块打包起来, 你可以像下面这样在 #bundle 中定义一些属性集：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#bundle</span> &#123;</span><br><span class="line">  <span class="selector-class">.button</span> () &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">background-color</span>: white &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 &gt; 引用某属性集下面的规则：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span> &gt; <span class="selector-class">.button</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-7-作用域（Scope）"><a href="#2-7-作用域（Scope）" class="headerlink" title="2.7. 作用域（Scope）"></a>2.7. 作用域（Scope）</h4><p>LESS 中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合（mixins）模块，如果没找到的话会去父级作用域中查找，直到找到为止。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@var: red;</span><br><span class="line"></span><br><span class="line">#page &#123;</span><br><span class="line">  @var: white;</span><br><span class="line">  #header &#123;</span><br><span class="line">    color: @var; // white，首先在 #header 里查找，然后 #page，然后再向外层</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-8-注释（Comments）"><a href="#2-8-注释（Comments）" class="headerlink" title="2.8. 注释（Comments）"></a>2.8. 注释（Comments）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这种是 less 加入的注释，不会被编译</span></span><br><span class="line"><span class="comment">/* 这种是保留的 css 注释，编译时保留 */</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-引入（Importing）-less-文件"><a href="#2-9-引入（Importing）-less-文件" class="headerlink" title="2.9. 引入（Importing） *.less 文件"></a>2.9. 引入（Importing） *.less 文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &quot;library&quot;; // library.less 后缀名可带可不带</span><br><span class="line">@import &quot;typo.css&quot;; // 直接导入 CSS 文件，不想 LESS 对它进行处理</span><br></pre></td></tr></table></figure>

<h4 id="2-10-变量嵌入字符串"><a href="#2-10-变量嵌入字符串" class="headerlink" title="2.10. 变量嵌入字符串"></a>2.10. 变量嵌入字符串</h4><p>变量可以用类似 ruby 和 php 的方式嵌入到字符串中，结构：@{name}</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base-url:</span> <span class="string">&quot;http://assets.fnord.com&quot;</span>;</span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">&quot;@&#123;base-url&#125;/images/bg.png&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-11-使用-禁止编译"><a href="#2-11-使用-禁止编译" class="headerlink" title="2.11. 使用 ~ 禁止编译"></a>2.11. 使用 ~ 禁止编译</h4><p>有时候我们需要输出一些不正确的 CSS 语法或者使用一些  LESS 不认识的专有语法，这时可以使用符合 **~**，如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="string">~&quot;ms:alwaysHasItsOwnSyntax.For.Stuff()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="attribute">ms</span>:alwaysHasItsOwnSyntax.For.Stuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-12-使用-JavaScript-表达式"><a href="#2-12-使用-JavaScript-表达式" class="headerlink" title="2.12. 使用 JavaScript 表达式"></a>2.12. 使用 JavaScript 表达式</h4><p>通过反引号的方式可以再 LESS 中使用 JavaScript 表达式。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="built_in">`&quot;hello&quot;.toUpperCase() + &#x27;!&#x27;`</span>; <span class="comment">// 结果：HELLO!</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>HTML&amp;CSS</tag>
        <tag>CSS</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer 很慢怎么办？</title>
    <url>/post/806379323.html</url>
    <content><![CDATA[<blockquote>
<p>🔗 关于 Composer 的详细安装使用，详见之前的文章：<a href="462910674.html">在 PHP 中安装、使用 Composer 包管理工具</a></p>
</blockquote>
<p>Composer 在国内不管是更新还是安装都有一个「<strong>慢</strong>」的问题，有的时候真的很煎熬。</p>
<p>因此我们一般会替换为 <a href="https://pkg.phpcomposer.com/">Packagist / Composer 中国全量镜像</a>，然而在使用过程发现，这个镜像并不稳定，有时候也会挂掉，所以本文介绍另外两种加速 composer 的方式。</p>
<span id="more"></span>
<h3 id="方式一：使用另一个镜像（推荐）"><a href="#方式一：使用另一个镜像（推荐）" class="headerlink" title="方式一：使用另一个镜像（推荐）"></a>方式一：使用另一个镜像（推荐）</h3><p>现在阿里云官方已经推出了 Composer 全量镜像，详见这里 <a href="https://mirrors.aliyun.com/composer/">https://mirrors.aliyun.com/composer</a></p>
<blockquote>
<p>同时推荐一个 Composer 镜像源切换管理工具 <a href="https://github.com/slince/composer-registry-manager" title="https://github.com/slince/composer-registry-manager">composer-registry-manager</a> 👍</p>
</blockquote>
<ul>
<li><p>设置镜像：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 表示全局，去除该参数则只对当前项目生效</span></span><br><span class="line">➜  composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure></li>
<li><p>取消镜像：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  composer config -g --<span class="built_in">unset</span> repos.packagist</span><br></pre></td></tr></table></figure></li>
<li><p>调试</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 追加参数 -vvv 可输出详细的信息</span></span><br><span class="line">➜  composer -vvv require alibabacloud/sdk</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="方式二：使用代理"><a href="#方式二：使用代理" class="headerlink" title="方式二：使用代理"></a>方式二：使用代理</h3><p>如果你的机器有本机 ssr 或其它代理，比如我的本机代理：<code>http://127.0.0.1:1087</code>，那么我在使用 Composer 时可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;</span><br><span class="line">➜  composer require qiniu/php-sdk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ <strong>注意</strong>：上面的操作只在当前 session 生效，新建或切换一个 tab 后会失效。如果想永久生效，需修改 <code>~/.bashsrc</code>。<strong>建议只是临时使用这种方式，强烈推荐采用方式一的全量镜像。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
        <tag>包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 之 PSR 标准规范</title>
    <url>/post/2710129075.html</url>
    <content><![CDATA[<p>PSR（PHP Standards Recommendation） 是由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p>
<p>由于标准在不断制定，本文主要介绍 PSR-1、PSR-2、PSR-3、PSR-4的一些主要细节，后面逐步更新所有标准。</p>
<span id="more"></span>

<h3 id="PSR-1-基本的代码风格"><a href="#PSR-1-基本的代码风格" class="headerlink" title="PSR-1 基本的代码风格"></a>PSR-1 基本的代码风格</h3><h4 id="PHP-标签"><a href="#PHP-标签" class="headerlink" title="PHP 标签"></a>PHP 标签</h4><p>PHP 代码必须放在 <code>&lt;?php ... ?&gt;</code> 或 <code>&lt;?= ...?&gt;</code> 标签中。</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>无 BOM 的 UTF-8 字符集。</p>
<h4 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h4><p>命名空间和类必须遵守 PSR-4 自动加载器标准。</p>
<h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>驼峰式：所有单词首字母大写。</p>
<h4 id="参量名"><a href="#参量名" class="headerlink" title="参量名"></a>参量名</h4><p>全部大写，如果需要可添加下划线分隔单词。</p>
<h4 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h4><p>驼峰式：首字母小写，后续单词首字母大写。</p>
<h3 id="PSR-2-严格的代码风格"><a href="#PSR-2-严格的代码风格" class="headerlink" title="PSR-2 严格的代码风格"></a>PSR-2 严格的代码风格</h3><h4 id="贯彻-PSR-1-⭐️"><a href="#贯彻-PSR-1-⭐️" class="headerlink" title="贯彻 PSR-1 ⭐️"></a>贯彻 PSR-1 ⭐️</h4><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>四个空格（一般编辑器都可以设置：将一个制表符转换为4个空格）。</p>
<h4 id="文件和代码行"><a href="#文件和代码行" class="headerlink" title="文件和代码行"></a>文件和代码行</h4><ol>
<li>PHP 文件采用 UNIX 风格换行符（LF），末尾一个空行；</li>
<li>每行代码推荐小于80个字符，最大120。</li>
</ol>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>使用小写字母，如：true、false</p>
<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ol>
<li>命名空间声明（namespace）语句后紧跟一个空行；</li>
<li>导入命名空间（use）时，最后跟一个空行。</li>
</ol>
<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ol>
<li>类定义体的起始括号在类名之后新起一行</li>
<li>extends 与 implements 关键字必须与类名在同一行。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassName extends ParentClass implements Interface</span><br><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ol>
<li>方法定义体的起始括号在方法名之后新起一行；</li>
<li>方法定义体结束括号后新起一行；</li>
<li>方法参数的括号两边没有空格；</li>
<li>每个参数（除最后一个）后面跟一个逗号和空格。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app;</span><br><span class="line"></span><br><span class="line">Class</span><br><span class="line">&#123;</span><br><span class="line">    public function f1($var1, $v2 = null)</span><br><span class="line">    &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function f2($v3)</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><ol>
<li>类中的每个属性和方法都要声明可见性：public、private、protected；</li>
<li>不要在私有方法前加下划线（_）；</li>
<li>abstract 或 final 放在可见性关键字之前；</li>
<li>static 放在可见性关键字之后。</li>
</ol>
<h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4><ol>
<li>涉及关键字：if、else、elseif、switch、case、while、do while、for、foreach、catch。</li>
<li>如果控制关键字后面有一对括号（与关键字在同一行），则起始括号后面、结束括号前面不能有空格；</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($me-&gt;isAlive() === true) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125; while ($me-&gt;isWorking());</span><br><span class="line"></span><br><span class="line">    $me-&gt;sayHaha();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PSR-3-日志记录器接口"><a href="#PSR-3-日志记录器接口" class="headerlink" title="PSR-3 日志记录器接口"></a>PSR-3 日志记录器接口</h3><p>提供类一个日志接口 Psr\Log\LoggerInterface，其复用类 RFC 5424 系统日志协议，详见：<a href="http://tools.ietf.org/html/rfc5424">http://tools.ietf.org/html/rfc5424</a></p>
<p>推荐 <a href="http://packagist.org/packages/monolog/monolog">monolog/monolog</a>，一个实现类 PSR-3 的日志记录器。</p>
<h3 id="PSR-4-自动加载"><a href="#PSR-4-自动加载" class="headerlink" title="PSR-4 自动加载"></a>PSR-4 自动加载</h3><p>基于命名空间查找和加载类、接口、性状。</p>
<p>推荐使用 Composer 包依赖管理工具，使用方法<a href="462910674.html">参照这里</a>。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PSR</tag>
        <tag>PSR-1</tag>
        <tag>PSR-2</tag>
        <tag>PSR-3</tag>
        <tag>PSR-4</tag>
      </tags>
  </entry>
  <entry>
    <title>在 PHP 中安装、使用 Composer 包管理工具</title>
    <url>/post/462910674.html</url>
    <content><![CDATA[<blockquote>
<p>Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。</p>
</blockquote>
<h3 id="0-相关资源及概述"><a href="#0-相关资源及概述" class="headerlink" title="0. 相关资源及概述"></a>0. 相关资源及概述</h3><ul>
<li><p>Composer官网 <a href="https://getcomposer.org/">https://getcomposer.org</a></p>
</li>
<li><p>Composer Github 地址 <a href="https://github.com/composer/composer">https://github.com/composer/composer</a></p>
</li>
<li><p>Composer中国镜像 <a href="http://www.phpcomposer.com/">http://www.phpcomposer.com</a></p>
</li>
<li><p>阿里云全量镜像（👍 <strong>推荐</strong>）：<a href="https://developer.aliyun.com/composer">https://developer.aliyun.com/composer</a></p>
</li>
<li><p><strong>Packagist</strong></p>
<p>  官网：<a href="https://packagist.org/">https://packagist.org</a></p>
<p>  它是 Composer 主要的一个包信息存储库，包开发者将具体代码托管到 Github 上，将包信息提交到 Packagist 上，这样使用者就可以通过 Composer 去使用。它的执行顺序如下：</p>
<ul>
<li>首先，Composer 根据本地定义的 <code>composer.json</code> 信息去查询 Packagist；</li>
<li>其次，Packagist 根据 <code>composer.json/package.json</code> 信息解析，最终对应到Github 仓库；</li>
<li>最后，Composer 基于 Github 仓库上的 <code>composer.json</code> 下载代码到本地。</li>
</ul>
</li>
<li><p><strong>composer.json</strong></p>
<p>  这是 Composer 的核心，主要用来配置 Composer 的执行规则。</p>
</li>
<li><p><strong>自动加载</strong></p>
<p>  Composer 基于 PHP 命名空间和 PSR-4 标准开发、集成了一个自动加载器。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1. 安装配置"></a>1. 安装配置</h3><h4 id="1-1-下载-composer-phar"><a href="#1-1-下载-composer-phar" class="headerlink" title="1.1. 下载 composer.phar"></a>1.1. 下载 composer.phar</h4><ul>
<li><p>Linux / Unix / OSX</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">➜ curl -sS https://getcomposer.org/installer | php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上面的 curl 命令出错或无法使用，可用 php 命令代替</span></span><br><span class="line">➜ php -r <span class="string">&quot;readfile(&#x27;https://getcomposer.org/installer&#x27;);&quot;</span> | php</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----- 下面是其它的一些参数 -----</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --install-dir 指定下载目录</span></span><br><span class="line">➜ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># --filename 指定下载成功存放的 composer 文件名</span></span><br><span class="line">➜ curl -sS https://getcomposer.org/installer | php -- --filename=composer</span><br><span class="line"></span><br><span class="line"><span class="comment"># --version 下载指定版本的 composer</span></span><br><span class="line">➜ curl -sS https://getcomposer.org/installer | php -- --version=1.0.0-alpha8</span><br></pre></td></tr></table></figure></li>
<li><p>Windows</p>
<p>方式一：使用安装器 👍</p>
<p>下载、运行 <a href="https://getcomposer.org/Composer-Setup.exe">Composer-Setup.exe</a> ，将自动下载 composer 并配置好相关环境变量，之后可直接使用命令 composer</p>
<p>方式二：<a href="https://getcomposer.org/composer.phar">点击这里</a>手动下载</p>
</li>
</ul>
<h4 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2. 配置"></a>1.2. 配置</h4><p>下载得到 composer.phar 文件后，我们就可以通过如下命令来使用了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Composer 版本</span></span><br><span class="line">➜ php composer.phar -V</span><br><span class="line">Composer version 1.4.1 2017-03-10 09:29:45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Composer 帮助</span></span><br><span class="line">➜ php composer.phar</span><br></pre></td></tr></table></figure>

<p>为了更好的使用 Composer，在 Linux 系统下，我们可以通过如下方式简化命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line">➜ sudo chmod+x /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以直接使用 composer 来操作了</span></span><br><span class="line">➜ composer -V</span><br><span class="line">Composer version 1.4.1 2017-03-10 09:29:45</span><br></pre></td></tr></table></figure>

<blockquote>
<p> ⚠️ <strong>注意</strong>：如果提示找不到命令之类，需检查系统环境变量设置中是否包含路径 <strong>/usr/local/bin</strong></p>
</blockquote>
<h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h3><p>这里以安装一个二维码组件为例，包的标识为 <code>endroid/qrcode</code></p>
<h4 id="2-1-安装依赖包"><a href="#2-1-安装依赖包" class="headerlink" title="2.1. 安装依赖包"></a>2.1. 安装依赖包</h4><ul>
<li><p>方式一：使用 composer require 命令</p>
<p>  格式： composer require 包的标识（厂商名/包名）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ mkdir -p ~/www/composer_demo</span><br><span class="line">➜ <span class="built_in">cd</span> ~/www/composer_demo</span><br><span class="line">➜ composer require endroid/qrcode</span><br></pre></td></tr></table></figure></li>
<li><p>方式二：使用 composer install 命令</p>
<p>  在项目根目录下编辑 composer.json 文件，通过 require 配置项目依赖的包，如下：</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;endroid/qrcode&quot;</span>: <span class="string">&quot;^2.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  然后使用以下命令进行安装</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ composer install</span><br></pre></td></tr></table></figure></li>
</ul>
<p>包安装好之后，目录结构如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── composer.json  -----&gt; 项目通过 composer 设置的配置信息</span><br><span class="line">├── composer.lock  -----&gt; 锁定项目，只使用其列出的具体版本的包</span><br><span class="line">└── vendor  -----&gt; 组件本源码存放位置</span><br><span class="line">    ├── autoload.php</span><br><span class="line">    ├── bacon</span><br><span class="line">    ├── composer</span><br><span class="line">    ├── endroid</span><br><span class="line">    ├── khanamiryan</span><br><span class="line">    ├── myclabs</span><br><span class="line">    ├── paragonie</span><br><span class="line">    └── symfony</span><br></pre></td></tr></table></figure>

<h4 id="2-2-使用安装的包"><a href="#2-2-使用安装的包" class="headerlink" title="2.2. 使用安装的包"></a>2.2. 使用安装的包</h4><p>在需要使用包的 PHP 文件头部添加以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/audoload.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>现在参考组件的说明文档，开始使用吧！</p>
<h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h3><p>更多详细命令介绍请<a href="http://docs.phpcomposer.com/03-cli.html">访问这里</a>或直接执行 <code>composer commands help</code></p>
<h4 id="3-1-composer-init"><a href="#3-1-composer-init" class="headerlink" title="3.1. composer init"></a>3.1. composer init</h4><p>以命令行交互方式创建 composer.json 并初始化项目的依赖、描述等信息，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ composer init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Welcome to the Composer config generator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This <span class="built_in">command</span> will guide you through creating your composer.json config.</span><br><span class="line"></span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [sunqiang/<span class="built_in">test</span>]: company/package1</span><br><span class="line">Description []:</span><br><span class="line">Author [whorusq &lt;whorusq@gmail.com&gt;, n to skip]:</span><br><span class="line">Minimum Stability []:</span><br><span class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []:</span><br><span class="line">License []:</span><br><span class="line"></span><br><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]? no</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;company/package1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authors&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;whorusq&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;whorusq@gmail.com&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;require&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Do you confirm generation [yes]? yes</span><br><span class="line">➜ ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 user1  staff   170B  9  4 13:45 composer.json</span><br></pre></td></tr></table></figure>

<h4 id="3-2-composer-install"><a href="#3-2-composer-install" class="headerlink" title="3.2. composer install"></a>3.2. composer install</h4><p>这是最常用的命令，Composer 会根据本地的 <code>composer.json</code> 安装需要的依赖包。</p>
<p>下载下来的包放入项目下的 <code>vendor</code> 目录中，同时将安装时候的包版本信息放入到 <code>composer.lock</code> 文件，以便锁定版本。</p>
<blockquote>
<p><strong>⚠️ 注意</strong>：</p>
<ul>
<li><p>如果当前目录下存在 <code>composer.lock</code> 文件，它会从此文件读取依赖版本，而不是根据 <code>composer.json</code> 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。</p>
</li>
<li><p>如果没有 <code>composer.lock</code> 文件，composer 将在处理完依赖关系后创建它。</p>
</li>
</ul>
</blockquote>
<h4 id="3-3-composer-update"><a href="#3-3-composer-update" class="headerlink" title="3.3. composer update"></a>3.3. composer update</h4><p>为了获取依赖的最新版本，并且升级 <code>composer.lock</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目目录（composer.json 所在位置）下执行</span></span><br><span class="line">➜ composer update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你只是想更新几个包，你可以像这样分别列出它们：</span></span><br><span class="line">➜ composer update vendor/package vendor/package2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你还可以使用通配符进行批量更新：</span></span><br><span class="line">➜ composer update vendor/*</span><br></pre></td></tr></table></figure>


<h4 id="3-4-composer-config"><a href="#3-4-composer-config" class="headerlink" title="3.4. composer config"></a>3.4. composer config</h4><p>用以编辑 Composer 的一些基本设置</p>
<ul>
<li>全局配置：<code>COMPOSER_HOME/config.json</code></li>
<li>非全局配置：当前项目的目录下 <code>composer.json</code></li>
</ul>
<h4 id="3-5-composer-create-project"><a href="#3-5-composer-create-project" class="headerlink" title="3.5. composer create-project"></a>3.5. composer create-project</h4><p>从现有的包中创建一个新的项目。这相当于执行了一个 <code>git clone</code> 或 <code>svn checkout</code> 命令后将这个包的依赖安装到它自己的 vendor 目录。</p>
<p>此命令有几个常见的用途：</p>
<ul>
<li>快速的部署你的应用。</li>
<li>检出任何资源包，并开发它的补丁。</li>
<li>多人开发项目，可以用它来加快应用的初始化。</li>
</ul>
<p><strong>默认情况下，这个命令会在 <a href="packagist.org">packagist.org</a> 上查找你指定的包。</strong></p>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 Composer 下载、初始化 ThinkPHP5.x</span></span><br><span class="line">➜ composer create-project topthink/think tp5  --prefer-dist</span><br></pre></td></tr></table></figure>

<h4 id="3-6-composer-require"><a href="#3-6-composer-require" class="headerlink" title="3.6. composer require"></a>3.6. composer require</h4><p>增加新的依赖包到当前目录的 <code>composer.json</code> 文件中，并且在添加或改变依赖时， 修改后的依赖关系将被安装或者更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认交互模式</span></span><br><span class="line">➜ composer require</span><br><span class="line">Search <span class="keyword">for</span> a package: gearman</span><br><span class="line"></span><br><span class="line">Found 15 packages matching gearman</span><br><span class="line"></span><br><span class="line">   [0] mhlavac/gearman</span><br><span class="line">   [1] silverstripe-australia/gearman</span><br><span class="line">   [2] dmank/gearman</span><br><span class="line">   [3] pafelin/gearman</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">Enter package <span class="comment"># to add, or the complete package name if it is not listed: 0</span></span><br><span class="line">Enter the version constraint to require (or leave blank to use the latest version):</span><br><span class="line">Using version ^0.1.0 <span class="keyword">for</span> mhlavac/gearman</span><br><span class="line">Search <span class="keyword">for</span> a package: ^C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非交互模式，直接指定需要的包名</span></span><br><span class="line">➜ composer require mhlavac/gearman</span><br></pre></td></tr></table></figure>

<h4 id="3-7-self-update"><a href="#3-7-self-update" class="headerlink" title="3.7. self-update"></a>3.7. self-update</h4><p>将 Composer 自身升级到最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ composer self-update</span><br><span class="line">You are already using composer version 1.5.1 (stable channel).</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
        <tag>包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 之命令行模式</title>
    <url>/post/954645501.html</url>
    <content><![CDATA[<h3 id="1-所有可用命令"><a href="#1-所有可用命令" class="headerlink" title="1. 所有可用命令"></a>1. 所有可用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">which</span> php</span><br><span class="line">/usr/bin/php</span><br><span class="line">➜ php -h</span><br><span class="line">Usage: php [options] [-f] &lt;file&gt; [--] [args...]</span><br><span class="line">   php [options] -r &lt;code&gt; [--] [args...]</span><br><span class="line">   php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class="line">   php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class="line">   php [options] -S &lt;addr&gt;:&lt;port&gt; [-t docroot]</span><br><span class="line">   php [options] -- [args...]</span><br><span class="line">   php [options] -a</span><br><span class="line"></span><br><span class="line">  -a               以交互式shell模式运行</span><br><span class="line">  -c &lt;path&gt;|&lt;file&gt; 在此目录中查找php.ini文件</span><br><span class="line">  -n               指定不使用php.ini文件</span><br><span class="line">  -d foo[=bar]     定义一个INI实体，key为foo，value为<span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  -e               为调试和分析生成扩展信息</span><br><span class="line">  -f &lt;file&gt;        解释和执行文件</span><br><span class="line">  -h               打印当前帮助信息</span><br><span class="line">  -i               显示PHP的基本信息</span><br><span class="line">  -l               进行语法检查 (lint)</span><br><span class="line">  -m               显示编译到内核的模块</span><br><span class="line">  -r &lt;code&gt;        运行PHP代码，不需要使用标签 &lt;?..?&gt;</span><br><span class="line">  -B &lt;begin_code&gt;  在处理输入之前先执行PHP代码</span><br><span class="line">  -R &lt;code&gt;        对输入的每一行作为PHP代码运行</span><br><span class="line">  -F &lt;file&gt;        解释执行文件 &lt;file&gt; 中的代码</span><br><span class="line">  -E &lt;end_code&gt;    在处理输入之后执行PHP代码</span><br><span class="line">  -H               从外部工具隐藏传递过的参数</span><br><span class="line">  -S &lt;addr&gt;:&lt;port&gt; 运行内建的web服务器</span><br><span class="line">  -t &lt;docroot&gt;     指定用于内建web服务器的文档根目录</span><br><span class="line">  -s               输出HTML语法高亮的源码</span><br><span class="line">  -v               输出PHP的版本号</span><br><span class="line">  -w               输出去掉注释和空格的源码</span><br><span class="line">  -z &lt;file&gt;        载入Zend扩展文件</span><br><span class="line"></span><br><span class="line">  args...          传递给要运行的脚本的参数。当第一个参数以-开始或者是脚本是从标准输入读取的时候，使用--参数</span><br><span class="line"></span><br><span class="line">  --ini            显示PHP的配置文件名</span><br><span class="line"></span><br><span class="line">  --rf &lt;name&gt;      显示关于函数 &lt;name&gt; 的信息</span><br><span class="line">  --rc &lt;name&gt;      显示关于类 &lt;name&gt; 的信息</span><br><span class="line">  --re &lt;name&gt;      显示关于扩展 &lt;name&gt; 的信息</span><br><span class="line">  --rz &lt;name&gt;      显示关于Zend扩展 &lt;name&gt; 的信息</span><br><span class="line">  --ri &lt;name&gt;      显示扩展 &lt;name&gt; 的配置信息</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2. 常用操作"></a>2. 常用操作</h3><h4 id="2-1-以交互模式运行-PHP"><a href="#2-1-以交互模式运行-PHP" class="headerlink" title="2.1. 以交互模式运行 PHP"></a>2.1. 以交互模式运行 PHP</h4><p>类似 Python，进入交互模式后，可用直接执行 PHP 代码，而不需要先创建 .php 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ php -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">hello world</span><br><span class="line">php &gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-运行内建的-Web-服务器"><a href="#2-2-运行内建的-Web-服务器" class="headerlink" title="2.2. 运行内建的 Web 服务器"></a>2.2. 运行内建的 Web 服务器</h4><p>从 <code>PHP 5.4.0</code> 开始，PHP 的命令行模式提供了一个内建的 Web 服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">pwd</span></span><br><span class="line">/Users/user1/<span class="built_in">test</span></span><br><span class="line">➜ touch index.php</span><br><span class="line">➜ <span class="built_in">echo</span> <span class="string">&quot;&lt;?php phpinfo();&quot;</span> &gt; index.php</span><br><span class="line">➜ php -S localhost:8000</span><br><span class="line">PHP 5.6.30 Development Server started at Tue Sep  5 10:53:51 2017</span><br><span class="line">Listening on http://localhost:8000</span><br><span class="line">Document root is /Users/user1/<span class="built_in">test</span></span><br><span class="line">Press Ctrl-C to quit.</span><br></pre></td></tr></table></figure>

<p>此时，我们在浏览器中输入地址 <a href="localhost:8000">localhost:8000</a> 即可打开 <code>index.php</code> ，并输出 <code>phpinfo()</code> 的内容，请求访问日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Tue Sep  5 10:53:53 2017] PHP Warning:  phpinfo(): It is not safe to rely on the system&#x27;s timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone &#x27;UTC&#x27; for now, but please set date.timezone to select your timezone. in /Users/user1/test/index.php on line 1</span><br><span class="line">[Tue Sep  5 10:53:53 2017] ::1:53689 [200]: /</span><br><span class="line">[Tue Sep  5 10:53:53 2017] ::1:53690 [404]: /favicon.ico - No such file or directory</span><br></pre></td></tr></table></figure>

<p>使用 <code>ctrl + c</code> 关闭服务</p>
<h4 id="2-3-查找-php-ini-文件"><a href="#2-3-查找-php-ini-文件" class="headerlink" title="2.3. 查找 php.ini 文件"></a>2.3. 查找 php.ini 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ php --ini</span><br><span class="line">Configuration File (php.ini) Path: /etc</span><br><span class="line">Loaded Configuration File:         /etc/php.ini</span><br><span class="line">Scan <span class="keyword">for</span> additional .ini files <span class="keyword">in</span>: (none)</span><br><span class="line">Additional .ini files parsed:      (none)</span><br><span class="line">➜ <span class="built_in">which</span> php</span><br><span class="line">/usr/bin/php</span><br><span class="line">➜ /usr/bin/php --ini</span><br><span class="line">Configuration File (php.ini) Path: /etc</span><br><span class="line">Loaded Configuration File:         /etc/php.ini</span><br><span class="line">Scan <span class="keyword">for</span> additional .ini files <span class="keyword">in</span>: (none)</span><br><span class="line">Additional .ini files parsed:      (none)</span><br></pre></td></tr></table></figure>

<h4 id="2-4-语法检查"><a href="#2-4-语法检查" class="headerlink" title="2.4. 语法检查"></a>2.4. 语法检查</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">echo</span> <span class="string">&quot;&lt;?php echo &#x27;hello world&#x27; &quot;</span> &gt; index.php</span><br><span class="line">➜ php -l index.php</span><br><span class="line">PHP Parse error:  parse error, expecting `<span class="string">&#x27;,&#x27;</span><span class="string">&#x27; or `&#x27;</span>;<span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> index.php on line 2</span><br><span class="line">Errors parsing index.php</span><br><span class="line">➜ <span class="built_in">echo</span> <span class="string">&quot;&lt;?php echo &#x27;hello world&#x27;; &quot;</span> &gt; index.php</span><br><span class="line">➜ php -l index.php</span><br><span class="line">No syntax errors detected <span class="keyword">in</span> index.php</span><br></pre></td></tr></table></figure>

<h4 id="2-5-命令行脚本开发"><a href="#2-5-命令行脚本开发" class="headerlink" title="2.5. 命令行脚本开发"></a>2.5. 命令行脚本开发</h4><p>在使用 C 语言开发程序时，我们通常会在 main 函数中提供两个可选的参数 <code>int main(int argc, char *argv[])</code>，这两个参数就是从命令行提供的输入参数。</p>
<p>在PHP中，提供了两个全局变量 <strong>$argc</strong> 和 <strong>$argv</strong> 用于获取命令行输入。</p>
<ul>
<li>$argc 包含了 $argv 数组包含元素的数目</li>
<li>$argv 是一个数组，包含了提供的参数，第一个参数总是脚本文件名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ vim console.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;命令行参数个数：&#x27;</span> . <span class="variable">$argc</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令行参数：\n&quot;</span>;</span><br><span class="line">foreach (<span class="variable">$argv</span> as <span class="variable">$key</span> =&gt; <span class="variable">$arg</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;\t&quot;</span> . <span class="variable">$key</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$arg</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜ php console.php hello world</span><br><span class="line">命令行参数个数：3</span><br><span class="line">命令行参数：</span><br><span class="line">	0 : console.php</span><br><span class="line">	1 : hello</span><br><span class="line">	2 : world</span><br></pre></td></tr></table></figure>

<p>在脚本中，可以通过 <code>php_sapi_name()</code> 函数判断是否是在命令行下运行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ php -r <span class="string">&#x27;echo php_sapi_name(), PHP_EOL;&#x27;</span></span><br><span class="line">cli</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP-CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Vagrant 入门指引</title>
    <url>/post/3519953407.html</url>
    <content><![CDATA[<h3 id="1-Vagrant-介绍"><a href="#1-Vagrant-介绍" class="headerlink" title="1. Vagrant 介绍"></a>1. Vagrant 介绍</h3><p>相关资源</p>
<ul>
<li>官网：<a href="https://www.vagrantup.com/" title="Vagrant homepage">https://www.vagrantup.com</a></li>
<li>文档（英文）：<a href="https://www.vagrantup.com/docs" title="Vagrant docs">https://www.vagrantup.com/docs</a></li>
<li>文档（中文）：<a href="https://tangbaoping.github.io/vagrant_doc_zh/v2">https://tangbaoping.github.io/vagrant_doc_zh/v2</a></li>
<li>官方 box 仓库：<a href="https://app.vagrantup.com/boxes/search" title="Vagrant box">https://app.vagrantup.com/boxes/search</a></li>
<li>第三方 box 仓库：<a href="http://www.vagrantbox.es/" title="Vagrant box">http://www.vagrantbox.es</a>（还有<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images" title="Vagrant box">清华</a>、<a href="https://mirrors.ustc.edu.cn/ubuntu-cloud-images/" title="Vagrant box">中科大 👍</a>）</li>
<li>CentOS 官方 box 地址：<a href="http://cloud.centos.org/centos/7/vagrant/x86_64/images/">http://cloud.centos.org/centos/7/vagrant/x86_64/images/</a></li>
<li>Ubuntu 官方 box 地址：<a href="http://cloud-images.ubuntu.com/">http://cloud-images.ubuntu.com</a></li>
</ul>
<p>下面是节选自官方对 Vagrant 的说明：</p>
<blockquote>
<p><strong>WHY VAGRANT?</strong></p>
<p>Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team.</p>
<p>To achieve its magic, Vagrant stands on the<br>oulders of giants. Machines are provisioned on top of <strong>VirtualBox</strong>, <strong>VMware</strong>, <strong>AWS</strong>, or any other provider. Then, industry-standard provisioning tools such as shell scripts, Chef, or Puppet, can be used to automatically install and configure software on the machine.</p>
</blockquote>
<p>其实，说白了 Vagrant 就是一个普普通通的装了 Linux 的 VirtualBox 虚拟机，配以 Vagrant  团队为之开发的一系列套件，辅助完成诸如安装初始化、文件同步、ssh、部署环境升级、功能插件安装等等一些列问题的开发环境部署套件。</p>
<p>参见知乎话题：<a href="https://www.zhihu.com/question/32324376" title="Vagrant Docker">Vagrant 和 Docker的使用场景和区别?</a></p>
<p><strong>解决的痛点</strong>：</p>
<ul>
<li>开发环境快速部署</li>
<li>开发环境更迭</li>
</ul>
<span id="more"></span>

<h3 id="2-安装-Vagrant-和-VirtualBox"><a href="#2-安装-Vagrant-和-VirtualBox" class="headerlink" title="2. 安装 Vagrant 和 VirtualBox"></a>2. 安装 Vagrant 和 VirtualBox</h3><blockquote>
<p>官方说明中，Vagrant 是支持 VirtualBox/VMware/AWS 等虚拟软件的，选择 VirtualBox 主要是因为开源、免费、轻便。</p>
</blockquote>
<h4 id="2-1-安装-VirtualBox"><a href="#2-1-安装-VirtualBox" class="headerlink" title="2.1. 安装 VirtualBox"></a>2.1. 安装 VirtualBox</h4><p>VirtualBox 支持 Windows、macOS、Linux 等系统。</p>
<p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" title="Virtualbox Download">https://www.virtualbox.org/wiki/Downloads</a></p>
<p>建议同时安装扩展 <strong>VirtualBox xxxx Oracle VM VirtualBox Extension Pack</strong></p>
<h4 id="2-2-安装-Vagrant"><a href="#2-2-安装-Vagrant" class="headerlink" title="2.2. 安装 Vagrant"></a>2.2. 安装 Vagrant</h4><p>Vagrant 支持 Windows、CentOS、Linux x64、macOS 等系统。</p>
<p>下载地址：<a href="https://www.vagrantup.com/downloads.html" title="Vagrant Download">https://www.vagrantup.com/downloads.html</a></p>
<p>安装包是二进制文件，根据提示一步一步安装即可。安装程序会将 <code>vagrant</code> 命令添加到系统环境（path）变量，安装结束后可通过下面到命令检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在终端下验证 Vagrant 是否安装成功</span></span><br><span class="line">$ vagrant --version</span><br><span class="line">Vagrant 2.2.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者执行以下命令</span></span><br><span class="line"><span class="comment"># 该命令在查看软件版本的同时，会检测是否有新版本可更新</span></span><br><span class="line">$ vagrant version</span><br><span class="line">Installed Version: 2.2.4</span><br><span class="line">Latest Version: 2.2.6</span><br><span class="line"></span><br><span class="line">You<span class="string">&#x27;re running an up-to-date version of Vagrant!</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 关于软件升级：</p>
<ol>
<li>不要单独升级 VirtualBox 或 Vagrant ，二者需要版本匹配，如果你的 VirtualBox 升级了最新版本，那么一定要检查 Vagrant 是否也做了更新。</li>
<li>升级 VirtualBox 时，需同时升级扩展。</li>
<li>升级 Vagrant 时候，推荐先卸载，再安装最新版本。</li>
</ol>
</blockquote>
<h3 id="3-配置、启动-Vagrant"><a href="#3-配置、启动-Vagrant" class="headerlink" title="3. 配置、启动 Vagrant"></a>3. 配置、启动 Vagrant</h3><h4 id="3-1-添加一个-box"><a href="#3-1-添加一个-box" class="headerlink" title="3.1. 添加一个 box"></a>3.1. 添加一个 box</h4><p>从头开始创建一个虚拟机，是一个漫长而乏味的过程，因此 Vagrant 是通过基础镜像包来实现快速克隆创建虚拟机的。这些基础镜像包在 Vagrant 中被称为 <code>boxes</code> ， 而在创建 <code>Vagrantfile</code> 文件后的第一件事情就是指定 Vagrant 环境使用哪一个 Box。</p>
<p>原始的 box 是一个包含了基本系统和设置的镜像包，你可以通过基础包安装软件或做一些自定义配置，然后导出来成为新的基础包，再次使用的时候，直接导入你之前导出的这个 box 即可。</p>
<p>如何添加？</p>
<ul>
<li><p>方式一：使用 <a href="https://app.vagrantup.com/boxes/search" title="Vagrant box">Vagrant 官方仓库</a> 中对应的 box 名称</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此种方式无法修改添加的 box 名称</span></span><br><span class="line"><span class="comment"># 并且在某些情况下，下载速度可能比较缓慢，所以推荐使用方式二</span></span><br><span class="line">$ vagrant box add ubuntu/xenial64</span><br><span class="line">==&gt; box: Loading metadata <span class="keyword">for</span> box <span class="string">&#x27;ubuntu/xenial64&#x27;</span></span><br><span class="line">		box: URL: https://vagrantcloud.com/ubuntu/xenial64</span><br><span class="line">==&gt; box: Adding box <span class="string">&#x27;ubuntu/xenial64&#x27;</span> (v20190807.0.0) <span class="keyword">for</span> provider: virtualbox</span><br><span class="line">		box: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20190807.0.0/providers/virtualbox.box</span><br><span class="line">		box: Download redirected to host: cloud-images.ubuntu.com</span><br><span class="line">==&gt; box: Successfully added box <span class="string">&#x27;ubuntu/xenial64&#x27;</span> (v20190807.0.0) <span class="keyword">for</span> <span class="string">&#x27;virtualbox&#x27;</span>!</span><br></pre></td></tr></table></figure></li>
<li><p>方式二：使用 <a href="http://www.vagrantbox.es/" title="Vagrant box">第三方仓库</a>（还有<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images" title="Vagrant box">清华</a>、<a href="https://mirrors.ustc.edu.cn/ubuntu-cloud-images/" title="Vagrant box">中科大 👍</a>），速度相对快一些，也更灵活</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 box 的绝对路径</span></span><br><span class="line">$ vagrant box add ubuntu1804 https://mirrors.ustc.edu.cn/ubuntu-cloud-images/xenial/current/xenial-server-cloudimg-amd64-vagrant.box</span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box <span class="string">&#x27;ubuntu1804&#x27;</span> (v0) <span class="keyword">for</span> provider:</span><br><span class="line">		box: Downloading: https://mirrors.ustc.edu.cn/ubuntu-cloud-images/xenial/current/xenial-server-cloudimg-amd64-vagrant.box</span><br><span class="line">		box:</span><br><span class="line">==&gt; box: Successfully added box <span class="string">&#x27;ubuntu1804&#x27;</span> (v0) <span class="keyword">for</span> <span class="string">&#x27;virtualbox&#x27;</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用之前导出的 box 或离线下载好的 box</span></span><br><span class="line"><span class="comment"># 导出方式详见下文的常用命令</span></span><br><span class="line">$ vagrant box add ubuntu1604 ./boxs/xenial-server-cloudimg-amd64-vagrant.box</span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box <span class="string">&#x27;ubuntu1604&#x27;</span> (v0) <span class="keyword">for</span> provider:</span><br><span class="line">    box: Unpacking necessary files from: file:///Users/sunqiang/myvagrant/boxs/xenial-server-cloudimg-amd64-vagrant.box</span><br><span class="line">==&gt; box: Successfully added box <span class="string">&#x27;ubuntu1604&#x27;</span> (v0) <span class="keyword">for</span> <span class="string">&#x27;virtualbox&#x27;</span>!</span><br></pre></td></tr></table></figure></li>
</ul>
<p>检查 box 是否添加成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box list</span><br><span class="line">centos7         (virtualbox, 0)</span><br><span class="line">ubuntu/xenial64 (virtualbox, 20190807.0.0)</span><br><span class="line">ubuntu1604      (virtualbox, 0)</span><br></pre></td></tr></table></figure>

<h4 id="3-2-初始化、启动"><a href="#3-2-初始化、启动" class="headerlink" title="3.2. 初始化、启动"></a>3.2. 初始化、启动</h4><ol>
<li><p>创建一个工作目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/vagrant/lamp</span><br><span class="line">$ <span class="built_in">cd</span> ~/vagrant/lamp</span><br></pre></td></tr></table></figure></li>
<li><p>以名字为 <em>ubuntu/xeninal64</em> 的 box 初始化 Vagrant</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant init ubuntu/xeninal64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A `Vagrantfile` has been placed <span class="keyword">in</span> this directory. You are now</span><br><span class="line">ready to `vagrant up` your first virtual environment! Please <span class="built_in">read</span></span><br><span class="line">the comments <span class="keyword">in</span> the Vagrantfile as well as documentation on</span><br><span class="line">`vagrantup.com` <span class="keyword">for</span> more information on using Vagrant.</span><br><span class="line"></span><br><span class="line">$ ls -la</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 用户名  staff   102  3  2 21:13 .</span><br><span class="line">drwxr-xr-x  5 用户名  staff   170  3  2 18:47 ..</span><br><span class="line">-rw-r--r--  1 用户名  staff  3011  3  2 21:13 Vagrantfile</span><br></pre></td></tr></table></figure></li>
<li><p>启动 Vagrant</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">Bringing machine <span class="string">&#x27;default&#x27;</span> up with <span class="string">&#x27;virtualbox&#x27;</span> provider...</span><br><span class="line">==&gt; default: Importing base box <span class="string">&#x27;ubuntu/xenial64&#x27;</span>...</span><br><span class="line">==&gt; default: Matching MAC address <span class="keyword">for</span> NAT networking...</span><br><span class="line">==&gt; default: Setting the name of the VM: lamp_default_1488461535325_84495</span><br><span class="line">==&gt; default: Fixed port collision <span class="keyword">for</span> 22 =&gt; 2222. Now on port 2201.</span><br><span class="line">==&gt; default: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2201 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2201</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default: Warning: Remote connection disconnect. Retrying...</span><br><span class="line">    default:</span><br><span class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    default: this with a newly generated keypair <span class="keyword">for</span> better security.</span><br><span class="line">    default:</span><br><span class="line">    default: Inserting generated public key within guest...</span><br><span class="line">    default: Removing insecure key from the guest <span class="keyword">if</span> it<span class="string">&#x27;s present...</span></span><br><span class="line"><span class="string">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</span></span><br><span class="line"><span class="string">==&gt; default: Machine booted and ready!</span></span><br><span class="line"><span class="string">==&gt; default: Checking for guest additions in VM...</span></span><br><span class="line"><span class="string">    default: No guest additions were detected on the base box for this VM! Guest</span></span><br><span class="line"><span class="string">    default: additions are required for forwarded ports, shared folders, host only</span></span><br><span class="line"><span class="string">    default: networking, and more. If SSH fails on this machine, please install</span></span><br><span class="line"><span class="string">    default: the guest additions and repackage the box to continue.</span></span><br><span class="line"><span class="string">    default:</span></span><br><span class="line"><span class="string">    default: This is not an error message; everything may continue to work properly,</span></span><br><span class="line"><span class="string">    default: in which case you may ignore this message.</span></span><br><span class="line"><span class="string">==&gt; default: Mounting shared folders...</span></span><br><span class="line"><span class="string">    default: /vagrant =&gt; /Users/用户名/myvagrant/lamp</span></span><br><span class="line"><span class="string">Vagrant was unable to mount VirtualBox shared folders. This is usually</span></span><br><span class="line"><span class="string">because the filesystem &quot;vboxsf&quot; is not available. This filesystem is</span></span><br><span class="line"><span class="string">made available via the VirtualBox Guest Additions and kernel module.</span></span><br><span class="line"><span class="string">Please verify that these guest additions are properly installed in the</span></span><br><span class="line"><span class="string">guest. This is not a bug in Vagrant and is usually caused by a faulty</span></span><br><span class="line"><span class="string">Vagrant box. For context, the command attempted was:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mount -t vboxsf -o uid=1000,gid=1000 vagrant /vagrant</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The error output from the command was:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mount: unknown filesystem type &#x27;</span>vboxsf<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看当前目录下（Vagrant配置文件）对应的虚拟机的运行状态</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant status</span><br><span class="line">Current machine states:</span><br><span class="line"></span><br><span class="line">default                   running (virtualbox)</span><br><span class="line"></span><br><span class="line">The VM is running. To stop this VM, you can run `vagrant halt` to</span><br><span class="line">shut it down forcefully, or you can run `vagrant <span class="built_in">suspend</span>` to simply</span><br><span class="line"><span class="built_in">suspend</span> the virtual machine. In either <span class="keyword">case</span>, to restart it again,</span><br><span class="line">simply run `vagrant up`.</span><br></pre></td></tr></table></figure></li>
</ol>
<p>完成上面的步骤，其实一个由 Vagrant 管理的虚拟机已经启动起来了。</p>
<p>此时，如果我们打开 VirtualBox 软件，在左侧的列表我们可以看到一个被新添加、并且<strong>正在运行</strong>状态的虚拟机。所以，并不需要打开 VirtualBox 软件，全部由 Vagrant 在命令行进行管理会更方便，参见附录部分：<a href="#4-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">4. 常用命令</a></p>
<blockquote>
<p>⚠️ <strong>注意</strong>：</p>
<p>虽然 Vagrant 已经启动运行了，但是在启动过程可能会报错（一般存在于使用第三方下载的 box 时）：</p>
<p><code>mount: unknown filesystem type &#39;vboxsf&#39;</code></p>
<p>这主要是下载的 box 里面 VirtualBox 扩展有问题，需要重新处理一下，参见常见问题部分：<a href="#6-1-mount-unknown-filesystem-type-39-vboxsf-39">6.1. mount: unknown filesystem type ‘vboxsf’</a></p>
</blockquote>
<h4 id="3-3-ssh-到虚拟机"><a href="#3-3-ssh-到虚拟机" class="headerlink" title="3.3. ssh 到虚拟机"></a>3.3. ssh 到虚拟机</h4><p>在工作目录下使用如下命令 ssh 登录到正在运行的虚拟机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant ssh</span><br><span class="line">Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-97-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  Get cloud support with Ubuntu Advantage Cloud Guest:</span><br><span class="line">    http://www.ubuntu.com/business/services/cloud</span><br><span class="line"></span><br><span class="line">0 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_____________________________________________________________________</span><br><span class="line">WARNING! Your environment specifies an invalid locale.</span><br><span class="line"> The unknown environment variables are:</span><br><span class="line">   LC_CTYPE=zh_CN.UTF-8 LC_ALL=</span><br><span class="line"> This can affect your user experience significantly, including the</span><br><span class="line"> ability to manage packages. You may install the locales by running:</span><br><span class="line"></span><br><span class="line">   sudo apt-get install language-pack-zh</span><br><span class="line">     or</span><br><span class="line">   sudo locale-gen zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line">To see all available language packs, run:</span><br><span class="line">   apt-cache search <span class="string">&quot;^language-pack-[a-z][a-z]$&quot;</span></span><br><span class="line">To <span class="built_in">disable</span> this message <span class="keyword">for</span> all users, run:</span><br><span class="line">   sudo touch /var/lib/cloud/instance/locale-check.skip</span><br><span class="line">_____________________________________________________________________</span><br><span class="line">ubuntu@ubuntu-xenial:~$ sudo locale-gen zh_CN.UTF-8</span><br><span class="line">Generating locales (this might take a <span class="keyword">while</span>)...</span><br><span class="line">  zh_CN.UTF-8... <span class="keyword">done</span></span><br><span class="line">Generation complete.</span><br><span class="line">ubuntu@ubuntu-xenial:~$ cat /etc/os-release</span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;16.04.3 LTS (Xenial Xerus)&quot;</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 16.04.3 LTS&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;16.04&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;http://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;http://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;http://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">VERSION_CODENAME=xenial</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br><span class="line">ubuntu@ubuntu-xenial:~$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to 127.0.0.1 closed.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>root 默认密码，通常为 vagrant</p>
</blockquote>
<h3 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 box</span></span><br><span class="line">$ vagrant box add new-box-name box文件地址（本地、远程）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 box</span></span><br><span class="line">$ vagrant box remove box-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定的 box 初始化</span></span><br><span class="line">$ vagrant init new-box-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">$ vagrant halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启，重新加载配置文件</span></span><br><span class="line">$ vagrant reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂起</span></span><br><span class="line">$ vagrant <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建快照（vm 名称使用 vagrant status 查看）</span></span><br><span class="line">$ vagrant snapshot save [vm名称] [快照名称]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看快照列表</span></span><br><span class="line">$ vagrant snapshot list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原到指定快照</span></span><br><span class="line">$ vagrant snapshot restore [vm名称] [快照名称]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除快照</span></span><br><span class="line">$ vagrant snapshot delete [快照名称]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭、删除 Vagrant 创建的虚拟机资源</span></span><br><span class="line">$ vagrant destroy</span><br><span class="line">    default: Are you sure you want to destroy the <span class="string">&#x27;default&#x27;</span> VM? [y/N] y</span><br><span class="line">==&gt; default: Forcing shutdown of VM...</span><br><span class="line">==&gt; default: Destroying VM and associated drives...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">$ vagrant package --output 自定义的包名.box</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多详细说明</span></span><br><span class="line">$ vagrant -h</span><br><span class="line">$ vagrant 命令名 -h</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h3><h4 id="5-1-Vagrantfile-常用配置"><a href="#5-1-Vagrantfile-常用配置" class="headerlink" title="5.1. Vagrantfile 常用配置"></a>5.1. Vagrantfile 常用配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虚拟机中 linux 的 hostname</span></span><br><span class="line">config.vm.hostname = <span class="string">&quot;vm-ubuntu1604-localhost&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟机名称，在类似创建备份等操作中会用到</span></span><br><span class="line">config.vm.define <span class="string">&quot;vm-ubuntu1604&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络设置1 - 公有（public_network）网络（允许局域网中其他机器访问）</span></span><br><span class="line">config.vm.network <span class="string">&quot;public_network&quot;</span>, ip: <span class="string">&quot;192.168.1.223&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络设置2 - 私有（private_network）网络（只允许主机访问虚拟机）</span></span><br><span class="line"><span class="comment"># 此时我们可以使用指定的 IP 加 端口号进行访问，比如使用 192.168.127.11:81 即可访问虚拟机里的 81 端口</span></span><br><span class="line">config.vm.network <span class="string">&quot;private_network&quot;</span>, ip: <span class="string">&quot;192.168.127.11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络设置3 - 将端口映射到宿主机</span></span><br><span class="line"><span class="comment"># 在宿主机使用 127.0.0.1:8080 即可访问虚拟机里的 80 端口</span></span><br><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, guest: 80, host: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享目录</span></span><br><span class="line"><span class="comment"># 注意：这里的 owner 和 group，与你搭建的 LAMP 环境运行用户一致（在 phpinfo() 页面中搜索 “user”）</span></span><br><span class="line">config.vm.synced_folder <span class="string">&quot;/Users/用户名/www&quot;</span>, <span class="string">&quot;/var/www/html&quot;</span>, create:<span class="literal">true</span>, owner:<span class="string">&quot;www-data&quot;</span>, group:<span class="string">&quot;www-data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VirtualBox 虚拟机配置（内存、CPU、显示名称等）</span></span><br><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|</span><br><span class="line"><span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></span><br><span class="line"><span class="comment">#   vb.gui = true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # Customize the amount of memory on the VM:</span></span><br><span class="line">    vb.memory = <span class="string">&quot;512&quot;</span></span><br><span class="line">    vb.name = <span class="string">&quot;ubuntu1604&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="5-2-关闭静态文件缓存"><a href="#5-2-关闭静态文件缓存" class="headerlink" title="5.2. 关闭静态文件缓存"></a>5.2. 关闭静态文件缓存</h4><p>使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx 配置文件进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Apache 配置（httpd.conf 或者 apache.conf）添加：</span></span><br><span class="line">EnableSendfile off</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 配置（nginx.conf）添加：</span></span><br><span class="line">sendfile off;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-虚拟机与宿主机时间同步设置"><a href="#5-3-虚拟机与宿主机时间同步设置" class="headerlink" title="5.3. 虚拟机与宿主机时间同步设置"></a>5.3. 虚拟机与宿主机时间同步设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$ VBoxManage list vms</span><br><span class="line"><span class="string">&quot;win7&quot;</span> &#123;87fd57f0-ef1f-4e6d-8529-0fee472ba76a&#125;</span><br><span class="line"><span class="string">&quot;win10&quot;</span> &#123;a7edfd3b-0706-43f6-bd3d-b79dc796eb28&#125;</span><br><span class="line"><span class="string">&quot;ubuntu1604&quot;</span> &#123;72329a00-87e3-40be-b5fc-a4417ce2aecb&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ VBoxManage getextradata <span class="string">&quot;ubuntu1604&quot;</span> <span class="string">&quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled&quot;</span></span><br><span class="line">No value <span class="built_in">set</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;ubuntu1604&quot;</span> <span class="string">&quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled&quot;</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经设置成功</span></span><br><span class="line">$ VBoxManage getextradata <span class="string">&quot;ubuntu1604&quot;</span> <span class="string">&quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled&quot;</span></span><br><span class="line">Value: 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动虚拟机以加载修改的配置</span></span><br><span class="line">$ vagrant reload</span><br></pre></td></tr></table></figure>


<h4 id="5-4-安装-VirtualBox-扩展工具"><a href="#5-4-安装-VirtualBox-扩展工具" class="headerlink" title="5.4. 安装 VirtualBox 扩展工具"></a>5.4. 安装 VirtualBox 扩展工具</h4><p>如果使用官方 box 初始化虚拟机，其实得到的是一个纯净的镜像，一些基础工具和设置需要你自己来配置（所以，还是推荐使用方式二）。</p>
<p>比如想要实现文件夹共享、网络、端口映射等，必须要安装 VirtualBox 扩展工具，具体安装方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入虚拟机</span></span><br><span class="line">$ vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装所需开发工具</span></span><br><span class="line">ubuntu@ubuntu1604:~$ sudo apt-get install linux-headers-$(uname -r) build-essential dkms</span><br><span class="line"></span><br><span class="line"><span class="comment"># VBoxGuestAdditions 扩展的版本，取前三位，如：5.2.20</span></span><br><span class="line"><span class="comment"># 所有可用版本：http://download.virtualbox.org/virtualbox</span></span><br><span class="line">ubuntu@ubuntu1604:~$  <span class="built_in">cd</span> /tmp</span><br><span class="line">ubuntu@ubuntu1604:~$  wget http://download.virtualbox.org/virtualbox/5.2.20/VBoxGuestAdditions_5.2.20.iso</span><br><span class="line">ubuntu@ubuntu1604:~$  sudo mkdir /media/VBoxGuestAdditions</span><br><span class="line">ubuntu@ubuntu1604:~$  sudo mount -o loop,ro VBoxGuestAdditions_5.2.20.iso /media/VBoxGuestAdditions</span><br><span class="line">ubuntu@ubuntu1604:~$  sudo sh /media/VBoxGuestAdditions/VBoxLinuxAdditions.run</span><br><span class="line">ubuntu@ubuntu1604:~$  rm VBoxGuestAdditions_5.2.20.iso</span><br><span class="line">ubuntu@ubuntu1604:~$  sudo umount /media/VBoxGuestAdditions</span><br><span class="line">ubuntu@ubuntu1604:~$  sudo rmdir /media/VBoxGuestAdditions</span><br><span class="line">ubuntu@ubuntu1604:~$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启虚拟机</span></span><br><span class="line">$ vagrant reload</span><br></pre></td></tr></table></figure>

<p>参照：<a href="https://www.vagrantup.com/docs/virtualbox/boxes.html">https://www.vagrantup.com/docs/virtualbox/boxes.html</a></p>
<p><strong>自动检查同步新版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant plugin install vagrant-vbguest</span><br><span class="line"><span class="comment"># 指定一个版本安装</span></span><br><span class="line">$ vagrant plugin install vagrant-vbguest --plugin-version 0.21</span><br></pre></td></tr></table></figure>

<p>之后，每次 <code>vagrant up</code> 过程中，如果发现虚拟机的 VBoxGuestAdditions 与宿主机不一致，则进行更新。</p>
<h3 id="6-常见问题处理"><a href="#6-常见问题处理" class="headerlink" title="6. 常见问题处理"></a>6. 常见问题处理</h3><h4 id="6-1-mount-unknown-filesystem-type-39-vboxsf-39"><a href="#6-1-mount-unknown-filesystem-type-39-vboxsf-39" class="headerlink" title="6.1. mount: unknown filesystem type &#39;vboxsf&#39;"></a>6.1. <code>mount: unknown filesystem type &#39;vboxsf&#39;</code></h4><ul>
<li><p>关闭虚拟机 <code>$ vagrant halt</code></p>
</li>
<li><p>使用 VirtualBox 启动虚拟机</p>
</li>
<li><p>添加虚拟机增强工具：依次单击菜单【设备】→【安装增强功能】</p>
</li>
<li><p>在 VirtualBox 中登录虚拟机，并执行以下命令挂载、安装</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mount /dev/cdrom /media/cdrom</span><br><span class="line">$ <span class="built_in">cd</span> /media/cdrom/</span><br><span class="line">$ sudo ./VBoxLinuxAddtions.run</span><br></pre></td></tr></table></figure></li>
<li><p>安装成功后，重新启动 <code>$ vagrant up</code></p>
</li>
</ul>
<h4 id="6-2-vagrant-192-168-127-11-Permission-denied-publickey-gssapi-keyex-gssapi-with-mic"><a href="#6-2-vagrant-192-168-127-11-Permission-denied-publickey-gssapi-keyex-gssapi-with-mic" class="headerlink" title="6.2. vagrant@192.168.127.11: Permission denied (publickey,gssapi-keyex,gssapi-with-mic)."></a>6.2. <code>vagrant@192.168.127.11: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</code></h4><p>SSH默认禁用密码连接，只允许使用密钥登录，需修改文件 <code>/etc/ssh/sshd_config</code> 中如下部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<h4 id="6-3-sbin-mount-vboxsf-mounting-failed-with-the-error-No-such-device"><a href="#6-3-sbin-mount-vboxsf-mounting-failed-with-the-error-No-such-device" class="headerlink" title="6.3. /sbin/mount.vboxsf: mounting failed with the error: No such device"></a>6.3. <code>/sbin/mount.vboxsf: mounting failed with the error: No such device</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum update</span><br><span class="line">yum install -y kernel kernel-devel kernel-headers gcc make</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/VBoxGuestAdditions-*/init</span><br><span class="line">./vboxadd setup</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 框架执行流程浅析</title>
    <url>/post/2410148889.html</url>
    <content><![CDATA[<blockquote>
<p>版本：v5.1.x LTS</p>
<p>v6.0 稳定版已经发布，详见官网：<a href="https://blog.thinkphp.cn/1347379" title="ThinkPHP 6.0">ThinkPHP 6.0</a></p>
</blockquote>
<p>这里以单入口为例解析 ThinkPHP 从接收前端请求到返回数据的整个执行流程，分为如下图的几个步骤：</p>
<p><img data-src="https://static.sqiang.net/image/post/ThinkPHP5.1+%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="ThinkPHP 框架执行流程浅析" title="ThinkPHP 框架执行流程浅析"></p>
<p>其中入口文件位置：<strong>public/index.php</strong></p>
<span id="more"></span>

<h3 id="1-加载-base-php"><a href="#1-加载-base-php" class="headerlink" title="1. 加载 base.php"></a>1. 加载 base.php</h3><p><img data-src="https://static.sqiang.net/image/post/ThinkPHP5.1+%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B1.png" alt="ThinkPHP5.1+框架执行流程1" title="ThinkPHP5.1+框架执行流程1"></p>
<h3 id="2-执行-App-的-run-方法"><a href="#2-执行-App-的-run-方法" class="headerlink" title="2. 执行 App 的 run() 方法"></a>2. 执行 App 的 run() 方法</h3><p><img data-src="https://static.sqiang.net/image/post/ThinkPHP5.1+%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B2.png" alt="ThinkPHP5.1+框架执行流程2" title="ThinkPHP5.1+框架执行流程2"></p>
<h3 id="3-执行-Response-的-send-方法"><a href="#3-执行-Response-的-send-方法" class="headerlink" title="3. 执行 Response 的 send() 方法"></a>3. 执行 Response 的 send() 方法</h3><p><img data-src="https://static.sqiang.net/image/post/ThinkPHP5.1+%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B3.png" alt="ThinkPHP5.1+框架执行流程3" title="ThinkPHP5.1+框架执行流程3"></p>
<h3 id="4-调用-Error-类"><a href="#4-调用-Error-类" class="headerlink" title="4. 调用 Error 类"></a>4. 调用 Error 类</h3><p><img data-src="https://static.sqiang.net/image/post/ThinkPHP5.1+%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B4.png" alt="ThinkPHP5.1+框架执行流程4" title="ThinkPHP5.1+框架执行流程4"></p>
<blockquote>
<p>说明：在加载 base.php 时，通过 <code>Error::register()</code> 注册了异常处理，所以在应用执行最后会调用 Error 类中相应的处理方法。</p>
</blockquote>
<blockquote>
<p>详见如下三个函数的文档：</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.set-error-handler.php" title="set_error_handler()">set_error_handler()</a></li>
<li><a href="https://www.php.net/manual/zh/function.set-exception-handler.php" title="set_exception_handler()">set_exception_handler()</a></li>
<li><a href="https://www.php.net/manual/zh/function.register-shutdown-function.php" title="register_shutdown_function()">register_shutdown_function()</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>curl 命令速查</title>
    <url>/post/2208464112.html</url>
    <content><![CDATA[<blockquote>
<p>本文整理自<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" title="《curl 的用法指南》">阮一峰 老师的《curl 的用法指南》</a>，思维导图版下载：</p>
<p>链接:<a href="https://pan.baidu.com/s/1JUu6axfBKwQF3YH_9GdBfA">https://pan.baidu.com/s/1JUu6axfBKwQF3YH_9GdBfA</a>  密码:cp21</p>
<p>文字版请阅读全文。</p>
</blockquote>
<span id="more"></span>

<h3 id="默认，无参数（GET-请求）"><a href="#默认，无参数（GET-请求）" class="headerlink" title="默认，无参数（GET 请求）"></a>默认，无参数（GET 请求）</h3><h3 id="A"><a href="#A" class="headerlink" title="-A"></a>-A</h3><p>指定 User-Agent，默认用户代理字符串是 curl/[version]</p>
<p>示例</p>
<ul>
<li><p><code>curl -A &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39; https://google.com</code></p>
</li>
<li><p><code>curl -A &#39;&#39; https://google.com</code></p>
<ul>
<li>移除 User-Agent 标头</li>
</ul>
</li>
<li><p>curl -H ‘User-Agent: php/1.0’ <a href="https://google.com/">https://google.com</a></p>
<ul>
<li>这里是用 -H 参数直接修改标头</li>
</ul>
</li>
</ul>
<h3 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h3><p>向服务器发送 Cookie</p>
<p>示例</p>
<ul>
<li><code>curl -b &#39;foo=bar&#39; https://google.com</code></li>
<li><code>curl -b &#39;foo1=bar&#39; -b &#39;foo2=baz&#39; https://google.com</code></li>
<li><code>curl -b cookies.txt https://www.google.com</code></li>
</ul>
<h3 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h3><p>将服务器设置的 Cookie 写入一个文件</p>
<p>示例 <code>curl -c cookies.txt https://www.google.com</code></p>
<h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p>发送 POST 请求的数据体</p>
<p>作用</p>
<ul>
<li>HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。</li>
<li>自动将请求转为 POST 方法，因此可以省略 -X POST。</li>
</ul>
<p>示例</p>
<ul>
<li><code>curl -d&#39;login=emma＆password=123&#39;-X POST https://google.com/login</code></li>
<li><code>curl -d &#39;login=emma&#39; -d &#39;password=123&#39; -X POST  https://google.com/login</code></li>
<li><code>curl -d &#39;@data.txt&#39; https://google.com/login</code></li>
</ul>
<h3 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a>–data-urlencode</h3><p>发送 POST 请求的数据体，同时自动将发送的数据进行 URL 编码。</p>
<p>示例 <code>curl --data-urlencode &#39;comment=hello world&#39; https://google.com/login</code></p>
<h3 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h3><p>设置 HTTP 的标头 Referer，表示请求的来源。</p>
<p>示例</p>
<ul>
<li><p><code>curl -e &#39;https://google.com?q=example&#39; https://www.example.com</code></p>
</li>
<li><p><code>curl -H &#39;Referer: https://google.com?q=example&#39; https://www.example.com</code></p>
<ul>
<li>这里是用 <strong>-H</strong> 参数直接修改标头</li>
</ul>
</li>
</ul>
<h3 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h3><p>向服务器上传二进制文件</p>
<p>作用</p>
<ul>
<li>给 HTTP 请求加上标头Content-Type: multipart/form-data</li>
<li>将文件作为 file 字段上传</li>
</ul>
<p>示例</p>
<ul>
<li><p><code>curl -F &#39;file=@photo.png&#39; https://google.com/profile</code></p>
</li>
<li><p>指定 MIME 类型</p>
<ul>
<li><code>curl -F &#39;file=@photo.png;type=image/png&#39; https://google.com/profile</code></li>
<li>不指定的话，默认为 <code>application/octet-stream</code></li>
</ul>
</li>
<li><p>指定文件名</p>
<ul>
<li><code>curl -F &#39;file=@photo.png;filename=me.png&#39; https://google.com/profile</code></li>
</ul>
</li>
</ul>
<h3 id="G"><a href="#G" class="headerlink" title="-G"></a>-G</h3><p>构造 URL 的查询字符串</p>
<p>示例</p>
<ul>
<li><p><code>curl -G -d &#39;q=kitties&#39; -d &#39;count=20&#39; https://google.com/search</code></p>
<ul>
<li>这里会发出一个 GET 请求，实际请求的 URL 为 <code>https://google.com/search?q=kitties&amp;count=20</code></li>
<li>如果省略 <strong>-G</strong>，会发出一个 <strong>POST</strong> 请求。</li>
</ul>
</li>
<li><p><code>curl -G --data-urlencode &#39;comment=hello world&#39; https://www.example.com</code></p>
<ul>
<li>对 URL 进行编码</li>
</ul>
</li>
</ul>
<h3 id="H"><a href="#H" class="headerlink" title="-H"></a>-H</h3><p>添加 HTTP 请求的标头</p>
<p>示例</p>
<ul>
<li><p><code>curl -H &#39;Accept-Language: en-US&#39; https://google.com</code></p>
</li>
<li><p><code>curl -H &#39;Accept-Language: en-US&#39; -H &#39;Secret-Message: xyzzy&#39; https://google.com</code></p>
</li>
<li><p><code>curl -d &#39;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#39; -H &#39;Content-Type: application/json&#39; https://google.com/login</code></p>
<ul>
<li><strong>-H</strong> 指定标头 <code>Content-Type: application/json</code></li>
<li><strong>-d</strong> 发送 <strong>JSON</strong> 数据</li>
</ul>
</li>
</ul>
<h3 id="i"><a href="#i" class="headerlink" title="-i"></a>-i</h3><p>打印出服务器回应的 HTTP 标头及网页源码</p>
<p>示例 <code>curl -i https://www.example.com</code></p>
<h3 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h3><p>向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来</p>
<p>示例 <code>curl -I https://www.example.com</code>，等同于 –head 参数</p>
<h3 id="k"><a href="#k" class="headerlink" title="-k"></a>-k</h3><p>指定跳过 SSL 证书检测</p>
<p>示例 <code>curl -k https://www.example.com</code></p>
<h3 id="L"><a href="#L" class="headerlink" title="-L"></a>-L</h3><p>让 HTTP 请求跟随服务器的重定向（默认不跟随）</p>
<p>示例 <code>curl -L -d &#39;tweet=hi&#39; https://api.twitter.com/tweet</code></p>
<h3 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a>–limit-rate</h3><p>限制 HTTP 请求和回应的带宽，模拟慢网速的环境</p>
<p>示例 <code>curl --limit-rate 200k https://google.com</code></p>
<h3 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h3><p>将服务器的回应保存成文件，等同于 wget 命令</p>
<p>示例 <code>curl -o example.html https://www.example.com</code></p>
<h3 id="O"><a href="#O" class="headerlink" title="-O"></a>-O</h3><p>将服务器回应保存成文件，并将 URL 的最后部分当作文件名</p>
<p>示例 <code>curl -O https://www.example.com/foo/bar.html</code></p>
<h3 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h3><p>不输出错误和进度信息</p>
<p>示例</p>
<ul>
<li><p><code>curl -s https://www.example.com</code></p>
</li>
<li><p>不产生任何输出</p>
<ul>
<li><code>curl -s -o /dev/null https://google.com</code></li>
</ul>
</li>
</ul>
<h3 id="S"><a href="#S" class="headerlink" title="-S"></a>-S</h3><p>指定只输出错误信息，通常与 <strong>-o</strong> 一起使用</p>
<p>示例 <code>curl -S -o /dev/null https://google.com</code></p>
<h3 id="u"><a href="#u" class="headerlink" title="-u"></a>-u</h3><p>设置服务器认证的用户名和密码</p>
<p>示例</p>
<ul>
<li><p><code>curl -u &#39;bob:12345&#39; https://google.com/login</code></p>
<ul>
<li>设置用户名为 bob，密码为 12345</li>
<li>并将其转为 <strong>HTTP</strong> 标头 <code>Authorization: Basic Ym9iOjEyMzQ1</code></li>
</ul>
</li>
<li><p><code>curl https://bob:12345@google.com/login</code></p>
<ul>
<li>识别 URL 中的用户名和密码</li>
</ul>
</li>
<li><p><code>curl -u &#39;bob&#39; https://google.com/login</code></p>
<ul>
<li>只设置了用户名，执行后，curl 会提示用户输入密码</li>
</ul>
</li>
</ul>
<h3 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h3><p>输出通信的整个过程，用于调试</p>
<p>示例</p>
<ul>
<li><p><code>curl -v https://www.example.com</code></p>
</li>
<li><p><code>curl --trace - https://www.example.com</code></p>
<ul>
<li><strong>–trace</strong> 参数也可以用于调试，还会输出原始的二进制数据。</li>
</ul>
</li>
</ul>
<h3 id="x"><a href="#x" class="headerlink" title="-x"></a>-x</h3><p>指定 HTTP 请求的代理</p>
<p>示例</p>
<ul>
<li><p><code>curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></p>
<ul>
<li>指定 HTTP 请求通过 <code>myproxy.com:8080</code> 的 socks5 代理发出</li>
</ul>
</li>
<li><p><code>curl -x james:cats@myproxy.com:8080 https://www.example.com</code></p>
<ul>
<li>没有指定代理协议，默认为 <strong>HTTP</strong></li>
</ul>
</li>
</ul>
<h3 id="X"><a href="#X" class="headerlink" title="-X"></a>-X</h3><p>指定 HTTP 请求的方法</p>
<p>示例 <code>curl -X POST https://www.example.com</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync 的基本使用入门</title>
    <url>/post/1236124429.html</url>
    <content><![CDATA[<p><strong>rsync</strong> 是 Unix / Linux 系统下一个快速、灵活的的文件同步和复制工具，，支持本地复制和远程复制与同步，基于协议  <a href="https://rsync.samba.org/GPL.html">GNU General Public License</a> 开源 。rsync 工具广泛用于备份和镜像，且作为一种改进的复制命令。</p>
<p>官网：<a href="https://rsync.samba.org/">https://rsync.samba.org</a></p>
<p>最新稳定版本：<a href="https://download.samba.org/pub/rsync/src/rsync-3.1.2-NEWS">v3.1.2</a> (更新于 2015年12月21日)</p>
<span id="more"></span>

<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>特性：</p>
<ul>
<li>可以镜像保存整个目录树和文件系统。</li>
<li>可以很容易做到保持原来文件的权限、时间、软硬链接等。</li>
<li>无须特殊权限即可运行。</li>
<li>快速：<ul>
<li>第一次同步时 rsync 会复制全部内容，但在下一次只传输修改过的文件。</li>
<li>rsync 在传输数据的过程中可以实行压缩及解压缩操作，因此可以使用更少的带宽。</li>
</ul>
</li>
<li>安全：可以使用 scp、ssh 等方式来传输文件，当然也可以通过直接的 socket 连接。</li>
<li>支持匿名传输，以方便进行网站镜象。</li>
</ul>
<h3 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2. 安装配置"></a>2. 安装配置</h3><blockquote>
<p>在类 Unix 环境下，rsync 都是默认安装的。</p>
</blockquote>
<p>检查是否安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync --version</span><br><span class="line">rsync  version 3.0.9  protocol version 30</span><br><span class="line">Copyright (C) 1996-2011 by Andrew Tridgell, Wayne Davison, and others.</span><br><span class="line">Web site: http://rsync.samba.org/</span><br><span class="line">Capabilities:</span><br><span class="line">    64-bit files, 64-bit inums, 64-bit timestamps, 64-bit long ints,</span><br><span class="line">    socketpairs, hardlinks, symlinks, IPv6, batchfiles, inplace,</span><br><span class="line">    append, ACLs, xattrs, iconv, symtimes</span><br><span class="line"></span><br><span class="line">rsync comes with ABSOLUTELY NO WARRANTY.  This is free software, and you</span><br><span class="line">are welcome to redistribute it under certain conditions.  See the GNU</span><br><span class="line">General Public Licence <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure>

<p>如果提示未找到命令，则通过如下命令进一步检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">$ rpm -qa | grep rsync</span><br><span class="line">rsync-3.0.9-17.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">$ dpkg -l | grep rsync</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">$ yum install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">$ sudo apt-get install rsync</span><br></pre></td></tr></table></figure>

<h3 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3. 客户端使用"></a>3. 客户端使用</h3><h4 id="3-1-基本格式"><a href="#3-1-基本格式" class="headerlink" title="3.1. 基本格式"></a>3.1. 基本格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync [options] <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中 source / destination 可以是<strong>本地</strong>，也可以是<strong>远程</strong>，文件传输方向为从 source 到 destination。</p>
<ul>
<li><p>如果是远程的话，需要追加参数登录用户名、远程服务器地址、位置，格式如：username@ip:path</p>
</li>
<li><p>如果具体到目录下的文件名，则可以只同步单个文件。</p>
</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地目录 project1 下的文件同步到另一台机器上对应的目录</span></span><br><span class="line">$ rsync -avz ~/www/project1/ dev@192.168.1.149:/Home/dev/www/project1</span><br></pre></td></tr></table></figure>
<p>选项：</p>
<ul>
<li><code>-a</code> 保留符号链接、权限信息、时间戳，以及 owner &amp; group 信息。</li>
<li><code>-v</code> 显示更多打印信息。</li>
<li><code>-z</code> 打开压缩功能。</li>
</ul>
<h4 id="3-2-其它常用选项"><a href="#3-2-其它常用选项" class="headerlink" title="3.2. 其它常用选项"></a>3.2. 其它常用选项</h4><ul>
<li><p><code>-P</code> 或 <code>--progress</code></p>
<blockquote>
<p>查看传输进度。</p>
</blockquote>
</li>
<li><p><code>-i</code></p>
<blockquote>
<p>查看 source / destination 之间的差异。</p>
</blockquote>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/</span><br><span class="line">Password:</span><br><span class="line">receiving file list ... <span class="keyword">done</span></span><br><span class="line">&gt;f.st.... Basenames</span><br><span class="line">.f....og. Dirnames</span><br><span class="line"></span><br><span class="line">sent 48 bytes  received 2182544 bytes  291012.27 bytes/sec</span><br><span class="line">total size is 45305958  speedup is 20.76</span><br></pre></td></tr></table></figure>

<p>  说明：</p>
<ul>
<li>f 标识是一个文件</li>
<li>s 标识文件大小发生了变化</li>
<li>t 标识时间戳发生了变化</li>
<li>o 标识文件属主 owner 发了变化</li>
<li>g 标识文件属组 group 发了变化</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>-d</code></p>
<blockquote>
<p>只同步目录树结构，不同步文件。</p>
</blockquote>
</li>
<li><p><code>--delete</code></p>
<blockquote>
<p>存在于目标位置的文件，如果源位置不存在则删除。</p>
</blockquote>
</li>
<li><p><code>--existing</code></p>
<blockquote>
<p>只同步在目标位置已经存在的文件，源位置如果有新增的文件，在目标位置不创建。</p>
</blockquote>
</li>
<li><p><code>-e &#39;ssh -p 10010&#39;</code></p>
<blockquote>
<p>指定远程 shell 来保证安全连接。</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>-u</code></p>
<blockquote>
<p>不覆盖在目标位置被修改过的文件。</p>
</blockquote>
</li>
<li><p><code>--include &#39;*.html&#39; --exclude &#39;*.conf&#39;</code></p>
<blockquote>
<p>包含文件，包含多条使用 <code>--include-from=include.list</code></p>
<p>排除文件，排除多条使用 <code>--exclude-from=exclude.list</code></p>
<p>在文件 exclude.list 或 include.list 中，每行指定一个要包含或排除的文件、目录，使用 <strong>/</strong> 标识源路径。</p>
</blockquote>
<p>  比如下面的 exclude.list 文件内容：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php</span><br><span class="line">/Application/Common/Conf/</span><br><span class="line">/Application/Runtime/</span><br><span class="line">/Uploads</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p><code>--max-size=&#39;100K&#39;</code></p>
<blockquote>
<p>限制传输的文件大小，可用单位 K / M / G 等。</p>
</blockquote>
</li>
<li><p><code>-W</code></p>
<blockquote>
<p>传输整个源位置（source）的文件</p>
</blockquote>
<p>  该选项不再对 <strong>source</strong> 和 <strong>destination</strong> 做差异比较，直接传输整个文件，将大大提高 rsync 的处理速度。</p>
<p>  注意：</p>
<blockquote>
<p>此选项适合网络带宽不是问题的场景，如果你的网络带宽不理想，尤其是有丢包现象的，还是推荐默认的增量更新方式，避免使用此选项。</p>
</blockquote>
</li>
</ul>
<h4 id="3-3-同步远程服务器时免登录密码"><a href="#3-3-同步远程服务器时免登录密码" class="headerlink" title="3.3. 同步远程服务器时免登录密码"></a>3.3. 同步远程服务器时免登录密码</h4><p>生成本机公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>将公钥拷贝到远程服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub -p 10010 <span class="built_in">test</span>@192.168.1.149</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line"><span class="built_in">test</span>@192.168.1.149<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh -p &#x27;</span>10010<span class="string">&#x27; &#x27;</span><span class="built_in">test</span>@192.168.1.149<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure>

<p>检查远程服务器是否添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ~/.ssh/authorized_keys</span><br><span class="line">ssh-rsa AAAAB3xxxxxxxxxxxxxxxxx0xuysQjs6bcmGvIsGJZS8J/gouy9AjjfaQqsYLBdHo5bXGTMN3fQ1TntSluB4lfINtzCYf4+VP55WLEzMNTeJnHtVBQen6yNYckcxxxxxxxxxxxxxxxxxG+IAxVS/ugI9kfiOrltxZKn5VUE4hRqwqLIeu9CMhFrPNtTNCLQuqI8FQRz+MixZjFPdsY0OrzxxxxxxxxxxxxxxxxxQeIK/BPOxwolg5xNO29sEw8p5T7al6VxxxxxxxxxxxxxxxxxuLZ8jkv/uMqmyXxxxxxxxxxxxxxxxxxwfMJT4UfdOzr root@localhost.localdomain</span><br></pre></td></tr></table></figure>

<p>上面的秘钥信息就是我本机对应的公钥，再次执行 rsync 命令就不需要输入登录密码了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 基础版配置</title>
    <url>/post/2674273786.html</url>
    <content><![CDATA[<blockquote>
<p>本文只介绍一些最常用的基础配置，以改进 <strong>vim</strong> 的初始状态。</p>
<p>更多高级配置，可以自行搜索、完善。</p>
</blockquote>
<span id="more"></span>

<p>拷贝以下内容到 <code>~/.vimrc</code> 文件中，没有此文件请自行创建。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">&quot; Author: whoru.S.Q &lt;whoru@sqiang.net&gt;</span></span><br><span class="line"><span class="comment">&quot; Link: https://github.com/whorusq/linux-learning/blob/master/vim/.vimrc</span></span><br><span class="line"><span class="comment">&quot; Version: 0.2</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>基本设置<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 去掉vi一致性模式，避免以前版本的一些bug和局限</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">highlight</span> LineNr cterm=bold ctermfg=darkgray</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示光标所在行号、列号</span></span><br><span class="line"><span class="comment">&quot;set ruler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 粘贴带格式</span></span><br><span class="line"><span class="keyword">set</span> paste</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 高亮当前行</span></span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="comment">&quot;hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white</span></span><br><span class="line"><span class="comment">&quot;hi CursorLine cterm=NONE ctermbg=230 ctermfg=NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 高亮当前列</span></span><br><span class="line"><span class="comment">&quot;set cursorcolumn</span></span><br><span class="line"><span class="comment">&quot;hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white</span></span><br><span class="line"><span class="comment">&quot;hi CursorColumn cterm=NONE ctermbg=237 ctermfg=NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; history 文件中需要记录的行数</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 去掉输入错误的提示声音</span></span><br><span class="line"><span class="comment">&quot;set noeb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 在处理未保存或只读文件的时候，弹出确认</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">confirm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 带有如下符号的单词不要被换行分割</span></span><br><span class="line"><span class="keyword">set</span> iskeyword+=_,$,@,%,#,-</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示 Tab 键、行尾符</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span> <span class="keyword">lcs</span>=<span class="keyword">ta</span><span class="variable">b:</span>&gt;-,trai<span class="variable">l:</span>-</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 不要换行</span></span><br><span class="line"><span class="comment">&quot;set nowrap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 禁止生成临时文件</span></span><br><span class="line"><span class="keyword">set</span> nobackup</span><br><span class="line"><span class="keyword">set</span> noswapfile</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置当文件被改动时自动载入</span></span><br><span class="line"><span class="keyword">set</span> autoread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>搜索和匹配设置<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 搜索高亮</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="keyword">hi</span> Search cterm=NONE ctermfg=darkred ctermbg=yellow cterm=<span class="built_in">reverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 搜索时忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 在查找时输入字符过程中就高亮显示匹配点，然后回车跳到该匹配点。</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置查找到文件尾部后折返开头或查找到开头后折返尾部。</span></span><br><span class="line"><span class="keyword">set</span> wrapscan</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 不要高亮被搜索的句子（phrases）</span></span><br><span class="line"><span class="comment">&quot;set nohlsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 匹配括号高亮的时间（单位是十分之一秒）</span></span><br><span class="line"><span class="keyword">set</span> matchtime=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>文本操作设置<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 统一缩进为 4 制表符</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 智能对齐</span></span><br><span class="line"><span class="keyword">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 用空格代替制表符</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 继承前一行的缩进方式，特别适用于多行注释</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 使用 C 样式的缩进</span></span><br><span class="line"><span class="comment">&quot;set cindent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 文件编码</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,gb2312,usc-bom,cp936,euc-<span class="keyword">cn</span></span><br><span class="line"><span class="keyword">set</span> termencoding=utf-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>底部状态条设置<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span>                                          <span class="comment">&quot; 长久显示1</span></span><br><span class="line"><span class="keyword">set</span> statusline=</span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">7</span>*\[%n]                                  <span class="comment">&quot; buffernr</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">1</span>*\ %&lt;%F\                                <span class="comment">&quot; 文件路径</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">2</span>*\ %<span class="keyword">y</span>\                                  <span class="comment">&quot; 文件类型</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">3</span>*\ %&#123;<span class="string">&#x27;&#x27;</span>.(&amp;fenc!=<span class="string">&#x27;&#x27;</span>?&amp;fenc:&amp;enc).<span class="string">&#x27;&#x27;</span>&#125;      <span class="comment">&quot; 编码1</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">3</span>*\ %&#123;(&amp;bomb?\<span class="string">&quot;,BOM\&quot;:\&quot;\&quot;)&#125;\            &quot;</span> 编码<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">4</span>*\ %&#123;&amp;ff&#125;\                              <span class="comment">&quot; 文件系统(dos/unix..)</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">5</span>*\ %&#123;&amp;spelllang&#125;\%&#123;HighlightSearch()&#125;\  <span class="comment">&quot; 语言 &amp; 是否高亮，H表示高亮?</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">8</span>*\ %=\ ro<span class="variable">w:</span>%<span class="keyword">l</span>/%L\ (%<span class="number">03</span><span class="keyword">p</span>%%)\             <span class="comment">&quot; 光标所在行号/总行数 (百分比)</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">9</span>*\ <span class="keyword">co</span><span class="variable">l:</span>%<span class="number">03</span><span class="keyword">c</span>\                            <span class="comment">&quot; 光标所在列</span></span><br><span class="line"><span class="keyword">set</span> statusline+=%<span class="number">0</span>*\ \ %<span class="keyword">m</span>%r%<span class="keyword">w</span>\ %<span class="keyword">P</span>\ \                      <span class="comment">&quot; Modified? Read only? Top/bottom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">HighlightSearch</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> &amp;hls</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;H&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">hi</span> User1 ctermfg=white  ctermbg=darkred</span><br><span class="line"><span class="keyword">hi</span> User2 ctermfg=blue  ctermbg=<span class="number">58</span></span><br><span class="line"><span class="keyword">hi</span> User3 ctermfg=white  ctermbg=<span class="number">100</span></span><br><span class="line"><span class="keyword">hi</span> User4 ctermfg=darkred  ctermbg=<span class="number">95</span></span><br><span class="line"><span class="keyword">hi</span> User5 ctermfg=darkred  ctermbg=<span class="number">77</span></span><br><span class="line"><span class="keyword">hi</span> User7 ctermfg=darkred  ctermbg=<span class="number">138</span>  cterm=bold</span><br><span class="line"><span class="keyword">hi</span> User8 ctermfg=<span class="number">231</span>  ctermbg=darkgray</span><br><span class="line"><span class="comment">&quot;hi User9 ctermfg=#ffffff  ctermbg=#810085</span></span><br><span class="line"><span class="keyword">hi</span> User0 ctermfg=yellow  ctermbg=<span class="number">138</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span>其它<span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 用空格键来开关折叠</span></span><br><span class="line"><span class="comment">&quot;set foldenable</span></span><br><span class="line"><span class="comment">&quot;set foldmethod=manual</span></span><br><span class="line"><span class="comment">&quot;nnoremap &lt;space&gt; @=((foldclosed(line(&#x27;.&#x27;)) &lt; 0) ? &#x27;zc&#x27;:&#x27;zo&#x27;)&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
        <tag>.vimrc</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux 基本配置及使用</title>
    <url>/post/2551733328.html</url>
    <content><![CDATA[<p>Tmux 就是会话与窗口的“解绑”工具：</p>
<ol>
<li><p>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p>
</li>
<li><p>它可以让新窗口”接入”已经存在的会话。</p>
</li>
<li><p>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p>
</li>
<li><p>它还支持窗口任意的垂直和水平拆分。</p>
</li>
</ol>
<p>类似的终端复用器还有 <em>GNU Screen</em>。Tmux 与它功能相似，但是更易用，也更强大。</p>
<p>本文只介绍基本配置和使用，关于 tmux 的更多内容，可参考：</p>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程</a></li>
<li><a href="http://louiszhai.github.io/2017/09/30/tmux/">Tmux使用手册</a></li>
</ul>
<span id="more"></span>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>将以下内容拷贝到 <code>~/.tmux.conf</code> 文件中，没有此文件的请自行创建。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># Author: whoru.S.Q &lt;whoru@sqiang.net&gt;</span><br><span class="line"># Link: http<span class="variable">s:</span>//github.<span class="keyword">com</span>/whorusq/linux-learning/blob/master/tmux/.tmux.<span class="keyword">conf</span></span><br><span class="line"># Version: <span class="number">0.2</span></span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line"># ---------- 基本设置 ----------</span><br><span class="line"><span class="keyword">set</span> -g default-terminal <span class="string">&quot;screen-256color&quot;</span></span><br><span class="line"><span class="keyword">set</span> -g <span class="keyword">display</span>-time <span class="number">3000</span></span><br><span class="line"><span class="keyword">set</span> -g <span class="built_in">escape</span>-time <span class="number">0</span></span><br><span class="line"><span class="keyword">set</span> -g <span class="keyword">history</span>-limit <span class="number">65535</span></span><br><span class="line"><span class="keyword">set</span> -g base-<span class="built_in">index</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> -g pane-base-<span class="built_in">index</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># ---------- 按键绑定 ----------</span><br><span class="line"></span><br><span class="line"># 更改前缀键未 ctrl <span class="keyword">a</span></span><br><span class="line">unbind ^<span class="keyword">b</span></span><br><span class="line"><span class="keyword">set</span> -g prefix ^<span class="keyword">a</span></span><br><span class="line">bind <span class="keyword">a</span> send-prefix</span><br><span class="line"></span><br><span class="line"># 重新加载配置文件 - prefix r</span><br><span class="line">bind r <span class="keyword">source</span> ~/.tmux.<span class="keyword">conf</span> \; <span class="keyword">display</span> <span class="string">&quot;==&gt; 配置文件重新加载成功！&quot;</span></span><br><span class="line"></span><br><span class="line"># 拆分窗格</span><br><span class="line">unbind <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">bind - splitw -v # 垂直拆分 - prefix -</span><br><span class="line">unbind %</span><br><span class="line">bind \\ splitw -h # 水平拆分 - prefix \</span><br><span class="line"></span><br><span class="line"># 新窗格默认 <span class="keyword">shell</span> 位置设置为当前目录</span><br><span class="line">bind <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">split</span>-window -<span class="keyword">c</span> <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span></span><br><span class="line">bind <span class="string">&#x27;%&#x27;</span> <span class="keyword">split</span>-window -h -<span class="keyword">c</span> <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"># 窗格切换 - prefix h/<span class="keyword">j</span>/<span class="keyword">k</span>/<span class="keyword">l</span></span><br><span class="line">bind h select-pane -L # 左边窗格</span><br><span class="line">bind <span class="keyword">j</span> select-pane -D # 上边窗格</span><br><span class="line">bind <span class="keyword">k</span> select-pane -U # 下边窗格</span><br><span class="line">bind <span class="keyword">l</span> select-pane -R # 右边窗格</span><br><span class="line"></span><br><span class="line"># 调整窗格大小 - prefix H/J/K/L</span><br><span class="line">bind L <span class="keyword">resize</span>-pane -L <span class="number">10</span>  # 向左扩展</span><br><span class="line">bind R <span class="keyword">resize</span>-pane -R <span class="number">10</span>  # 向右扩展</span><br><span class="line">bind K <span class="keyword">resize</span>-pane -U <span class="number">5</span>   # 向上扩展</span><br><span class="line">bind J <span class="keyword">resize</span>-pane -D <span class="number">5</span>   # 向下扩展</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------- 显示 ----------</span><br><span class="line"></span><br><span class="line">setw -g automatic-<span class="built_in">rename</span> <span class="keyword">on</span> # <span class="built_in">rename</span> window <span class="keyword">to</span> reflect current program</span><br><span class="line"><span class="keyword">set</span> -g renumber-windows <span class="keyword">on</span>  # renumber windows when <span class="keyword">a</span> window <span class="keyword">is</span> closed</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> -g <span class="keyword">set</span>-titles <span class="keyword">on</span>                        # <span class="keyword">set</span> terminal title</span><br><span class="line">#set -g <span class="keyword">set</span>-titles-<span class="built_in">string</span> <span class="string">&#x27;#h ❐ #S ● #I #W&#x27;</span></span><br><span class="line"><span class="keyword">set</span> -g <span class="keyword">set</span>-titles-<span class="built_in">string</span> <span class="string">&#x27;❐ #S ● #I&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> -g status-interval <span class="number">10</span>     # <span class="keyword">redraw</span> status <span class="built_in">line</span> every <span class="number">10</span> seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 状态栏</span><br><span class="line"># 颜色</span><br><span class="line"><span class="keyword">set</span> -g status-bg black</span><br><span class="line"><span class="keyword">set</span> -g status-fg white</span><br><span class="line"># 对齐方式</span><br><span class="line"><span class="keyword">set</span>-option -g status-justify centre</span><br><span class="line"># 左下角</span><br><span class="line"><span class="keyword">set</span>-option -g status-<span class="keyword">left</span> <span class="string">&#x27;#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]&#x27;</span></span><br><span class="line"><span class="keyword">set</span>-option -g status-<span class="keyword">left</span>-length <span class="number">20</span></span><br><span class="line"># 窗口列表</span><br><span class="line">setw -g automatic-<span class="built_in">rename</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span>-window-option -g window-status-format <span class="string">&#x27;#[dim]#I:#[default]#W#[fg=grey,dim]&#x27;</span></span><br><span class="line"><span class="keyword">set</span>-window-option -g window-status-current-format <span class="string">&#x27;#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]&#x27;</span></span><br><span class="line"># 右下角</span><br><span class="line"><span class="keyword">set</span> -g status-<span class="keyword">right</span> <span class="string">&#x27;#[fg=green][#[fg=cyan]%Y-%m-%d#[fg=green]]&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>终端输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">tmux -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line">tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">ctrl + a &amp;</span><br></pre></td></tr></table></figure>

<p>添加了上面的配置文件后，可使用如下快捷键：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl + a -</td>
<td>上下分屏</td>
</tr>
<tr>
<td>ctrl + a \</td>
<td>左右分屏</td>
</tr>
<tr>
<td>ctrl + a h</td>
<td>定位到 左 边的分屏</td>
</tr>
<tr>
<td>ctrl + a j</td>
<td>定位到 上 边的分屏</td>
</tr>
<tr>
<td>ctrl + a k</td>
<td>定位到 下 边的分屏</td>
</tr>
<tr>
<td>ctrl + a l</td>
<td>定位到 右 边的分屏</td>
</tr>
<tr>
<td>ctrl + a H</td>
<td>增加 左 边分屏的宽度</td>
</tr>
<tr>
<td>ctrl + a J</td>
<td>增加 上 边分屏的宽度</td>
</tr>
<tr>
<td>ctrl + a K</td>
<td>增加 下 边分屏的宽度</td>
</tr>
<tr>
<td>ctrl + a L</td>
<td>增加 右 边分屏的宽度</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 常用操作命令</title>
    <url>/post/2824845466.html</url>
    <content><![CDATA[<center>
<img data-src="https://static.sqiang.net/image%2Fpost%2Fvim%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.svg" width="95%">
</center>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>zip分卷压缩命令</title>
    <url>/post/4078650632.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -s 切分大小，可选 k、m、g、t</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -x 忽略文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r 递归目录</span></span><br><span class="line">➜  ~ zip -s 100m -x &quot;*.DS_Store&quot; -r split-foo.zip foo/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切分已有 zip 文件</span></span><br><span class="line">➜  ~ zip existing.zip --out new.zip -s 50m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s 0 合并</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --out 指定输出文件名</span></span><br><span class="line">➜  ~ zip -s 0 split.zip --out single.zip</span><br><span class="line">unzip single.zip</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CentOS6.x 源码编译安装 LNMP 环境</title>
    <url>/post/3800214565.html</url>
    <content><![CDATA[<blockquote>
<p>这是之前在学习、工作过程中整理的笔记，完整的记录了以源码方式编译、配置 LNMP 环境的步骤，虽然也小范围用于生产环境的服务构建，但建议只把它拿来学习用，因为有些细节和优化项并不完善。</p>
<p>生产环境，强烈建议使用以下两个相对成熟、稳定的脚本工具：</p>
<ul>
<li><a href="https://oneinstack.com/">https://oneinstack.com</a></li>
<li><a href="https://lnmp.org/">https://lnmp.org</a></li>
</ul>
</blockquote>
<span id="more"></span>

<h3 id="1-准备篇"><a href="#1-准备篇" class="headerlink" title="1. 准备篇"></a>1. 准备篇</h3><h4 id="1-1-推荐目录结构"><a href="#1-1-推荐目录结构" class="headerlink" title="1.1. 推荐目录结构"></a>1.1. 推荐目录结构</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  mkdir -p /lnmp/server /lnmp/www /lnmp/<span class="built_in">log</span>/mysql /lnmp/<span class="built_in">log</span>/nginx /lnmp/<span class="built_in">log</span>/php</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注：完整的服务配置好后的目录结构类似如下</span></span><br><span class="line">/lnmp/</span><br><span class="line">├── <span class="built_in">log</span></span><br><span class="line">│   ├── mysql</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   └── php</span><br><span class="line">├── server</span><br><span class="line">│   ├── mysql -&gt; /lnmp/server/mysql-5.x.xx</span><br><span class="line">│   ├── mysql-5.x.xx</span><br><span class="line">│   ├── nginx -&gt; /lnmp/server/nginx-1.4.4</span><br><span class="line">│   ├── nginx-1.4.4</span><br><span class="line">│   ├── php -&gt; /lnmp/server/php-5.x.xx</span><br><span class="line">│   └── php-5.x.xx</span><br><span class="line">├── info.log</span><br><span class="line">└── www</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  chown -R www:www /lnmp/<span class="built_in">log</span></span><br><span class="line">➜  chmod -R 755 /lnmp/<span class="built_in">log</span></span><br><span class="line">➜  chown -R www:www /lnmp/www</span><br><span class="line">➜  chmod -R 755 /lnmp/www</span><br></pre></td></tr></table></figure>

<h4 id="1-2-下载源码包"><a href="#1-2-下载源码包" class="headerlink" title="1.2. 下载源码包"></a>1.2. 下载源码包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源码包下载存放目录</span></span><br><span class="line">➜  mkdir -p /root/src &amp;&amp; <span class="built_in">cd</span> /root/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它版本及备用下载地址参见附录</span></span><br><span class="line">➜  wget http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.50-linux2.6-x86_64.tar.gz</span><br><span class="line">➜  wget http://nginx.org/download/nginx-1.6.3.tar.gz</span><br><span class="line">➜  wget http://cn2.php.net/distributions/php-5.5.36.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="1-3-防火墙开放80-3306端口"><a href="#1-3-防火墙开放80-3306端口" class="headerlink" title="1.3. 防火墙开放80/3306端口"></a>1.3. 防火墙开放80/3306端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前防火墙状态</span></span><br><span class="line">➜  /etc/init.d/iptables status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑防火墙配置文件</span></span><br><span class="line">➜  vim /etc/sysconfig/iptables</span><br><span class="line">.....</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT     &lt;------- 开放80</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT   &lt;------- 开放3306</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">➜  /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure>

<h4 id="1-4-关闭-SELinux"><a href="#1-4-关闭-SELinux" class="headerlink" title="1.4. 关闭 SELinux"></a>1.4. 关闭 SELinux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于 Linux 新手，建议直接关闭，以免出现不知所然的问题</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">➜  shutdown -r now</span><br></pre></td></tr></table></figure>

<h4 id="1-5-安装编译时所需依赖"><a href="#1-5-安装编译时所需依赖" class="headerlink" title="1.5. 安装编译时所需依赖"></a>1.5. 安装编译时所需依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure>

<h3 id="2-安装-MySQL"><a href="#2-安装-MySQL" class="headerlink" title="2. 安装 MySQL"></a>2. 安装 MySQL</h3><h4 id="2-1-创建用户"><a href="#2-1-创建用户" class="headerlink" title="2.1. 创建用户"></a>2.1. 创建用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  groupadd mysql</span><br><span class="line">➜  useradd -s /sbin/nologin -g mysql -M mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以只使用下面这一条命令替代</span></span><br><span class="line">➜  useradd mysql -s /sbin/nologin -M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否创建成功</span></span><br><span class="line">➜  tail -1 /etc/passwd</span><br><span class="line">mysql:x:501:501::/home/mysql:/sbin/nologin</span><br><span class="line">➜  id mysql</span><br><span class="line">uid=501(mysql) gid=501(mysql) groups=501(mysql)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-解压、配置"><a href="#2-2-解压、配置" class="headerlink" title="2.2. 解压、配置"></a>2.2. 解压、配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /root/src</span><br><span class="line">➜  tar -zxvf mysql-5.5.50-linux2.6-x86_64.tar.gz</span><br><span class="line">➜  mv mysql-5.5.50-linux2.6-x86_64 /lnmp/server/mysql-5.5.50 &amp;&amp; <span class="built_in">cd</span> /lnmp/server</span><br><span class="line">➜  ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立具体版本的软连接</span></span><br><span class="line">➜  ln -s /lnmp/server/mysql-5.5.50/ mysql</span><br><span class="line">➜  ls -l</span><br><span class="line">➜  <span class="built_in">cd</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有配置样例</span></span><br><span class="line">➜  ls -l support-files/*.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 /bin/cp 直接覆盖重名文件，不提示</span></span><br><span class="line">➜  /bin/cp support-files/my-large.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<h4 id="2-3-初始化数据"><a href="#2-3-初始化数据" class="headerlink" title="2.3. 初始化数据"></a>2.3. 初始化数据</h4><p> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个单独的目录，存放物理数据文件</span></span><br><span class="line">➜  mkdir -p /data/mysql</span><br><span class="line">➜  chown -R mysql:mysql /data/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行初始化脚本</span></span><br><span class="line">➜  ./scripts/mysql_install_db --basedir=/lnmp/server/mysql --datadir=/data/mysql --user=mysql</span><br><span class="line">...</span><br><span class="line">Installing MySQL system tables...</span><br><span class="line">160529 18:23:19 [Note] /lnmp/server/mysql/bin/mysqld (mysqld 5.5.50) starting as process 33182 ...</span><br><span class="line">OK</span><br><span class="line">Filling <span class="built_in">help</span> tables...</span><br><span class="line">160529 18:23:20 [Note] /lnmp/server/mysql/bin/mysqld (mysqld 5.5.50) starting as process 33189 ...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place <span class="keyword">for</span> your system</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如上出现两个 OK，则表示初始化成功；否则失败，需解决初始化错误。</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-修改设置并启动服务"><a href="#2-4-修改设置并启动服务" class="headerlink" title="2.4. 修改设置并启动服务"></a>2.4. 修改设置并启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  cp ./support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">➜  chmod 755 /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换二进制包的默认MySQL安装路径</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;s#/usr/local/mysql#/lnmp/server/mysql#g&#x27;</span> /lnmp/server/mysql/bin/mysqld_safe /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 basedir 和 datadir</span></span><br><span class="line">➜  vim /etc/init.d/mysqld</span><br><span class="line">basedir=/lnmp/server/mysql</span><br><span class="line">datadir=/data/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">➜  /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL... SUCCESS!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 3306 是否启动：</span></span><br><span class="line">➜  netstat -tlunp|grep mysql</span><br><span class="line">tcp        0      0 0.0.0.0:3306     0.0.0.0:*      LISTEN      33457/mysqld</span><br></pre></td></tr></table></figure>

<h4 id="2-5-设置开机自启动"><a href="#2-5-设置开机自启动" class="headerlink" title="2.5. 设置开机自启动"></a>2.5. 设置开机自启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  chkconfig --add mysqld</span><br><span class="line">➜  chkconfig mysqld on</span><br><span class="line">➜  chkconfig --list|grep mysqld</span><br><span class="line">mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure>

<h4 id="2-6-配置MySQL命令全局使用"><a href="#2-6-配置MySQL命令全局使用" class="headerlink" title="2.6. 配置MySQL命令全局使用"></a>2.6. 配置MySQL命令全局使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/lnmp/server/mysql/bin:$PATH&#x27;</span> &gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查写入文件</span></span><br><span class="line">➜  tail -1 /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/lnmp/server/mysql/bin:<span class="variable">$PATH</span></span><br><span class="line">➜  <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查最终设置结果</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/lnmp/server/mysql/bin:/usr/<span class="built_in">local</span>/bin:/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/sbin:/home/whoru/bin</span><br></pre></td></tr></table></figure>

<h4 id="2-7-登录测试，更改默认管理员密码"><a href="#2-7-登录测试，更改默认管理员密码" class="headerlink" title="2.7. 登录测试，更改默认管理员密码"></a>2.7. 登录测试，更改默认管理员密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 mysql 可以直接登录，安装好后默认密码为空</span></span><br><span class="line">➜  mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">.....</span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;quit;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 root 默认的空密码</span></span><br><span class="line">➜  mysqladmin -u root password <span class="string">&#x27;whoru123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新连接测试</span></span><br><span class="line">➜  mysql</span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: NO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须使用用户名和密码登录</span></span><br><span class="line">➜  mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">.....</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-8-清理没有用的用户及库"><a href="#2-8-清理没有用的用户及库" class="headerlink" title="2.8. 清理没有用的用户及库"></a>2.8. 清理没有用的用户及库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| user | host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | 127.0.0.1 |</span><br><span class="line">| root | ::1       |</span><br><span class="line">|      | localhost |</span><br><span class="line">| root | localhost |</span><br><span class="line">|      | web1      |</span><br><span class="line">| root | web1      |</span><br><span class="line">+------+-----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop user <span class="string">&quot;root&quot;</span>@<span class="string">&quot;::1&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop user <span class="string">&quot;&quot;</span>@<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop user <span class="string">&quot;&quot;</span>@<span class="string">&quot;web1&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop user <span class="string">&quot;root&quot;</span>@<span class="string">&quot;web1&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| user | host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | 127.0.0.1 |</span><br><span class="line">| root | localhost |</span><br><span class="line">+------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="3-安装-Nginx"><a href="#3-安装-Nginx" class="headerlink" title="3. 安装 Nginx"></a>3. 安装 Nginx</h3><h4 id="3-1-安装依赖包"><a href="#3-1-安装依赖包" class="headerlink" title="3.1. 安装依赖包"></a>3.1. 安装依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查所依赖的包是否已经安装</span></span><br><span class="line"><span class="comment"># 其中 pcre 用于 nginx 的 rewrite 模块</span></span><br><span class="line">➜  rpm -qa pcre* openssl* zlib*</span><br><span class="line">zlib-1.2.3-29.el6.x86_64</span><br><span class="line">openssl-1.0.1e-48.el6_8.1.x86_64</span><br><span class="line">pcre-7.8-7.el6.x86_64</span><br><span class="line"></span><br><span class="line">➜  yum -y install pcre-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure>

<h4 id="3-2-添加用户"><a href="#3-2-添加用户" class="headerlink" title="3.2. 添加用户"></a>3.2. 添加用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  useradd www -s /sbin/nologin -M</span><br></pre></td></tr></table></figure>

<h4 id="3-3-安装"><a href="#3-3-安装" class="headerlink" title="3.3. 安装"></a>3.3. 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /root/src</span><br><span class="line">➜  tar -zxvf nginx-1.6.3.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.6.3</span><br><span class="line">➜  ./configure \</span><br><span class="line">--prefix=/lnmp/server/nginx-1.6.3 \</span><br><span class="line">--error-log-path=/lnmp/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">--http-log-path=/lnmp/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-pcre</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br><span class="line">➜  <span class="built_in">cd</span> /lnmp/server</span><br><span class="line">➜  ln -s /lnmp/server/nginx-1.6.3/ nginx</span><br><span class="line">➜  ls -l</span><br></pre></td></tr></table></figure>

<p>提示：编译安装过程中可以使用命令 <code># echo $?</code> 检 <code>configure</code> / <code>make</code> 的执行结果，<code>0</code> 表示成功.</p>
<h4 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4. 启动"></a>3.4. 启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件语法</span></span><br><span class="line">➜  /lnmp/server/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /lnmp/server/nginx-1.6.3//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /lnmp/server/nginx-1.6.3//conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">➜  /lnmp/server/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">➜  lsof -i :80</span><br><span class="line">COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   38366  root    6u  IPv4  93417      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   38367 nginx    6u  IPv4  93417      0t0  TCP *:http (LISTEN)</span><br><span class="line">➜  netstat -tlunp|grep 80</span><br><span class="line">tcp        0      0 0.0.0.0:80    0.0.0.0:*        LISTEN      38366/nginx</span><br><span class="line">➜  wget 127.0.0.1</span><br><span class="line">➜  curl 127.0.0.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：当浏览器无法访问时，尝试修改 SELinux、iptables</p>
</blockquote>
<h4 id="3-5-添加快捷启动脚本"><a href="#3-5-添加快捷启动脚本" class="headerlink" title="3.5. 添加快捷启动脚本"></a>3.5. 添加快捷启动脚本</h4><p>，之后可以通过 service nginx xxx 方式控制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件内容见附件 nginx.sh</span></span><br><span class="line">➜  vim /etc/init.d/nginx</span><br><span class="line">➜  chmod 755 /etc/init.d/nginx</span><br><span class="line">➜  service nginx</span><br><span class="line">Usage: /etc/init.d/nginx &#123;start|stop|reload|restart|configtest&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件检查</span></span><br><span class="line">➜  service nginx configtest</span><br><span class="line">nginx: the configuration file /lnmp/server/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /lnmp/server/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">➜  service nginx start</span><br><span class="line">Starting Nginx:                                            [  OK  ]</span><br></pre></td></tr></table></figure>

<h4 id="3-6-设置开机自启动"><a href="#3-6-设置开机自启动" class="headerlink" title="3.6. 设置开机自启动"></a>3.6. 设置开机自启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  chkconfig --add nginx</span><br><span class="line">➜  chkconfig nginx on</span><br><span class="line">➜  chkconfig --list|grep nginx</span><br><span class="line">nginx          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure>

<h3 id="4-安装-PHP"><a href="#4-安装-PHP" class="headerlink" title="4. 安装 PHP"></a>4. 安装 PHP</h3><h4 id="4-1-检查-MySQL、Nginx是否正常"><a href="#4-1-检查-MySQL、Nginx是否正常" class="headerlink" title="4.1. 检查 MySQL、Nginx是否正常"></a>4.1. 检查 MySQL、Nginx是否正常</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  netstat -tlunp</span><br></pre></td></tr></table></figure>

<h4 id="4-2-检查安装-PHP-所需的-lib-库"><a href="#4-2-检查安装-PHP-所需的-lib-库" class="headerlink" title="4.2. 检查安装 PHP 所需的 lib 库"></a>4.2. 检查安装 PHP 所需的 lib 库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  rpm -qa zlib-devel libxm2-devel libjpeg-turbo-devel libpng-devel gd-devel libcurl-devel libxslt-devel freetype-devel</span><br><span class="line">zlib-devel-1.2.3-29.el6.x86_64</span><br><span class="line">➜  yum -y install zlib-devel libxm2-devel libjpeg-turbo-devel libpng-devel gd-devel libcurl-devel libxslt-devel freetype-devel</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：默认 yum 源没有 <code>libiconv-devel</code> 这个包，需要按照下面的步骤单独编译安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /root/src</span><br><span class="line">➜  wget http://ftp.gnu.org/gnu/libiconv/libiconv-1.14.tar.gz</span><br><span class="line">➜  tar -zxvf libiconv-1.14.tar.gz &amp;&amp; <span class="built_in">cd</span> libiconv-1.14</span><br><span class="line">➜  ./configure --prefix=/usr/<span class="built_in">local</span>/libiconv</span><br><span class="line">➜  make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其它额外库</span></span><br><span class="line">➜  wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">➜  yum -y install libmcrypt-devel mhash mcrypt</span><br></pre></td></tr></table></figure>

<h4 id="4-3-安装"><a href="#4-3-安装" class="headerlink" title="4.3. 安装"></a>4.3. 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /root/src</span><br><span class="line">➜  tar zxvf php-5.5.36.tar.gz &amp;&amp; <span class="built_in">cd</span> php-5.5.36</span><br><span class="line">➜  ./configure \</span><br><span class="line">--prefix=/lnmp/server/php5.5.36 \</span><br><span class="line">--with-config-file-path=/lnmp/server/php5.5.36/etc \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=www \</span><br><span class="line">--with-fpm-group=www \</span><br><span class="line">--with-mysql=mysqlnd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--enable-exif \</span><br><span class="line">--with-gd \</span><br><span class="line">--enable-gd-native-ttf \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-iconv-dir=/usr/<span class="built_in">local</span>/libiconv \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-pcntl  \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-curl \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--enable-zip \</span><br><span class="line">--with-pear</span><br><span class="line"></span><br><span class="line">➜  ln -s /lnmp/server/php5.5.36/ /lnmp/server/php</span><br><span class="line">➜  ll php.ini*</span><br><span class="line">-rw-r--r-- 1 1001 1001 69236 5月  25 17:36 php.ini-development   &lt;------- 开发模式，更多开启日志、调试信息</span><br><span class="line">-rw-r--r-- 1 1001 1001 69266 5月  25 17:36 php.ini-production    &lt;------- 生产模式</span><br><span class="line">➜  cp php.ini-production /lnmp/server/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<h4 id="4-4-配置-PHP-服务（php-fpm-方式）"><a href="#4-4-配置-PHP-服务（php-fpm-方式）" class="headerlink" title="4.4. 配置 PHP 服务（php-fpm 方式）"></a>4.4. 配置 PHP 服务（php-fpm 方式）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /lnmp/server/php/etc/</span><br><span class="line">➜  ls</span><br><span class="line">pear.conf  php-fpm.conf.default</span><br><span class="line">➜  cp php-fpm.conf.default php-fpm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 php-fmp 服务</span></span><br><span class="line">➜  /lnmp/server/php/sbin/php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 php-fpm 启动进程</span></span><br><span class="line">➜  ps -ef|grep php-fpm</span><br><span class="line">root       2270      1  0 00:39 ?        00:00:00 php-fpm: master process (/lnmp/server/php5.5.36/etc/php-fpm.conf)</span><br><span class="line">www        2271   2270  0 00:39 ?        00:00:00 php-fpm: pool www</span><br><span class="line">www        2272   2270  0 00:39 ?        00:00:00 php-fpm: pool www</span><br><span class="line">root       2274   2227  0 00:39 pts/0    00:00:00 grep php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 php-fpm 默认端口</span></span><br><span class="line">➜  lsof -i :9000</span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">php-fpm 2270 root    7u  IPv4  12844      0t0  TCP localhost:cslistener (LISTEN)</span><br><span class="line">php-fpm 2271  www    0u  IPv4  12844      0t0  TCP localhost:cslistener (LISTEN)</span><br><span class="line">php-fpm 2272  www    0u  IPv4  12844      0t0  TCP localhost:cslistener (LISTEN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 php-fpm 启动脚本</span></span><br><span class="line">➜  vim /etc/init.d/php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 php-fpm.sh 中的内容进去</span></span><br><span class="line">➜  chmod 755 /etc/init.d/php-fpm</span><br><span class="line">➜  service php-fpm start|stop|restart|reload|configtest</span><br></pre></td></tr></table></figure>

<h4 id="4-5-配置-Nginx-支持-PHP-程序请求访问"><a href="#4-5-配置-Nginx-支持-PHP-程序请求访问" class="headerlink" title="4.5. 配置 Nginx 支持 PHP 程序请求访问"></a>4.5. 配置 Nginx 支持 PHP 程序请求访问</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>   /lnmp/www/;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-附录（软件下载连接）"><a href="#5-附录（软件下载连接）" class="headerlink" title="5. 附录（软件下载连接）"></a>5. 附录（软件下载连接）</h3><h4 id="5-1-MySQL"><a href="#5-1-MySQL" class="headerlink" title="5.1. MySQL"></a>5.1. MySQL</h4><ul>
<li>5.1：<ul>
<li><a href="http://dev.mysql.com/get/Downloads/MySQL-5.1/mysql-5.1.73-linux-x86_64-glibc23.tar.gz">http://dev.mysql.com/get/Downloads/MySQL-5.1/mysql-5.1.73-linux-x86_64-glibc23.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/mysql/MySQL-5.1/mysql-5.1.73-linux-x86_64-glibc23.tar.gz">http://mirrors.sohu.com/mysql/MySQL-5.1/mysql-5.1.73-linux-x86_64-glibc23.tar.gz</a></li>
</ul>
</li>
<li>5.5：<ul>
<li><a href="http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.50-linux2.6-x86_64.tar.gz">http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.50-linux2.6-x86_64.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/mysql/MySQL-5.5/mysql-5.5.50-linux2.6-x86_64.tar.gz">http://mirrors.sohu.com/mysql/MySQL-5.5/mysql-5.5.50-linux2.6-x86_64.tar.gz</a></li>
</ul>
</li>
<li>5.6：<ul>
<li><a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz">http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz">http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz</a></li>
</ul>
</li>
</ul>
<h4 id="5-2-Nginx"><a href="#5-2-Nginx" class="headerlink" title="5.2. Nginx"></a>5.2. Nginx</h4><ul>
<li>1.4.x<ul>
<li><a href="http://nginx.org/download/nginx-1.4.7.tar.gz">http://nginx.org/download/nginx-1.4.7.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/nginx/nginx-1.4.7.tar.gz">http://mirrors.sohu.com/nginx/nginx-1.4.7.tar.gz</a></li>
</ul>
</li>
<li>1.6.x<ul>
<li><a href="http://nginx.org/download/nginx-1.6.3.tar.gz">http://nginx.org/download/nginx-1.6.3.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/nginx/nginx-1.6.3.tar.gz">http://mirrors.sohu.com/nginx/nginx-1.6.3.tar.gz</a></li>
</ul>
</li>
<li>1.8.x<ul>
<li><a href="http://nginx.org/download/nginx-1.8.1.tar.gz">http://nginx.org/download/nginx-1.8.1.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/nginx/nginx-1.8.1.tar.gz">http://mirrors.sohu.com/nginx/nginx-1.8.1.tar.gz</a></li>
</ul>
</li>
</ul>
<h4 id="5-3-PHP"><a href="#5-3-PHP" class="headerlink" title="5.3. PHP"></a>5.3. PHP</h4><ul>
<li>5.4.x<ul>
<li><a href="http://cn2.php.net/distributions/php-5.4.45.tar.gz">http://cn2.php.net/distributions/php-5.4.45.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/php/php-5.4.45.tar.gz">http://mirrors.sohu.com/php/php-5.4.45.tar.gz</a></li>
</ul>
</li>
<li>5.5.x<ul>
<li><a href="http://cn2.php.net/distributions/php-5.5.36.tar.gz">http://cn2.php.net/distributions/php-5.5.36.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/php/php-5.5.36.tar.xz">http://mirrors.sohu.com/php/php-5.5.36.tar.xz</a></li>
</ul>
</li>
<li>5.6.x<ul>
<li><a href="http://cn2.php.net/distributions/php-5.6.22.tar.gz">http://cn2.php.net/distributions/php-5.6.22.tar.gz</a></li>
<li><a href="http://mirrors.sohu.com/php/php-5.6.22.tar.gz">http://mirrors.sohu.com/php/php-5.6.22.tar.gz</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Linux</tag>
        <tag>LNMP</tag>
        <tag>Nginx</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何设置 oh-my-zsh 主题 agnoster</title>
    <url>/post/218213306.html</url>
    <content><![CDATA[<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><center>
<img data-src="https://static.sqiang.net/image/post/oh-my-zsh_agnoster.png" width="95%">
</center>

<p><img data-src=""></p>
<blockquote>
<p>⚠️ 注意：本文是以 zsh + iTerm 为基础进行说明，与此环境不一致的可参照本文根据具体环境进行修改。</p>
</blockquote>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-安装主题需要的-powerline-字体文件"><a href="#1-安装主题需要的-powerline-字体文件" class="headerlink" title="1. 安装主题需要的 powerline 字体文件"></a>1. 安装主题需要的 powerline 字体文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> ~</span><br><span class="line">➜  git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line">➜  <span class="built_in">cd</span> fonts</span><br><span class="line">➜  ./install.sh</span><br><span class="line">➜  <span class="built_in">cd</span> ..</span><br><span class="line">➜  rm -rf fonts</span><br></pre></td></tr></table></figure>

<p>详细说明，<a href="https://github.com/powerline/fonts">点击这里</a>。</p>
<h4 id="2-修改-zsh-配置"><a href="#2-修改-zsh-配置" class="headerlink" title="2. 修改 zsh 配置"></a>2. 修改 zsh 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改这里切换主题</span></span><br><span class="line"><span class="comment">#ZSH_THEME=&quot;robbyrussell&quot;</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># agnoster 主题设置</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="function"><span class="title">prompt_context</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> != <span class="string">&quot;<span class="variable">$DEFAULT_USER</span>&quot;</span> || -n <span class="string">&quot;<span class="variable">$SSH_CLIENT</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment">#prompt_segment black default &quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)$USER&quot;</span></span><br><span class="line">    prompt_segment black default <span class="string">&quot;%&#123;<span class="variable">$fg</span>[white]%&#125;&quot;</span></span><br><span class="line">    <span class="comment">#prompt_segment black default &quot;%&#123;$fg[yellow]%&#125;&quot;`date &#x27;+%T&#x27;`</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># agnoster 主题设置：隐藏当前用户</span></span><br><span class="line"><span class="comment">#prompt_context() &#123;</span></span><br><span class="line"><span class="comment">#  DEFAULT_USER=&quot;sunqiang&quot;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-修改-iTerm-设置"><a href="#3-修改-iTerm-设置" class="headerlink" title="3. 修改 iTerm 设置"></a>3. 修改 iTerm 设置</h4><p>修改如下图的设置，最后完全关闭并重新打开 iTerm 生效。</p>
<p><img data-src="https://oscimg.oschina.net/oscnet/bdf056fd7ad6f6d4fc9d4d701209ff162de.jpg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>oh-my-zsh</tag>
        <tag>aghoster</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Lodop 的单据单打印实例及连打的实现</title>
    <url>/post/486127644.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Lodop &amp; C-Lodop 是一款专业共享软件，公开版本未限制功能，多数用户可免费长期使用。</p>
<p>仅如下情况需要 <strong>注册收费</strong>：</p>
<ul>
<li>你希望用到（不经过弹出预览窗口的）「直接打印」功能时，如果不注册，该功能直接打印的纸张左下角会有“<em>本页由XXX试用版输出</em>”小字样水印。</li>
<li>另外，导出 Excel 文件或图片也需要注册。</li>
</ul>
<h3 id="2-相关资源"><a href="#2-相关资源" class="headerlink" title="2. 相关资源"></a>2. 相关资源</h3><ul>
<li>官网下载中心（程序+文档）：<a href="http://www.lodop.net/download.html">http://www.lodop.net/download.html</a></li>
<li>官方打印示例：<a href="http://www.lodop.net/demo.html">http://www.lodop.net/demo.html</a></li>
<li>常见问题列表：<a href="http://www.lodop.net/problem.html">http://www.lodop.net/problem.html</a></li>
</ul>
<span id="more"></span>

<h3 id="3-一个发运单打印的实例"><a href="#3-一个发运单打印的实例" class="headerlink" title="3. 一个发运单打印的实例"></a>3. 一个发运单打印的实例</h3><p>目录结构说明（源码地址：<a href="https://github.com/whorusq/web-printer-with-Lodop">https://github.com/whorusq/web-printer-with-Lodop</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── assets</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── layer-btn-cancel-hover.png</span><br><span class="line">│   │   ├── layer-btn-cancel.png</span><br><span class="line">│   │   ├── layer-btn-ok-hover.png</span><br><span class="line">│   │   ├── layer-btn-ok.png</span><br><span class="line">│   │   ├── layui-layer-title-close-hover.png</span><br><span class="line">│   │   ├── layui-layer-title-close.png</span><br><span class="line">│   │   └── layui-layer-title-info.png</span><br><span class="line">│   ├── jquery.min.js</span><br><span class="line">│   ├── jquery.tmpl.js     &lt;----- 一个简单的模块数据渲染插件</span><br><span class="line">│   ├── layer     &lt;----- 本示例使用 layer 处理消息弹窗</span><br><span class="line">│   │   ├── extend</span><br><span class="line">│   │   │   └── layer.ext.js</span><br><span class="line">│   │   ├── layer.js</span><br><span class="line">│   │   └── skin</span><br><span class="line">│   │       ├── default</span><br><span class="line">│   │       │   ├── icon-ext.png</span><br><span class="line">│   │       │   ├── icon.png</span><br><span class="line">│   │       │   ├── loading-0.gif</span><br><span class="line">│   │       │   ├── loading-1.gif</span><br><span class="line">│   │       │   └── loading-2.gif</span><br><span class="line">│   │       ├── layer.css</span><br><span class="line">│   │       └── layer.ext.css</span><br><span class="line">│   ├── lodop     &lt;----- 打印插件相关文件</span><br><span class="line">│   │   ├── CLodop_Setup_for_Win32NT.exe</span><br><span class="line">│   │   ├── LodopFuncs.js</span><br><span class="line">│   │   ├── install_lodop32.exe</span><br><span class="line">│   │   └── install_lodop64.exe</span><br><span class="line">│   └── my.js     &lt;----- 一些用到的公共函数：转换金额、时间，调用弹窗</span><br><span class="line">├── data.json     &lt;----- 模拟数据</span><br><span class="line">└── index.html     &lt;----- 示例页：打印控件的调用及打印样式设置等</span><br></pre></td></tr></table></figure>

<p>点击打印后，打印预览效果如下</p>
<p><img data-src="https://static.sqiang.net/image/post/lodop_screenhot.png" alt="预览图片）"></p>
<h3 id="4-关于连打"><a href="#4-关于连打" class="headerlink" title="4. 关于连打"></a>4. 关于连打</h3><h4 id="4-1-连打关键点"><a href="#4-1-连打关键点" class="headerlink" title="4.1. 连打关键点"></a>4.1. 连打关键点</h4><p>连打时主要是通过「针式打印机」，使用三联 <strong>n</strong> 等分（关于纸型的说明，详见附录：<a href="#5-2-%E7%BA%B8%E5%9E%8B%E8%AF%B4%E6%98%8E">5.2. 纸型说明</a>）的打印纸进行批量打印。</p>
<ol>
<li><p>通过 <strong>进纸调节器按钮</strong>，调整打印机的默认纸型。如果你的打印机没有这个类似的按钮，可询问客服具体调节方法。</p>
</li>
<li><p>调整打印模板，在程序里设置打印纸型</p>
</li>
</ol>
<h4 id="4-2-具体实现方法"><a href="#4-2-具体实现方法" class="headerlink" title="4.2. 具体实现方法"></a>4.2. 具体实现方法</h4><p>基于上述 Demo，主要作如下修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">…略…</span><br><span class="line"></span><br><span class="line">LODOP = getLodop();</span><br><span class="line">LODOP.PRINT_INITA(<span class="number">0</span>,<span class="number">10</span>,<span class="string">&quot;24.1cm&quot;</span>,<span class="string">&quot;13.9cm&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">LODOP.SET_PRINT_PAGESIZE(<span class="number">1</span>,<span class="string">&quot;24.1cm&quot;</span>,<span class="string">&quot;13.9cm&quot;</span>,<span class="string">&quot;CreateCustomPage&quot;</span>);</span><br><span class="line">LODOP.SET_PRINT_MODE(<span class="string">&quot;CREATE_CUSTOM_PAGE_NAME&quot;</span>,<span class="string">&quot;fyd_print_1&quot;</span>);</span><br><span class="line"><span class="comment">// LODOP.SET_PRINT_MODE(&quot;POS_BASEON_PAPER&quot;,true);</span></span><br><span class="line"><span class="comment">// LODOP.SET_PREVIEW_WINDOW(1,0,0,1000,600,&quot;&quot;); // 初始预览窗口大小</span></span><br><span class="line"><span class="comment">// LODOP.SET_SHOW_MODE(&quot;LANDSCAPE_DEFROTATED&quot;,1); // 横向打印时正向显示</span></span><br><span class="line">LODOP.SET_PRINT_MODE(<span class="string">&quot;AUTO_CLOSE_PREWINDOW&quot;</span>,<span class="number">1</span>); <span class="comment">// 打印后自动关闭预览</span></span><br><span class="line">LODOP.SET_PRINT_MODE(<span class="string">&quot;CUSTOM_TASK_NAME&quot;</span>,<span class="string">&quot;发运单打印&quot;</span>); <span class="comment">// 打印队列中的文档名</span></span><br><span class="line">LODOP.SET_SHOW_MODE(<span class="string">&quot;HIDE_PAPER_BOARD&quot;</span>,<span class="number">1</span>); <span class="comment">// 去除背景滚动线</span></span><br><span class="line"></span><br><span class="line">…略…</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：<strong>对于打印模板的调整，可使用 Lodop 打印设计功能，或一点点打印预览进行调节</strong>。</p>
<h3 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h3><h4 id="5-1-相关常见问题"><a href="#5-1-相关常见问题" class="headerlink" title="5.1. 相关常见问题"></a>5.1. 相关常见问题</h4><ul>
<li><a href="http://www.c-lodop.com/faq/pp9.html">如何避免Lodop本地配置影响</a></li>
<li><a href="http://www.c-lodop.com/faq/pp17.html">打印位置不同，偏移量问题</a></li>
</ul>
<h4 id="5-2-纸型说明"><a href="#5-2-纸型说明" class="headerlink" title="5.2. 纸型说明"></a>5.2. 纸型说明</h4><p><img data-src="https://static.sqiang.net/image/post/lodop_paper1.jpg" alt="预览图片）"></p>
<p><img data-src="https://static.sqiang.net/image/post/lodop_paper2.jpg" alt="预览图片）"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Lodop</tag>
      </tags>
  </entry>
  <entry>
    <title>在 CentOS7 下安装、配置 Redis 服务</title>
    <url>/post/2447614005.html</url>
    <content><![CDATA[<p>官网：<a href="https://redis.io/">https://redis.io</a></p>
<p>下载：<a href="https://redis.io/download">https://redis.io/download</a></p>
<span id="more"></span>

<h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum install -y gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure>

<h3 id="2-下载源码包"><a href="#2-下载源码包" class="headerlink" title="2. 下载源码包"></a>2. 下载源码包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐在这个目录存放各个软件的源码</span></span><br><span class="line">➜  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载指定版本</span></span><br><span class="line">➜  wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新稳定版</span></span><br><span class="line">➜  wget http://download.redis.io/redis-stable.tar.gz</span><br><span class="line"><span class="comment"># 查看源码具体版本</span></span><br><span class="line">➜  cat redis-stable/src/version.h</span><br></pre></td></tr></table></figure>

<h3 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  tar zxvf redis-5.0.5.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> redis-5.0.5</span><br><span class="line">➜  make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到指定目录下</span></span><br><span class="line">➜  make PREFIX=/usr/<span class="built_in">local</span>/redis-5.0.5 install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝默认配置文件到指定目录</span></span><br><span class="line">➜  mkdir /usr/<span class="built_in">local</span>/redis-5.0.5/etc</span><br><span class="line">➜  cp redis.conf /usr/<span class="built_in">local</span>/redis-5.0.5/etc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建程序软链接，以便后期版本升级</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">ln -s redis-5.0.5 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量，以便在全局使用 Redis 相关命令</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/local/redis/bin&quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">➜  <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">➜  redis-cli -v</span><br><span class="line">redis-cli 5.0.5</span><br></pre></td></tr></table></figure>

<h3 id="4-修改默认配置文件"><a href="#4-修改默认配置文件" class="headerlink" title="4. 修改默认配置文件"></a>4. 修改默认配置文件</h3><p>这里只是一些推荐的常用基本配置，详细的参见配置文件中对各个配置项的说明，或者参照这里 <a href="https://www.runoob.com/redis/redis-conf.html">https://www.runoob.com/redis/redis-conf.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为方便管理多个 Redis 服务，以版本号作为配置文件的名称后缀</span></span><br><span class="line">➜  mv redis.conf redis_6379.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编辑配置文件</span></span><br><span class="line">➜  vi redis_6379.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># 以下是常用配置项</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启守护进程（后台）方式运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程文件</span></span><br><span class="line">pidfile /var/redis/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只允许指定主机连接，默认不限制</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端闲置多长时间（单位：s）关闭连接</span></span><br><span class="line"><span class="comment"># 默认 0 ，无限制</span></span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地持久化数据文件名</span></span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">dir /var/redis/db/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line"><span class="comment"># - debug 适用于开发、测试，打印的信息较多</span></span><br><span class="line"><span class="comment"># - verbose 比 debug 简洁一些</span></span><br><span class="line"><span class="comment"># - notice 默认，普通的 verbose，用于生产环境</span></span><br><span class="line"><span class="comment"># - warning 警告和一些比较严重的信息</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="comment"># 默认为空字符串，表示标准输出（stdout）</span></span><br><span class="line"><span class="comment"># 如果以守护进程运行，并且此处采用标准输出，则日志发送给 /dev/null</span></span><br><span class="line">logfile /var/redis/<span class="built_in">log</span>/redis_6379.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端连接密码</span></span><br><span class="line"><span class="comment"># 为保证服务安全，建议开启并设置一个复杂的密码</span></span><br><span class="line">requirepass pwd2019</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># 保存上面修改好的配置文件</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置中不存在的目录</span></span><br><span class="line">➜  mkdir -p /var/redis/&#123;run,<span class="built_in">log</span>,db&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h3><p>基本启动方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以默认配置启动</span></span><br><span class="line">➜  redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置文件</span></span><br><span class="line">➜  redis-server /usr/<span class="built_in">local</span>/redis/etc/redis_6379.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看更多使用参数</span></span><br><span class="line">➜  redis-server -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端连接测试</span></span><br><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth pwd2019</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">➜</span><br></pre></td></tr></table></figure>

<p>使用脚本启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/redis-5.0.5/utils/</span><br><span class="line">➜  cp redis_init_script /etc/init.d/</span><br><span class="line">➜  <span class="built_in">cd</span> /etc/init.d/</span><br><span class="line">➜  mv redis_init_script redis_6379</span><br><span class="line">➜  vim redis_6379</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Simple Redis init.d script conceived to work on Linux systems</span></span><br><span class="line"><span class="comment"># as it does use of the /proc filesystem.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:     redis_6379</span></span><br><span class="line"><span class="comment"># Default-Start:        2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:         0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description:    Redis data structure server</span></span><br><span class="line"><span class="comment"># Description:          Redis data structure server. See https://redis.io</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际安装情况修改这里的路径、端口、连接密码</span></span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">REDISPWD=pwd2019</span><br><span class="line">EXEC=/usr/<span class="built_in">local</span>/redis/bin/redis-server</span><br><span class="line">CLIEXEC=/usr/<span class="built_in">local</span>/redis/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis_<span class="variable">$&#123;REDISPORT&#125;</span>.pid</span><br><span class="line">CONF=<span class="string">&quot;/usr/local/redis/etc/redis_<span class="variable">$&#123;REDISPORT&#125;</span>.conf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PIDFILE</span> exists, process is already running or crashed&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Starting Redis server...&quot;</span></span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PIDFILE</span> does not exist, process is not running&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Stopping ...&quot;</span></span><br><span class="line">                <span class="keyword">if</span> [ -n <span class="variable">$REDISPWD</span> ]; <span class="keyword">then</span></span><br><span class="line">                        <span class="variable">$CLIEXEC</span> -p <span class="variable">$REDISPORT</span> -a <span class="variable">$REDISPWD</span> shutdown</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="variable">$CLIEXEC</span> -p <span class="variable">$REDISPORT</span> shutdown</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">while</span> [ -x /proc/<span class="variable">$&#123;PID&#125;</span> ]</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Waiting for Redis to shutdown ...&quot;</span></span><br><span class="line">                    sleep 1</span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Redis stopped&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Please use start or stop as first argument&quot;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>使用脚本启动服务测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ./redis_6379 start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否启动成功</span></span><br><span class="line">➜  ps -ef | grep redis</span><br><span class="line">root     19262     1  0 01:42 ?        00:00:00 /usr/<span class="built_in">local</span>/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line">root     19267 19129  0 01:43 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端连接测试</span></span><br><span class="line">➜  redis-cli</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth pwd2019</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">➜</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">➜  ./redis_6379 stop</span><br></pre></td></tr></table></figure>

<h3 id="6-加入开机自启动"><a href="#6-加入开机自启动" class="headerlink" title="6. 加入开机自启动"></a>6. 加入开机自启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 root 用户操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到自启动列表</span></span><br><span class="line"><span class="comment"># 这里的 redis_6379 与 /etc/init.d/redis_6379 文件名保持一致</span></span><br><span class="line">➜  chkconfig --add redis_6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 2 3 4 5 级别设置为自启动</span></span><br><span class="line">➜  chkconfig --level 2345 redis_6379 on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否设置成功</span></span><br><span class="line">➜  chkconfig --list | grep redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启检查自启动是否生效</span></span><br><span class="line">➜  reboot</span><br></pre></td></tr></table></figure>

<p>在 CentOS7+ 建议使用 <code>systemctl</code> 命令对 Redis 服务进行统一管理，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">➜  systemctl status redis_6379</span><br><span class="line">● redis_6379.service - LSB: Redis data structure server</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/redis_6379; bad; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2019-11-11 02:21:03 UTC; 3s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 1042 ExecStop=/etc/rc.d/init.d/redis_6379 stop (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 1056 ExecStart=/etc/rc.d/init.d/redis_6379 start (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /system.slice/redis_6379.service</span><br><span class="line">           └─1058 /usr/<span class="built_in">local</span>/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost systemd[1]: Starting LSB: Redis data structure server...</span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost redis_6379[1056]: Starting Redis server...</span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost redis_6379[1056]: 1057:C 11 Nov 2019 02:21:03.594 <span class="comment"># oO0OoO0OoO0Oo Re...0Oo</span></span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost redis_6379[1056]: 1057:C 11 Nov 2019 02:21:03.594 <span class="comment"># Redis version=5....ted</span></span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost redis_6379[1056]: 1057:C 11 Nov 2019 02:21:03.594 <span class="comment"># Configuration loaded</span></span><br><span class="line">Nov 11 02:21:03 cnetos7-localhost systemd[1]: Started LSB: Redis data structure server.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">➜  systemctl start redis_6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">➜  systemctl stop redis_6379</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 的锚点链接如何写</title>
    <url>/post/2762528363.html</url>
    <content><![CDATA[<blockquote>
<p>HTML 形式的锚点链接在 Markdown 中并不能被很好的支持，尤其是以 Github 为代表的平台上，其实它有自己的规则，将在本文详细进行阐述。</p>
</blockquote>
<span id="more"></span>

<p>可把鼠标放到 Github 的标题上进行观察，如下图</p>
<p><img data-src="https://static.sqiang.net/image/post/markdown_anchor.png"></p>
<ol>
<li><p>任意 1-6 个 <strong>#</strong> 标注的标题都会被添加上同名的锚点链接</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[标题1](#标题1)</span><br><span class="line">[标题2](#标题2)</span><br><span class="line">[标题3](#标题3)</span><br><span class="line"></span><br><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br></pre></td></tr></table></figure></li>
<li><p>锚点跳转的标识名称，可使用任意字符，大写字母要转换成小写</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Github标题1](#github标题1)</span><br><span class="line"></span><br><span class="line">### Github标题1</span><br></pre></td></tr></table></figure></li>
<li><p>多单词锚点的空格用 <strong>-</strong> 代替</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Github 标题2 Test](#github-标题2-test)</span><br><span class="line"></span><br><span class="line">### Github 标题2 Test</span><br></pre></td></tr></table></figure></li>
<li><p>多级序号需要去除 <strong>.</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2.3. Github 标题](#23-github-标题)</span><br><span class="line"></span><br><span class="line">### 2.3. Github 标题</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>⚠️ 注意：</p>
<p>非英文的锚点字符，在单击跳转时，在浏览器的 url 中会按照规则进行 encode 和 decode</p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>文档编写工具</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基本语法</title>
    <url>/post/2023023504.html</url>
    <content><![CDATA[<blockquote>
<p>这里只是列举一些最基本、通用的 Markdown 语法，其它的一些高级用法，比如甘特图、流程图等，由于不能被广泛支持，所以不再说明，感兴趣的可以自己查一下。</p>
</blockquote>
<span id="more"></span>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote>
<p>⚠️ 注意：# 号后面必须紧跟一个空格</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表1</span><br><span class="line">2. 列表2</span><br><span class="line">3. 列表3</span><br></pre></td></tr></table></figure>

<h4 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 列表</span><br><span class="line">- 列表</span><br><span class="line">+ 列表</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 注意：</p>
<ul>
<li><p>符号要和文字之间加上一个字符的空格</p>
</li>
<li><p>避免错误的有序列表</p>
<pre><code> 1987\.2\.7 出生在xxx
</code></pre>
</li>
<li><p>列表中的引用</p>
<p>  引用一行的前面必须缩进，至少2个空格或1个 tab</p>
</li>
</ul>
</blockquote>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 这是引用的内容</span><br><span class="line"></span><br><span class="line">&gt;&gt; 这是引用中的引用（嵌套引用）</span><br><span class="line"></span><br><span class="line">&gt; 引用中也可以嵌套其它 Markdown 语法，比如标题、列表、区块等</span><br></pre></td></tr></table></figure>

<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*这是斜体文字*</span><br><span class="line">**这是粗体文字**</span><br></pre></td></tr></table></figure>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接描述](http://example.com)</span><br><span class="line">[链接描述](http://example.com &quot;标题属性&quot;)</span><br><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure>

<h4 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h4><p>相对地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![描述](example.jpg)</span><br><span class="line">![描述](folder name/example.jpg)</span><br></pre></td></tr></table></figure>

<p>绝对地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上传到第三方图床工具，比如：[七牛云]()</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="行间"><a href="#行间" class="headerlink" title="行间"></a>行间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`var param = 1;`</span><br></pre></td></tr></table></figure>

<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">` ``php</span><br><span class="line">function example() &#123;</span><br><span class="line">    echo &#x27;Hello World&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">` ``</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 注意：</p>
<ul>
<li>符号 ` 是键盘左上角（ESC下面）的“~”英文状态</li>
<li>代码块中，使用 tab 进行缩进</li>
</ul>
</blockquote>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 注意：第二行的 : 表示列内容对齐方式</p>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">星号</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">减号</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">下划线</span><br><span class="line">___</span><br></pre></td></tr></table></figure>


<h3 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [x] 已完成项目1</span><br><span class="line">    - [x] 已完成项目1-1</span><br><span class="line">    - [x] 已完成项目1-2</span><br><span class="line">- [x] 已完成项目2</span><br><span class="line">- [ ] 待办1</span><br><span class="line">- [ ] 待办2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>文档工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo最佳实践推荐</title>
    <url>/post/1938539149.html</url>
    <content><![CDATA[<blockquote>
<p>该实践其实是一个目录操作规范，以易于使用为最终目的，将需要个性化和经常会变动的目录或文件独立出来，借助简单的 Shell 脚本进行 Hexo 的初始化及 NexT 主题的升级。</p>
<p>说明：来源于个人使用过程中的总结，可能并不适合所有人，仅供参考。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-最终目录结构"><a href="#1-最终目录结构" class="headerlink" title="1. 最终目录结构"></a>1. 最终目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config_hexo.yml <span class="comment"># 软链接到 Hexo 配置文件</span></span><br><span class="line">├── config_next.yml <span class="comment"># 软链接到 NexT 主题配置文件</span></span><br><span class="line">├── core <span class="comment"># Hexo 根目录，可自定义</span></span><br><span class="line">│   ├── _config.yml -&gt; ../config_hexo.yml <span class="comment"># 个人修改后的配置文件</span></span><br><span class="line">│   ├── _config.yml.bak <span class="comment"># 原 Hexo 配置文件</span></span><br><span class="line">│   ├── db.json</span><br><span class="line">│   ├── node_modules</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── public</span><br><span class="line">│   ├── scaffolds</span><br><span class="line">│   ├── <span class="built_in">source</span> -&gt; ../source_hexo <span class="comment"># 个人变动后的资源目录</span></span><br><span class="line">│   ├── source_bak <span class="comment"># 原 Hexo 资源目录的备份</span></span><br><span class="line">│   └── themes</span><br><span class="line">│       ├── landscape <span class="comment"># Hexo 默认主题根目录</span></span><br><span class="line">│       └── next <span class="comment"># NexT 主题根目录</span></span><br><span class="line">│          ├── LICENSE.md</span><br><span class="line">│          ├── README.md</span><br><span class="line">│          ├── _config.yml -&gt; ../../../config_next.yml <span class="comment"># 个人修改后的配置文件</span></span><br><span class="line">│          ├── _config.yml.bak <span class="comment"># 原主题配置文件的备份</span></span><br><span class="line">│          ├── crowdin.yml</span><br><span class="line">│          ├── docs</span><br><span class="line">│          ├── gulpfile.js</span><br><span class="line">│          ├── languages</span><br><span class="line">│          ├── layout</span><br><span class="line">│          ├── package.json</span><br><span class="line">│          ├── scripts</span><br><span class="line">│          └── <span class="built_in">source</span> <span class="comment"># 主题下的资源目录</span></span><br><span class="line">├── deploy.sh <span class="comment"># 3. 同步远程服务器脚本</span></span><br><span class="line">├── init.sh <span class="comment"># 1. Hexo 初始化脚本</span></span><br><span class="line">├── source_hexo <span class="comment"># 软链接到 Hexo 下的资源目录</span></span><br><span class="line">├── source_next <span class="comment"># 需要添加到 NexT 下资源目录的文件放这里</span></span><br><span class="line">└── update_next.sh <span class="comment"># 2. NexT 主题升级脚本</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-在-Github-上我们需要建立两个仓库"><a href="#1-1-在-Github-上我们需要建立两个仓库" class="headerlink" title="1.1. 在 Github 上我们需要建立两个仓库"></a>1.1. 在 Github 上我们需要建立两个仓库</h4><ul>
<li><code>username/username.github.io</code> 对应 Hexo 部署的目标目录，在 Hexo 根目录下的配置文件中进行设置。</li>
<li><code>username/blog.xxx.com</code> 名字随意，对应上面的目录。其中 <code>core</code> 目录需要添加到 <code>.gitignore</code> 文件。</li>
</ul>
<h4 id="1-2-如何使用"><a href="#1-2-如何使用" class="headerlink" title="1.2. 如何使用"></a>1.2. 如何使用</h4><blockquote>
<p>⚠️ 说明：每次写文章只需要步骤 3 ~ 5，只有当切换到一个新的工作环境时，才需要执行完整的步骤 1 ～ 5。</p>
</blockquote>
<ol>
<li><p>从 Github 拉下来环境仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  git <span class="built_in">clone</span> https://github.com/username/blog.xxx.com.git</span><br></pre></td></tr></table></figure></li>
<li><p>初始化 Hexo 环境</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ⚠️ 前提：你已经安装好了 NodeJS 环境 和 hexo-cli</span></span><br><span class="line"><span class="comment"># 如果需要，可以自行修改 shell 文件</span></span><br><span class="line">➜  chmod u+x init.sh</span><br><span class="line">➜  ./init.sh</span><br></pre></td></tr></table></figure></li>
<li><p>进入 Hexo 根目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># core 的名字可以在脚本 init.sh 中修改</span></span><br><span class="line">➜  <span class="built_in">cd</span> core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一篇文章</span></span><br><span class="line">➜  hexo new post <span class="string">&quot;一篇新文章&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Hexo 发布部署</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure></li>
<li><p>将本次修改推送到仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先退回到 core 目录到上一级，即仓库根目录</span></span><br><span class="line">➜  git add .</span><br><span class="line">➜  git commit -m <span class="string">&quot;新增文章&quot;</span></span><br><span class="line">➜  git push</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-脚本文件"><a href="#2-脚本文件" class="headerlink" title="2. 脚本文件"></a>2. 脚本文件</h3><h4 id="init-sh"><a href="#init-sh" class="headerlink" title="init.sh"></a><code>init.sh</code></h4><p>当切换到一个新的工作环境时，使用该脚本初始化 Hexo 及基于原数据的工作环境，之后便可以继续写文章、发布了。</p>
<p>示例文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 Hexo</span></span><br><span class="line"><span class="comment"># 注意，这里并没有检查 NodeJS 环境 和 hexo-cli</span></span><br><span class="line"><span class="comment"># 如果需要，可自行扩展</span></span><br><span class="line">hexo init core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖，修改配置</span></span><br><span class="line"><span class="built_in">cd</span> core</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-filter-nofollow --save</span><br><span class="line">mv _config.yml _config.yml.bak</span><br><span class="line">ln -s ../config_hexo.yml _config.yml</span><br><span class="line">mv <span class="built_in">source</span> source_bak</span><br><span class="line">ln -s ../source_hexo <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装、配置主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">mv _config.yml _config.yml.bak</span><br><span class="line">ln -s ../../../config_next.yml _config.yml</span><br><span class="line">\cp -rp ../../../source_next/* <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<h4 id="update-next-sh"><a href="#update-next-sh" class="headerlink" title="update_next.sh"></a><code>update_next.sh</code></h4><p>当需要升级 NexT 主题时使用，示例文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还原本地修改</span></span><br><span class="line"><span class="built_in">cd</span> core/themes/next</span><br><span class="line">git checkout . &amp;&amp; git clean -xdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源码</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复修改</span></span><br><span class="line">mv _config.yml _config.yml.bak</span><br><span class="line">ln -s ../../../config_next.yml _config.yml</span><br><span class="line">\cp -rp ../../../source_next/* <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<h4 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a><code>deploy.sh</code></h4><p>该脚本非必须，只有需要将最终部署好的文件分发到不同服务器时才用得到。</p>
<p>同步方式推荐使用 <code>rsync</code> 命令，这里不再具体举例。关于该工具到使用，可以参阅：<a href="/post/1236124429.html">rsync 的基本使用入门</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加自定义404页面</title>
    <url>/post/2039108116.html</url>
    <content><![CDATA[<h5 id="1-创建自定义页面"><a href="#1-创建自定义页面" class="headerlink" title="1. 创建自定义页面"></a>1. 创建自定义页面</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  cd hexo_root_path &amp;&amp; hexo new page 404</span><br></pre></td></tr></table></figure>

<h5 id="2-修改-404-文件"><a href="#2-修改-404-文件" class="headerlink" title="2. 修改 404 文件"></a>2. 修改 404 文件</h5><p>打开 <code>source/404/index.md</code>，添加如下内容：</p>
<span id="more"></span>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;404&#x27;</span><br><span class="line">permalink: /404</span><br><span class="line">date: 2020-10-16 15:19:35</span><br><span class="line">comments: false</span><br><span class="line"><span class="section">layout: false</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;https://blog.sqiang.net&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;返回博客首页&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：这里是直接使用的<a href="https://www.qq.com/404/">腾讯公益404页面</a>，你也可以添加任意文字或 HTML 代码，只要保证头部 <code>---</code> 中间的设置与本文一致即可。</p>
</blockquote>
<h5 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

<h5 id="4-修改服务器设置"><a href="#4-修改服务器设置" class="headerlink" title="4. 修改服务器设置"></a>4. 修改服务器设置</h5><ul>
<li>Github Pages 不需要特殊处理</li>
</ul>
<ul>
<li><p>Nginx</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改或添加以下 404 页面配置</span></span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">404</span>   /<span class="number">404</span>.html;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-ok"><a href="#5-ok" class="headerlink" title="5. ok"></a>5. ok</h5>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Hexo 快速构建个人静态博客系统</title>
    <url>/post/525717070.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。</p>
<p>基于 <code>Markdown</code> 解析出文章内容，快速生成静态页面文件。</p>
<p>本文以当前博客为例，介绍 Hexo 如何快速建立一个静态博客，并部署在 <code>Github Pages</code> 上（如果是部署在 Gitee 或 Coding 上，可自行修改本文中不一样的地方）。</p>
<p>关于 Hexo 的更多信息，详见官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn</a></p>
<span id="more"></span>

<h3 id="1-Hexo"><a href="#1-Hexo" class="headerlink" title="1. Hexo"></a>1. Hexo</h3><h4 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h4><p>依赖：</p>
<ul>
<li>NodeJs <code>v10.0+</code><ul>
<li>这是官方建议，最小不低于 <code>v8.10</code></li>
<li>没有安装 NodeJs 环境，可以参见<a href="/post/3176262256.html">借助 nvm 安装、管理多个 NodeJS 版本</a></li>
</ul>
</li>
<li>Git</li>
</ul>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h4 id="1-2-初始化"><a href="#1-2-初始化" class="headerlink" title="1.2. 初始化"></a>1.2. 初始化</h4><p>新建一个目录，用于存放 Hexo 初始化之后的所有文件，之后安装主题、写文章、网站配置等都在这个目录下。</p>
<p>目录名称建议取博客地址，比如：<a href="xxxxx.github.io">xxxxx.github.io</a>（因为我的博客是部署在 Github Pages 上的，<code>xxxxx</code> 对应 Github 用户名，详见 <a href="#31-%E5%88%9B%E5%BB%BA-github-%E4%BB%93%E5%BA%93">3.1. 创建 Github 仓库</a>）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init xxxxx.github.io</span><br></pre></td></tr></table></figure>

<h4 id="1-3-个性配置"><a href="#1-3-个性配置" class="headerlink" title="1.3. 个性配置"></a>1.3. 个性配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入上一步初始化好的主目录</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<p>文件 <code>_config.yml</code> 对应整个站点的配置，Hexo 的详细配置参数说明<a href="https://hexo.io/zh-cn/docs/configuration">见官网</a>。</p>
<p>下面是部分主要配置的说明：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">whoru</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;学习、分享、交流、沉淀&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Talk is cheap, just do IT.&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">whoru.S.Q</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sqiang.net</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮设置</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页分页设置</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归档页分页设置</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客发布地址（对应 Github 上创建的 Pages 仓库）</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/whorusq/xxxxx.github.io.git</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-启动本地预览"><a href="#1-4-启动本地预览" class="headerlink" title="1.4. 启动本地预览"></a>1.4. 启动本地预览</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<h4 id="1-5-浏览器访问"><a href="#1-5-浏览器访问" class="headerlink" title="1.5. 浏览器访问"></a>1.5. 浏览器访问</h4><p>地址栏输入 <code>http://localhost:4000</code> 访问，如下图：</p>
<p><img data-src="https://static.sqiang.net/image/post/hexo_init.png"></p>
<h3 id="2-主题-NexT"><a href="#2-主题-NexT" class="headerlink" title="2. 主题 NexT"></a>2. 主题 NexT</h3><blockquote>
<p><code>NexT</code> 是 <code>Hexo</code> 下一个优雅且强大的主题，详见官网：<a href="https://theme-next.org/docs">https://theme-next.org/docs/</a></p>
</blockquote>
<h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1. 安装"></a>2.1. 安装</h4><h5 id="方式一：Git"><a href="#方式一：Git" class="headerlink" title="方式一：Git"></a>方式一：Git</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 进入初始化好的 Hexo 根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> whorusq.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 拉取 NexT 最新代码（默认分支 master）</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git tag -l</span><br><span class="line">...</span><br><span class="line">v7.5.0</span><br><span class="line">v7.6.0</span><br><span class="line">v7.7.0</span><br><span class="line">v7.7.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换主题到不同版本</span></span><br><span class="line">$ git checkout tags/v7.5.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切回最新的 master</span></span><br><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>

<h5 id="方式二：直接下载"><a href="#方式二：直接下载" class="headerlink" title="方式二：直接下载"></a>方式二：直接下载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 进入初始化好的 Hexo 根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> whorusq.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 手动创建主题目录</span></span><br><span class="line">$ mkdir themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 下载主题源码并解压</span></span><br><span class="line">$ curl -L https://api.github.com/repos/theme-next/hexo-theme-next/tarball | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure>

<h4 id="2-2-个性配置"><a href="#2-2-个性配置" class="headerlink" title="2.2. 个性配置"></a>2.2. 个性配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入主题目录</span></span><br><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：主题下的 <code>_config.yml</code> 文件是当前主题定制的配置项，涉及页面样式、单页面、菜单等具体展示层的东西，与 Hexo 根目录下的 <code>_config.yml</code> 功能和适用范围不同，要区别开。</p>
<p>详细的主题配置说明<a href="https://theme-next.org/docs/theme-settings">见官网</a>，下面是当前博客的一份示例配置，同样<strong>只摘取了部分配置，只用于举例说明各主要配置项</strong>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 页面底部设置</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章版权展示设置</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题的四种风格</span></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单设置</span></span><br><span class="line"><span class="comment"># 对应的单页需使用 hexo new page &quot;about&quot; 创建</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏设置</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏底部社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情连接</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章索引设置</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页展示「阅读全文」链接</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章尾部赞赏设置</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示相关文章</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签云样式</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="comment"># 是否开启多评论切换</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启本地搜索</span></span><br><span class="line"><span class="attr">local_search:</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-本地预览"><a href="#2-3-本地预览" class="headerlink" title="2.3. 本地预览"></a>2.3. 本地预览</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>启动后，地址栏再次输入 <code>http://localhost:4000</code> 访问。</p>
<h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布"></a>3. 发布</h3><h4 id="3-1-创建-Github-仓库"><a href="#3-1-创建-Github-仓库" class="headerlink" title="3.1. 创建 Github 仓库"></a>3.1. 创建 Github 仓库</h4><p>在 Github 创建一个新仓库，名称为 <code>xxxxx.github.io</code>，其中 <code>xxxxx</code> 是你的 Github 用户名。如果要开启 Pages 服务，则必须遵守这个规则。</p>
<p>创建好之后，浏览器直接输入 <code>xxxxx.github.io</code> 访问。</p>
<p>进入仓库设置，找到 <code>GitHub Pages</code> 部分，可自定义域名和开启 <code>HTTPS</code> 支持。</p>
<h4 id="3-2-安装插件"><a href="#3-2-安装插件" class="headerlink" title="3.2. 安装插件"></a>3.2. 安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="3-3-修改配置"><a href="#3-3-修改配置" class="headerlink" title="3.3. 修改配置"></a>3.3. 修改配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入根目录，打开 Hexo 全局配置文件</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<p>修改如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxxxx/xxxxx.github.io.git</span></span><br></pre></td></tr></table></figure>

<p>关于该该插件的更多详细配置，参见 <a href="https://github.com/hexojs/hexo-deployer-git">https://github.com/hexojs/hexo-deployer-git</a></p>
<h4 id="3-4-执行命令"><a href="#3-4-执行命令" class="headerlink" title="3.4. 执行命令"></a>3.4. 执行命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接执行这条命令（常用）</span></span><br><span class="line"><span class="comment"># 相当于为文章生成静态文件，然后部署到指定的仓库</span></span><br><span class="line"><span class="comment"># g ---&gt; generate</span></span><br><span class="line"><span class="comment"># d ---&gt; deploy</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<h4 id="3-5-浏览器访问"><a href="#3-5-浏览器访问" class="headerlink" title="3.5. 浏览器访问"></a>3.5. 浏览器访问</h4><p>输入地址：<code>https://xxxxx.github.io</code></p>
<h3 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h3><h4 id="4-1-Hexo-常用命令"><a href="#4-1-Hexo-常用命令" class="headerlink" title="4.1. Hexo 常用命令"></a>4.1. Hexo 常用命令</h4><p>完整的命令列表及说明参见官网<a href="https://hexo.io/zh-cn/docs/commands">指令</a>部分。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以指定目录初始化 Hexo，不指定到话则使用当前目录</span></span><br><span class="line">$ hexo init xxxxx.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建单页</span></span><br><span class="line">$ hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文章</span></span><br><span class="line">$ hexo new post <span class="string">&quot;一篇新文章的标题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地服务</span></span><br><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span></span><br><span class="line"><span class="comment"># 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，可能需要运行该命令。</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为文章生成静态文件</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为文章生成静态文件，然后部署到指定仓库</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<h4 id="4-2-推荐插件"><a href="#4-2-推荐插件" class="headerlink" title="4.2. 推荐插件"></a>4.2. 推荐插件</h4><h5 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h5><p>为每篇文章生成一个唯一 ID，详见<a href="https://github.com/Rozbo/hexo-abbrlink#readme">https://github.com/Rozbo/hexo-abbrlink#readme</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line">$ npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加 Hexo 配置</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释掉默认配置</span></span><br><span class="line"><span class="comment"># permalink: :year/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改、添加以下内容</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment"># 算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>     <span class="comment"># 进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<h5 id="hexo-filter-nofollow"><a href="#hexo-filter-nofollow" class="headerlink" title="hexo-filter-nofollow"></a>hexo-filter-nofollow</h5><p>为外链添加 <code>rel=&quot;external nofollow noreferrer&quot;</code>，详见<a href="https://github.com/hexojs/hexo-filter-nofollow">https://github.com/hexojs/hexo-filter-nofollow</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line">$ npm install hexo-filter-nofollow --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加 Hexo 配置</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加以下配置</span></span><br><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - &#x27;exclude1.com&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="hexo-generator-searchdb"><a href="#hexo-generator-searchdb" class="headerlink" title="hexo-generator-searchdb"></a>hexo-generator-searchdb</h5><p>开启 NexT 主题的本地搜索需要此插件，详见<a href="https://github.com/theme-next/hexo-generator-searchdb">https://github.com/theme-next/hexo-generator-searchdb</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 修改 NexT 主题配置</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io/themes/next/</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改如下部分</span></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a>hexo-generator-sitemap</h5><p>部署的时候自动生成 <code>sitemap.xml</code> 文件，便于爬虫抓取或手手动提交，插件的使用详见：</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a></li>
<li><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">https://github.com/coneycode/hexo-generator-baidu-sitemap</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加 NexT 主题配置</span></span><br><span class="line">$ <span class="built_in">cd</span> xxxxx.github.io/themes/next/</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加如下部分</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 注意：百度爬虫由于操作生猛，已经被 Github 屏蔽，所以部署在 Github Pages 上的网站无法被收录，需要借助其它平台的 Pages 服务，可自行搜索。</p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Excel 中实现下拉多选、反选</title>
    <url>/post/366405450.html</url>
    <content><![CDATA[<h4 id="操作步骤（视频）："><a href="#操作步骤（视频）：" class="headerlink" title="操作步骤（视频）："></a>操作步骤（视频）：</h4><center>
<img data-src="https://static.sqiang.net/image/post/excel_select_nulti.jpg" width="95%">
</center>

<span id="more"></span>

<h4 id="操作步骤（文字）："><a href="#操作步骤（文字）：" class="headerlink" title="操作步骤（文字）："></a>操作步骤（文字）：</h4><ol>
<li>选择一列；</li>
<li>依次点击：<code>数据 &gt; 数据验证</code></li>
<li>类型选择「<strong>列表</strong>」，然后输入待选择的下拉项：<code>PHP,Java,Python</code></li>
<li>在 「<strong>sheet</strong>」上右击，选择「<strong>查看代码</strong>」，添加如下处理多选逻辑的宏代码：</li>
</ol>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Worksheet_Change(<span class="keyword">ByVal</span> Target <span class="keyword">As</span> Range)</span><br><span class="line"><span class="comment">&#x27; Developed by Contextures Inc.</span></span><br><span class="line"><span class="comment">&#x27; www.contextures.com</span></span><br><span class="line"><span class="keyword">Dim</span> rngDV <span class="keyword">As</span> Range</span><br><span class="line"><span class="keyword">Dim</span> oldVal <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> newVal <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">If</span> Target.Count &gt; <span class="number">1</span> <span class="keyword">Then</span> <span class="keyword">GoTo</span> exitHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">Set</span> rngDV = Cells.SpecialCells(xlCellTypeAllValidation)</span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> exitHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> rngDV <span class="built_in">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span> <span class="keyword">GoTo</span> exitHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> Intersect(Target, rngDV) <span class="built_in">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></span><br><span class="line">   <span class="comment">&#x27;do nothing</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">  Application.EnableEvents = <span class="literal">False</span></span><br><span class="line">  newVal = Target.Value</span><br><span class="line">  Application.Undo</span><br><span class="line">  oldVal = Target.Value</span><br><span class="line">  Target.Value = newVal</span><br><span class="line">  <span class="keyword">If</span> Target.Column = <span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">    <span class="keyword">If</span> oldVal = <span class="string">&quot;&quot;</span> <span class="keyword">Then</span></span><br><span class="line">      <span class="comment">&#x27;do nothing</span></span><br><span class="line">      <span class="keyword">Else</span></span><br><span class="line">      <span class="keyword">If</span> newVal = <span class="string">&quot;&quot;</span> <span class="keyword">Then</span></span><br><span class="line">      <span class="comment">&#x27;do nothing</span></span><br><span class="line">      <span class="keyword">Else</span></span><br><span class="line">        <span class="keyword">If</span> InStr(<span class="number">1</span>, oldVal, newVal) &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">          <span class="keyword">If</span> InStr(<span class="number">1</span>, oldVal, newVal) + Len(newVal) - <span class="number">1</span> = Len(oldVal) <span class="keyword">Then</span></span><br><span class="line">            Target.Value = Left(oldVal, Len(oldVal) - Len(newVal) - <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">Else</span></span><br><span class="line">            Target.Value = Replace(oldVal, newVal &amp; <span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">          <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">        <span class="keyword">Else</span></span><br><span class="line">        Target.Value = oldVal &amp; <span class="string">&quot;,&quot;</span> &amp; newVal</span><br><span class="line"><span class="comment">&#x27;      <span class="doctag">NOTE:</span> you can use a line break,</span></span><br><span class="line"><span class="comment">&#x27;      instead of a comma</span></span><br><span class="line"><span class="comment">&#x27;      Target.Value = oldVal _</span></span><br><span class="line"><span class="comment">&#x27;        &amp; Chr(10) &amp; newVal</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">exitHandler:</span></span><br><span class="line">  Application.EnableEvents = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改代码 <code>Target.Column = 1</code> 为对应的列，多个列使用 <code>Or</code> 连接</li>
</ol>
<blockquote>
<p>⚠️ <strong>注意：该操作是借助 Excel 宏功能实现，所以之后重新打开时要允许宏，否则不生效。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么使用 Excel 实现二级联动的下拉菜单</title>
    <url>/post/2104705023.html</url>
    <content><![CDATA[<blockquote>
<p>本文以 macOS 下的 Excel  为示例，相当于最新版 Excel，如果有菜单名称和位置不同，请自行转换。</p>
</blockquote>
<h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><center>
<img data-src="https://static.sqiang.net/image/post/excel_cascade_menu.gif" width="95%">
</center>

<span id="more"></span>

<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li><p>菜单对应</p>
<ul>
<li><code>Formulas</code> –&gt; 公式</li>
<li><code>Data</code> –&gt; 数据</li>
<li><code>Define Name</code> –&gt; 定义名称（名称管理器）</li>
<li><code>Create from Selection</code> –&gt; 以选择的数据为基础创建名称</li>
<li><code>Data Validation</code> –&gt; 数据验证</li>
<li><code>List</code> –&gt; 序列</li>
</ul>
</li>
<li><p>要点</p>
<ul>
<li><code>= INDIRECT($A2)</code> 而不是 <code>= INDIRECT($A$2)</code></li>
<li>第二个 <code>sheet</code> 存放的下拉菜单的数据源，不可更改或删除 sheet 及相关数据。建议在 sheet 上右击，在弹出的菜单中选择「隐藏」。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo文章更新时间问题</title>
    <url>/post/2792803495.html</url>
    <content><![CDATA[<blockquote>
<p><strong>问题描述</strong>：整理文件的时候，误把存放 Hexo 博客的目录删除了，因为是存储在远程 Git 仓库上的，所以又重新拉取了一遍。在创建新文章进行预览的时候，发现更新<em>所有文章的更新日期都变成了今天</em>。</p>
</blockquote>
<blockquote>
<p><strong>产生原因</strong>：Hexo 默认是以文件的「修改时间」作为文章的更新时间，由于所有博客文章是从 Git 仓库重新拉取回来的，所有文件的创建时间和修改时间都是这个重新拉取的时间，所以文章的更新时间相应的就不对了。</p>
</blockquote>
<p>解决步骤如下：</p>
<span id="more"></span>

<h4 id="1-修改-scaffolds-post-md-文件"><a href="#1-修改-scaffolds-post-md-文件" class="headerlink" title="1. 修改 /scaffolds/post.md 文件"></a>1. 修改 /scaffolds/post.md 文件</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">updated: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>这样每次新建文章后，会自动添加 <code>updated</code> 标签，并且与 <code>date</code> 的创建时间一致。</p>
<p>如果是历史文章，则需要<strong>手动给每篇文章增加这个更新时间</strong>，或者自己写个脚本批量处理下。</p>
<h4 id="2-主题相关配置"><a href="#2-主题相关配置" class="headerlink" title="2. 主题相关配置"></a>2. 主题相关配置</h4><p>本文是以 NexT 主题为例，相关设置保持默认就可以，类似如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 主要是这一部分</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="comment"># 显示更新时间</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 与创建时间不同时才显示</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>其它主题应该也不需要什么特殊设置，如果没有效果或产生异常，则需要查询一下对应主题的相关配置说明。</p>
<h4 id="3-ok"><a href="#3-ok" class="headerlink" title="3. ok"></a>3. ok</h4><p>当对文章进行修改的时候，更新这个 <code>updated</code> 的值就可以了。</p>
<p>如果不需要时间，就把文章的创建时间复制过来，把日期改为当天就可以了。</p>
<p>如果需要准确的时间，则可以查找快捷插入日期时间的方法，因为每个人使用的工具不同，这里只以 vscode 为例说明：</p>
<ul>
<li>方法一：使用快捷键，macOS: <code>⌘ + ⇧ + I</code>；Windows 或 Linux: <code>Ctrl + Shift + I</code>。</li>
<li>方法二：通过按 <code>F1</code> 打开命令面板，并键入 <code>Insert DateTime</code>，然后按回车键即可。如果想指定格式，则输入 <code>Insert Formatted DateTime</code>，然后更改成你需要的格式。</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>自建跨域代理解决Gitalk无法登录的问题</title>
    <url>/post/3973669864.html</url>
    <content><![CDATA[<blockquote>
<p><code>Gitalk</code> 一个基于 <code>Github issues</code> 和 <code>Preact</code> 开发的评论插件，在 <code>Hexo NexT</code> 主题中可以很方便的开启，并且简洁、轻量。</p>
</blockquote>
<p>刚开始使用的时候挺稳的，但是近期出现登录不上的问题。通过查看浏览器的「网络面板」，发现 <a href="cors-anywhere.herokuapp.com">cors-anywhere.herokuapp.com</a> 这个地址报错 <code>403</code>。这是一个实现跨域请求转发的服务，而 Gitalk 正是依赖它与 Github 进行通信。为什么会 <code>403</code> 呢，最后找到<a href="https://github.com/Rob--W/cors-anywhere/issues/301">官方说明</a>，大体意思就是：<code>这个地址只是用来演示的，但是发现流量越来越大，所以要进行限流。</code></p>
<p>解决这个问题最好的办法是：<strong>自建</strong>。</p>
<p>今天查看 NexT 官网，发现有人已经提供了解决方案<a href="https://github.com/next-theme/hexo-theme-next/pull/205">参见这里</a>。</p>
<p>本文主要就是介绍如何自建这个跨域代理，实测可用的完整过程如下下文：</p>
<span id="more"></span>

<h4 id="1-注册-heroku"><a href="#1-注册-heroku" class="headerlink" title="1. 注册 heroku"></a>1. 注册 heroku</h4><p>打开官网地址（需要科学上网）：<a href="https://signup.heroku.com/">https://signup.heroku.com</a></p>
<h4 id="2-安装-heroku-cli"><a href="#2-安装-heroku-cli" class="headerlink" title="2. 安装 heroku-cli"></a>2. 安装 heroku-cli</h4><p>安装说明：<a href="https://devcenter.heroku.com/articles/heroku-cli">https://devcenter.heroku.com/articles/heroku-cli</a></p>
<ul>
<li><p>Windows</p>
<ul>
<li><a href="https://cli-assets.heroku.com/heroku-x64.exe">x64</a></li>
<li><a href="https://cli-assets.heroku.com/heroku-x86.exe">x32</a></li>
</ul>
</li>
<li><p>Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install snap</span><br><span class="line">$ sudo snap install --classic heroku</span><br></pre></td></tr></table></figure></li>
<li><p>macOS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap heroku/brew &amp;&amp; brew install heroku</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-在终端下登录-heroku"><a href="#3-在终端下登录-heroku" class="headerlink" title="3. 在终端下登录 heroku"></a>3. 在终端下登录 heroku</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku login -i</span><br><span class="line"> ›   Warning: heroku update available from 7.52.0 to 7.53.0.</span><br><span class="line">heroku: Enter your login credentials</span><br><span class="line">Email: xxxxx@gmail.com</span><br><span class="line">Password: *********</span><br><span class="line">Logged <span class="keyword">in</span> as xxxxx@gmail.com</span><br></pre></td></tr></table></figure>

<h4 id="4-创建步骤"><a href="#4-创建步骤" class="headerlink" title="4. 创建步骤"></a>4. 创建步骤</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Rob--W/cors-anywhere.git</span><br><span class="line">$ <span class="built_in">cd</span> cors-anywhere/</span><br><span class="line">$ npm install</span><br><span class="line">$ heroku create</span><br><span class="line">$ git push heroku master</span><br><span class="line">remote: -----&gt; Compressing...</span><br><span class="line">remote:        Done: 32M</span><br><span class="line">remote: -----&gt; Launching...</span><br><span class="line">remote:        Released v3</span><br><span class="line">remote:        https://xxxxxxxxxx.herokuapp.com/ deployed to Heroku</span><br><span class="line">remote:</span><br><span class="line">remote: Verifying deploy... <span class="keyword">done</span>.</span><br><span class="line">To https://git.heroku.com/xxxxxxxxxx.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>

<h4 id="5-修改-Gitalk-设置"><a href="#5-修改-Gitalk-设置" class="headerlink" title="5. 修改 Gitalk 设置"></a>5. 修改 Gitalk 设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">    proxy: https://xxxxxxxxxx.herokuapp.com/https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>

<h4 id="6-重新部署-Hexo"><a href="#6-重新部署-Hexo" class="headerlink" title="6. 重新部署 Hexo"></a>6. 重新部署 Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 如何安装 pip 包管理工具</title>
    <url>/post/4186504541.html</url>
    <content><![CDATA[<blockquote>
<p>⚠️ <strong>注意</strong>：</p>
<ol>
<li><p>如果你是 macOS 系统，默认安装的是 python2.x 版本，只需执行 <code>sudo easy_install pip</code> 即可。</p>
</li>
<li><p>如果你是 macOS 下使用 <code>brew install python3</code> 安装的 python3，则 pip 已经安装。</p>
</li>
<li><p>如果你安装了 <code>virtualenv</code> 或 <code>pyvenv</code> ，则 pip 也已经安装。</p>
</li>
</ol>
</blockquote>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>官方推荐的安装方式是通过 <strong><a href="https://bootstrap.pypa.io/get-pip.py">get-pip.py</a></strong> 安装，<a href="https://pip.readthedocs.io/en/stable/installing/">详见这里</a></p>
<ol>
<li><p>下载 <code>get-pip.py</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure></li>
<li><p>安装 pip</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2 --&gt; pip</span></span><br><span class="line"><span class="comment"># -V 是 --version 的简写</span></span><br><span class="line">➜  python get-pip.py</span><br><span class="line">➜  pip -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 --&gt; pip3</span></span><br><span class="line">➜  python3 get-pip.py</span><br><span class="line">➜  pip3 -V</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h3 id="2-升级"><a href="#2-升级" class="headerlink" title="2. 升级"></a>2. 升级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux 或 macOS</span></span><br><span class="line"><span class="comment"># -U 是 --upgrade 的简写</span></span><br><span class="line">➜  pip install -U pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果升级 pip3 ，则执行</span></span><br><span class="line"><span class="comment"># 注意：后面的包名 pip 不需要加 3</span></span><br><span class="line">➜  pip3 install -U pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">➜  python -m pip install -U pip</span><br></pre></td></tr></table></figure>

<h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">➜  pip --<span class="built_in">help</span></span><br><span class="line">➜  pip3 --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的包</span></span><br><span class="line">➜  pip list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可升级的包</span></span><br><span class="line">➜  pip list -o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示安装包信息</span></span><br><span class="line">➜  pip show package_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定包的详细信息</span></span><br><span class="line">➜  pip show -f package_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索包</span></span><br><span class="line">➜  pip search package_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包（默认最新版本）</span></span><br><span class="line"><span class="comment"># 部分库可能需要较高的权限，执行命令的时候追加 sudo 或使用较高权限的用户</span></span><br><span class="line">➜  pip install package_name</span><br><span class="line"><span class="comment"># 也可以通过 == &gt;= &lt;= &gt; &lt; 来指定一个版本号</span></span><br><span class="line">➜  pip install package_name==1.0.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">➜  pip install --upgrade package_name</span><br><span class="line">➜  pip install --upgrade package_name==1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">➜  pip uninstall package_name</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>包管理工具</tag>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做好一场技术演讲</title>
    <url>/post/2259619543.html</url>
    <content><![CDATA[<blockquote>
<p>本文整理自：<a href="https://time.geekbang.org/column/61">极客时间微课《如何做好一场技术演讲》</a></p>
</blockquote>
<h3 id="1-精心准备"><a href="#1-精心准备" class="headerlink" title="1. 精心准备"></a>1. 精心准备</h3><h4 id="1-1-明确演讲主题"><a href="#1-1-明确演讲主题" class="headerlink" title="1.1. 明确演讲主题"></a>1.1. 明确演讲主题</h4><p>如同架构设计一样，了解需求永远是第一位的，任何脱离需求的架构设计都是耍流氓。</p>
<p>想要开始演讲，首先需要了解听众的诉求，确认下面这些问题：</p>
<ul>
<li>听众组成？</li>
<li>对要演讲主题的了解程度？</li>
<li>听众想听什么？</li>
<li>演讲能给听众带来什么价值？</li>
<li>……</li>
</ul>
<h4 id="1-2-确定演讲主线"><a href="#1-2-确定演讲主线" class="headerlink" title="1.2. 确定演讲主线"></a>1.2. 确定演讲主线</h4><ol>
<li><strong>Who</strong> 自我介绍，让听众了解自己，建立连接；</li>
<li><strong>What&amp;When</strong> 今天要分享的主题，通过简短介绍吸引听众的注意力、好奇心；</li>
<li><strong>Why</strong> 为什么要做这个架构改造、技术升级，整个项目的背景是什么样的，结合对听众的了解，做特定的介绍；</li>
<li><strong>How</strong> 深入浅出 3～4 个最核心的内容点，当然为了全面性，你可以都罗列出来，但介绍的重点建议控制在 3～4 项；</li>
<li><strong>Future</strong> 让大家了解你未来的计划，你对技术趋势的看法等；</li>
<li><strong>Recap</strong> 对今天的主题再做一个回顾，让听众加深对核心内容记忆。</li>
</ol>
<h4 id="1-3-关于-PPT"><a href="#1-3-关于-PPT" class="headerlink" title="1.3. 关于 PPT"></a>1.3. 关于 PPT</h4><ul>
<li>做一个<strong>演讲型</strong>（注重体验和创意）的幻灯片，风格保持“简洁、干净、一致、跳脱”。</li>
<li>字体和风格的选择要保持一致性，最好不要用三个以上的颜色。</li>
<li>合理的排版；</li>
<li>合理而有意义的动效（一定不要太多）；</li>
<li>页数尽量控制在 15～20 页，可根据实际情况再追加，但一定不要太多；<ul>
<li>Who 1 页</li>
<li>What&amp;When 1～2 页</li>
<li>Why 1 页</li>
<li>How 展开 3～4 点，每点 2～3 页</li>
<li>Future 1 页</li>
<li>Recap 1 页</li>
</ul>
</li>
<li>减少大篇幅文字，用最<strong>简洁的文字</strong>+<strong>图表</strong>（<em>一图胜千言</em>）来表示；</li>
<li>以 keyword 为指引，适当的临场发挥，<strong>切勿照本宣科</strong>。</li>
</ul>
<span id="more"></span>

<h3 id="2-刻意训练"><a href="#2-刻意训练" class="headerlink" title="2. 刻意训练"></a>2. 刻意训练</h3><ul>
<li>找安静的地方，自我练习。</li>
<li>请信任的朋友来试听。</li>
<li>公司内部试讲。</li>
<li>冥想。</li>
</ul>
<p><strong>注意，刻意训练不等于重复训练，两者最大的差别在于是否根据反馈不断进行迭代改进。</strong></p>
<h3 id="3-演讲中的肢体语言"><a href="#3-演讲中的肢体语言" class="headerlink" title="3. 演讲中的肢体语言"></a>3. 演讲中的肢体语言</h3><p>在沟通效果上，<strong>讲话的方式</strong>比讲话的内容重要得多。你的思维内容以语言的形式传递出去，而非语言的暗示却会以它十倍的感染力让听众深信不疑。</p>
<p>其中：</p>
<ul>
<li><p>姿态</p>
<p>  姿态其实是用一种很自然很舒服的交流态势向台下的听众传递信息的方式。所谓最好的设计就是让人感觉不到设计的存在，如果你的姿态让人感到做作和不自然，那就是失败的表现。</p>
<p>  <strong>保持自然</strong>，<strong>目光坚定</strong>，勇敢地面对台下千百双眼睛的注视并熟视无睹，就是成功的第一步。</p>
</li>
<li><p>手势</p>
<p>  一个非常自然的<strong>手势</strong>是“切西瓜”，伸出手臂，摊开手掌，让手掌与地面垂直，然后小幅度上下挥动。</p>
<p>  参见下图的乔老师：</p>
<p>  <img data-src="https://oscimg.oschina.net/oscnet/25619ed99f181010fcf6d89126a2627ed20.jpg" alt="乔布斯"></p>
<p>  我们还可以双手切，左手切，右手切，千变万化，无往不利。但是切记，<strong>千万不要做出过于夸张的身体姿势</strong>。</p>
</li>
<li><p>声音</p>
<p>  掌握你说话中的阴阳平仄、抑扬顿挫非常重要。</p>
<p>  人们已经习惯了在声音和音调中寻找信息的结构，升调让人觉得充满疑虑，降调让人坚定而充满信心。</p>
<p>  在演讲的过程中，时刻提醒自己要<strong>放慢语速</strong>，语速慢一点，会让听众觉得演讲人更稳重，也给了自己更多的思考时间，以把控好演讲的整体节奏。</p>
</li>
</ul>
<h3 id="4-如何缓解演讲前的焦虑和紧张"><a href="#4-如何缓解演讲前的焦虑和紧张" class="headerlink" title="4. 如何缓解演讲前的焦虑和紧张"></a>4. 如何缓解演讲前的焦虑和紧张</h3><ul>
<li>首先从心里要明确的是，这种焦虑与紧张是普遍存在的，当面对那么多双盯着你的眼睛，每个人都会遇到，并不是只有你才有；</li>
<li>微笑和热情能让人更加自信，也能在一定程度上消除紧张感；</li>
<li><strong>做好前面提到的准备和训练工作，这是关键</strong>；</li>
<li>提前熟悉场地，提前到场，熟悉会场和听众情况，以便快速进行调整；</li>
<li>开场互动，一方面活跃现场气氛，另一方面了解听众情况，以便演讲时对内容进行调整；</li>
<li>也可以提前准备一些幽默段子，适当的时候穿插到演讲中。</li>
</ul>
<h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><h4 id="5-1-讲故事"><a href="#5-1-讲故事" class="headerlink" title="5.1. 讲故事"></a>5.1. 讲故事</h4><p>以<strong>类比</strong>和讲<strong>故事</strong>的方式进行演讲，更容易把你的观点深深地刻在别人的脑海中。</p>
<p>而故事是什么呢？<strong>凡是能让人在脑海中产生画面感的话语或文字就是故事。</strong></p>
<p>而故事之所以成为故事，最重要的诀窍就是 —— “具体”：</p>
<ul>
<li>首先，具体让人产生画面感，产生更多的钩子。</li>
<li>其次，具体让人更容易产生情绪。</li>
<li>第三，具体让人产生可信感。</li>
</ul>
<h4 id="5-2-收尾"><a href="#5-2-收尾" class="headerlink" title="5.2. 收尾"></a>5.2. 收尾</h4><p>一场演讲通常涉及比如架构、流程、方案等众多技术细节，真正能被记住的内容其实没有多少，所以随着演讲进入尾声，最后做一个总结就显得格外重要。</p>
<p>根据心理学中的“近因效应”：<strong>人对演讲末尾部分的印象最为深刻，记忆也最为清晰。</strong></p>
<p>总结部分的内容<strong>在精不在多</strong>，让听众记住你期望他记住的 2-3 个关键点，听众有收获就达到目的了。并且总结的时候可以反复强调结论、强调实践。</p>
<h4 id="5-3-回答问题"><a href="#5-3-回答问题" class="headerlink" title="5.3. 回答问题"></a>5.3. 回答问题</h4><ul>
<li><p>将不太熟悉的问题转化成自己擅长的。</p>
</li>
<li><p>面对自己不擅长的问题，也大方承认自己不确定答案，但可以讲讲自己的思路。</p>
</li>
<li><p>委婉避开尴尬的问题</p>
<blockquote>
<p>这是个很好的问题，但几句话可能讲不清楚，感兴趣的话，我们线下交流一下。</p>
</blockquote>
<p>  切记不要与提问者起冲突，特别是针对“你讲的我完全不赞同”这类观点。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术演讲</tag>
        <tag>演讲</tag>
      </tags>
  </entry>
  <entry>
    <title>一堂技术管理课</title>
    <url>/post/895189460.html</url>
    <content><![CDATA[<blockquote>
<p>本文整理自： 极客时间专栏<a href="https://oscimg.oschina.net/oscnet/ae44a6b6fee0388014c6335dc070317e18e.jpg" title="《朱赟（yūn）的技术管理课》">《朱赟（yūn）的技术管理课》</a> （微信扫码进入课程）</p>
</blockquote>
<h3 id="从给答案到做引导"><a href="#从给答案到做引导" class="headerlink" title="从给答案到做引导"></a>从给答案到做引导</h3><p>每次别人向你请教问题，你都有现成的答案或快速找到答案，就会渐渐导致两个问题：</p>
<ol>
<li>向你问问题和各种琐事的人越来越多；</li>
<li>因为你给的是答案，下次如果有类似的问题，别人还会来找你。</li>
</ol>
<p>那么如何改变呢？ <strong>授人以鱼，不如授人以渔</strong>。</p>
<ul>
<li><p>首先，需要明确什么时候适合直接给答案，什么时候适合给线索，让对方自己找答案。</p>
<p>  可根据问题类型（简单、复杂、常见、不常见等），提问人所处阶段（新人、略有经验、熟手）来决定。</p>
</li>
<li><p>其次，如何引导？</p>
<p>  可以根据对方的问题，提出一些相关的问题，通过问题去引导对方进行深入思考。</p>
</li>
<li><p>最后，引导的好处。</p>
<p>  如果是通过别人的引导，自己摸索出来的，那么他解决类似问题的能力后续就会提升。同时，也会调动他工作的积极性，让其产生一种自己解决来问题的成就感。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="Bug引发事故，该不该追究责任？"><a href="#Bug引发事故，该不该追究责任？" class="headerlink" title="Bug引发事故，该不该追究责任？"></a>Bug引发事故，该不该追究责任？</h3><h4 id="追究"><a href="#追究" class="headerlink" title="追究"></a>追究</h4><p>假如每个错误都会受到惩罚，不难想象，以下情况一定难以避免：</p>
<ul>
<li>大家都怕闯祸，所以风险高的事没人做，或者总是那几个靠谱的“老司机”做，其他人则永远没有机会得到锻炼。</li>
<li>如果有人搞砸了什么事情，会因为担心承担后果而推卸责任，从而尽可能掩盖错误的坏影响，不让人知道。</li>
<li>如果别人犯了错，会觉得不关自己的事。</li>
<li>指出别人的错误就会导致别人被追究责任，因此看到有问题也会犹豫要不要指出。</li>
</ul>
<h4 id="不追究"><a href="#不追究" class="headerlink" title="不追究"></a>不追究</h4><p>反之，如果无论发生什么错误，都不需要承担后果或进行反省，没有任何担当，那可能又会出现以下情况：</p>
<ul>
<li>同样的错误可能会一再发生。</li>
<li>小错酿成大错。</li>
<li>做事仔细的人会觉得不公平。</li>
</ul>
<h4 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h4><p>对于工作中的错误，尤其是 Bug 导致的错误，我们应该采取什么态度和措施呢？</p>
<ol>
<li>追究责任，但不是惩罚。</li>
<li>对事儿不对人。</li>
<li>反复问“为什么”，从根本上发现问题。</li>
<li>员工关系的建立也很关键。我们需要培养的是大家相互信任、互帮互助，为了共同的目标努力的氛围，而不是一种不安全感。</li>
</ol>
<h3 id="如何帮助团队成员成长？"><a href="#如何帮助团队成员成长？" class="headerlink" title="如何帮助团队成员成长？"></a>如何帮助团队成员成长？</h3><p>包括通过指导、反馈、监督、交流、协调资源等方式帮助下属提升能力，迅速成长。</p>
<p>作为管理者，应该经常思考的是：</p>
<ul>
<li>怎样做能够让员工进步到更高层次？</li>
<li>他的潜力在哪，哪些地方是可以培养和挖掘的？</li>
<li>怎么帮助员工改进他与组内组外同事的关系，让他有机会更好地发挥他的长处？</li>
<li>怎样尽早地发现他的错误和缺点，并帮助他认识和改进，而不是在错误变成后果后，去追究责任。</li>
<li>怎样帮助他在不擅长的领域建立信心？</li>
<li>怎样帮助他学会处理各种压力和矛盾？</li>
</ul>
<p>切忌陷入静态思维去看待动态发展的问题。</p>
<ul>
<li>多和自己对话，想想自己哪些时候、哪些方面会用静态的眼光去看待别人的能力。</li>
<li>把自己有这种心态时的表现或内心的一些想法写出来。</li>
<li>再遇到类似的情况，停一下，想一想是不是自己可以有所改变。</li>
<li>诚恳地告诉组员希望帮助他成长，多交流并听取对方的想法。</li>
</ul>
<blockquote>
<p><strong>一个技术管理者的成功并不在于自己代码多好、能力多强，他的成功一定建立在团队成功的基础之上。只有团队成员不断成长，这个团队才可以做成更大的事情，而你才可以在团队的基础上，站得更高、看得更远。</strong></p>
</blockquote>
<h3 id="当我们给别人提意见时，要注意些什么？"><a href="#当我们给别人提意见时，要注意些什么？" class="headerlink" title="当我们给别人提意见时，要注意些什么？"></a>当我们给别人提意见时，要注意些什么？</h3><ul>
<li><p>首先，要思考自己是不是合适提这个意见。</p>
<p>  也就是说，对方会不会产生 “就凭你” 的逆反心理。</p>
<p>  在工作中适当放低姿态，往往更容易获得尊重。</p>
<p>  <strong>不要总是试图居高临下地提意见，尤其是你在对方心里还没有建立任何信任和威信的时候，不要贸然给别人提负面意见。</strong></p>
</li>
<li><p>其次，提意见要讲究合适的时机</p>
<p>  确定什么时候应该提什么样的意见。</p>
<p>  直接给出意见时，需注意：</p>
<ol>
<li>地点很重要，尽量找个安静的地方，避开其他人；</li>
<li>可能的话，稍微用几句闲聊来导入正题；</li>
<li>提意见时，语气不应该是责备，而是描述问题；</li>
<li>不要加入太多个人感觉、观点和情绪，避免使用一些像 “你总是”“你从来都” 的评价。</li>
</ol>
<p>  <strong>有效的讨论需要心平气和</strong>，找出问题的最优解才是关键。</p>
</li>
<li><p>最后，多夸夸对方做得好的地方，多给予正向反馈</p>
<p>  很多时候，正向反馈能更好地帮助对方成长。表扬的力量永远大于批评，他会试图把事情做得更好。</p>
<p>  正向的沟通还能帮助你与对方构建良好的沟通渠道，让你们未来的合作更为顺畅和有效。</p>
</li>
</ul>
<h3 id="当别人给我们提意见时，该如何应对？"><a href="#当别人给我们提意见时，该如何应对？" class="headerlink" title="当别人给我们提意见时，该如何应对？"></a>当别人给我们提意见时，该如何应对？</h3><ol>
<li><p>尽量排除情绪以及偏见对我们的干扰。</p>
</li>
<li><p>假定对方是善意的。</p>
<p> 尽可能以感激的心态去听取意见，尽管这一点很难，但是我们还是要尽力为之。</p>
</li>
<li><p>了解意见的具体细节，把关注点放在对方的出发点，以及对方希望我们改进的地方。</p>
</li>
<li><p>对意见里的信息进行分类和过滤。</p>
<p> 思考一下：哪些是误解，哪些是自己的不足，哪些是自己可以通过沟通去改变的，哪些是自己需要尝试改进的。</p>
<p> 再三确定后，如果确实不是自己的问题，也不用反感，一笑而过就好。</p>
</li>
</ol>
<h3 id="项目延期了，作为负责人该怎么办？"><a href="#项目延期了，作为负责人该怎么办？" class="headerlink" title="项目延期了，作为负责人该怎么办？"></a>项目延期了，作为负责人该怎么办？</h3><blockquote>
<p>先问自己几个问题：为什么项目延期了，你是什么时候第一次感觉到项目可能会延期，在此之后你做了什么？</p>
</blockquote>
<p>对于<strong>不可控因素</strong>，我们能做的并不多，只能权衡取舍，对项目期限、人员或者需求范围做出调整。</p>
<p>如果是计划本身的问题，或者是因为项目成员没有很好地跟进同一个计划并保持一致，那我们应该尽最大可能避免这些问题的发生。</p>
<p>具体措施：</p>
<ol>
<li><p>建立一定的流程。</p>
<p> 这里包括计划制定流程和计划跟进流程，也许是每周一次的同步会议，也许是一个共享的任务管理工具，不要过分相信自己随机跟进的能力。</p>
</li>
<li><p>在整个项目计划中，要有明确的优先级。</p>
<p> 知道哪些任务是非做不可的；哪些任务是别的任务所依赖，需要提前完成的等等。</p>
<p> 人们往往有先处理简单任务的惰性，如果没有搞清楚轻重缓急，那就有可能出现不太重要的杂事都做完了，而重要的事却没有太大进展的情况。</p>
</li>
<li><p>制作一个共享的项目状态表，让团队成员可以一眼就看清楚项目进展，并保持该图表的更新。</p>
<p> 进度表可以作为大家对进度评估的工具，也可以是负责人判断哪里需要重点跟进的依据。</p>
<p> 确保这个计划是每个主要相关者都确认并同意的，并在同意后让他们每天都能看到这个计划的所有更新。</p>
</li>
<li><p>不要漏掉任何一个人。</p>
<p> 不要觉得暂时还没有他的活儿，可以先不用跟他沟通。当一个项目的计划落实后，应该第一时间让所有相关的人了解到。临时通知会让合作者或帮忙的人没有参与感，并且很容易因为对方没有提前准备在时间上无法达成一致。</p>
</li>
<li><p>提供一个有效的反馈渠道。</p>
<p> 任何人在任何时候对项目有担心或者质疑，确保他可以通过有效的途径让你第一时间知道他的担心。</p>
</li>
</ol>
<h3 id="管理者在进行工作分配时，会考虑哪些问题？"><a href="#管理者在进行工作分配时，会考虑哪些问题？" class="headerlink" title="管理者在进行工作分配时，会考虑哪些问题？"></a>管理者在进行工作分配时，会考虑哪些问题？</h3><ol>
<li><p>建立参考基线</p>
<p> 当和一个人没有任何直接接触的时候，我们可以通过第三方评价、个人履历以及该员工做过的项目或产品来衡量他的能力。</p>
</li>
<li><p>问对问题比正确答案更重要</p>
<p> 把任务交到员工手里之前，要和他进行充分的沟通。告诉他任务的详细情形，看他会问出什么样的问题，提出哪些想法。</p>
<p> 这能帮助我们进一步评估他是不是真的了解任务的状况，有没有综合去考虑任务中的问题。</p>
</li>
<li><p>工期估算</p>
<p> 估算完成任务的工期是分配任务中必不可少的环节。可以让接受任务的员工试着去估算：需要多久完成，大概什么时候完成，需要什么样的资源等。</p>
<p> 如果一个人不能花费足够的时间去了解自己未知的部分，我们很难放心地把任务交给他独立完成。</p>
</li>
<li><p>执行力</p>
<p> 工作中有一些人，他们的沟通能力、计划能力都很强，但是执行力却比较差，或者没有粘滞力，执行过程中容易遇难就退、虎头蛇尾。这些人属于能说但不能把事情做好的人，难以托付大事。如果你的项目中有重要的任务，切记不要交给这样的人去做。</p>
</li>
<li><p>后期维护</p>
<p> 完成一个项目并不意味着项目的结束，很多时候，项目上线了还需要一段时间的维护工作。这包括了 Bug 修复，排查用户反馈的问题，完成后续的迭代开发等等。</p>
<p> 于是，你需要去观察：一个人是不是可以自觉地维护产品，有没有责任感，会不会推卸责任，出了问题，能不能第一时间冲到一线解决。这些都是很重要的品质，也是你判断他是否能够承担更重要任务的参考。</p>
</li>
</ol>
<p>在分配工作的过程中，你还需要注意一些细节问题：</p>
<ul>
<li><p>如何对待职场新人</p>
<p>  一些职场新人很有潜力，但经验不足，也许他们在项目初期有很多地方考虑不完善。这个时候，不要轻易地否定他们的工作。如果你可以耐心地花些时间悉心指导，他们可以快速地学习并且进步。</p>
</li>
<li><p>如何针对不同类型的员工分配工作</p>
<p>  在分配任务的时候，你需要根据每个人的特点安排不同类型的任务，并提供相应的支持和帮助，扬长避短，才能发挥人员的最大效力。</p>
</li>
<li><p>大项目的工作分配</p>
<p>  指定项目负责人，其同样需要拥有分配任务的能力，对于大部分事情不要亲力亲为，而是分配给合适的人，整个过程中沟通、协调为主。</p>
</li>
</ul>
<h3 id="管理者不用亲力亲为：关键是什么？"><a href="#管理者不用亲力亲为：关键是什么？" class="headerlink" title="管理者不用亲力亲为：关键是什么？"></a>管理者不用亲力亲为：关键是什么？</h3><p>把关注点放在如何帮助别人把事情做好上面。比如，接受任务的人需要哪些支持和帮助才能很好的完成任务呢，我们应该在什么样的时间点去提供这样的帮助。</p>
<p>作为一个管理者，我们在授权和分配任务的时候应该注意：</p>
<ul>
<li>让对方明确目标，知道最终想要达到的结果是什么，对这个任务完成的期望值是怎样的。</li>
<li>制定一个计划，并保持跟进。</li>
<li>给出反馈，尤其是正面的反馈。</li>
</ul>
<p>项目管理中的三个技巧：</p>
<ol>
<li><p>在做项目计划的时候，要对多个项目进行细分重组</p>
<p> 对要做的任务重新细分重组，把大任务变成一个个均匀的小任务，然后根据个人能力，任务的相互依赖情况等重新分配下去。</p>
</li>
<li><p>工期估算</p>
<p> 管理者和任务的负责人要达成一致，并且注意到，工程师门在进行时间预算的时候都是比较乐观、理想的，最好为项目预留缓冲的时间。</p>
</li>
<li><p>实时跟进，并准备好 B 计划</p>
<p> 为项目合理设置里程碑，并实时跟进，一旦出现问题，就要启动 B 计划。</p>
</li>
</ol>
<p>如何处理工作中的人际关系？</p>
<p>人际关系是一个特别复杂的话题，因人而异，更因情形而异。</p>
<p>那么如何处理人际关系呢？在这里，我有几点建议，内容可能更偏向于个人感悟，仅供你的参考：</p>
<ol>
<li>对于自己的上下级，保持开放的心态和愿意沟通的态度十分重要。</li>
<li>在交往过程中，尽可能对别人的分享、工作、交流持一种积极、友善和鼓励的态度。</li>
<li>加入一些有利于自己成长的社交圈子。</li>
<li>适当的寻求帮助。</li>
<li>对于别人的意见要尽可能认真对待。</li>
</ol>
<h3 id="如何激发团队人员的责任心？"><a href="#如何激发团队人员的责任心？" class="headerlink" title="如何激发团队人员的责任心？"></a>如何激发团队人员的责任心？</h3><ol>
<li><p>明确责任制，尽可能通过规则来明确和规范与责任心、责任感相关的事情；</p>
<p> 适当放权，让他去主导一些事情。</p>
<p> 适当的奖励机制，对于主动承担责任的员工表示认可和感激。</p>
</li>
<li><p>让责任制变得有效，而不是形同虚设。</p>
<p> 有效的责任制，在开始的时候就要让所有人明确责任与权利，而不是最后追究责任或推卸责任。</p>
<p> 在这个基础上，根据每个人的不同情况，在执行过程中适度跟进。</p>
</li>
<li><p>尽可能地让团队成员充满归属感，进而激发他们的责任心。</p>
<p> 归属感是指一个人对某样事物、组织的从属感觉，是一种主观的个人感受。</p>
<p> 如何增加员工的归属感呢？</p>
<ul>
<li>在有利公司发展的基础上建立独特的企业文化，创新、公开透明、积极向上。</li>
<li>管理者还应该以身作则，让员工看到自己的努力，对公司目标的追求，对企业文化的践行。</li>
<li>真诚对人，能够从员工角度考虑问题，对好的行为认可并加以鼓励。</li>
<li>同时做一些仪式感比较强的团队活动和建设。</li>
</ul>
</li>
</ol>
<h3 id="理解并建立自己的工作弹性"><a href="#理解并建立自己的工作弹性" class="headerlink" title="理解并建立自己的工作弹性"></a>理解并建立自己的工作弹性</h3><p>人为什么会焦虑呢？可能是自身的弹性能力不够，事实上人的弹性能力也是可以锻炼和提升的：</p>
<ul>
<li>正确思考而不是钻牛角尖，找到需要改进的地方持续改进；</li>
<li>偶尔放纵，不担心犯错，从错误中成长；</li>
<li>多结识乐观积极向上的朋友；</li>
<li>一直做自己认为有价值的事情。</li>
</ul>
<p>想要构建出自己的弹性能力，还要具备以下两个心态：</p>
<ol>
<li>不论你多努力，也不是所有的付出都会有回报，或者有等比的回报。</li>
<li>不只是你，每个人都有自己搞不定的时候。</li>
</ol>
<p><strong>日拱一卒，不期速成。</strong></p>
<h3 id="如何对更多的工作说“不”？"><a href="#如何对更多的工作说“不”？" class="headerlink" title="如何对更多的工作说“不”？"></a>如何对更多的工作说“不”？</h3><p>要对更多的工作说“不”，需要搞清楚两件事：</p>
<ol>
<li>分清事情的轻重缓急，有些紧急的事情和优先级高的事情很难拒绝；</li>
<li>正确评估自己的能力和时间资源。</li>
</ol>
<p>与生活中相比，在工作中说“不”需要更理性，避免强硬拒绝，让对方觉得你是因为不愿帮忙才拒绝的。</p>
<p>应开门见山，把自己的想法和事实清晰的表达出来。</p>
<p>对自己力不能及的事情，提早说“不”，无论对人对己，都是负责任的表现。</p>
<p>答应一件事情之后，尽可能地兑现自己的承诺，如果出现计划外的情况或者难处，要及时的进行沟通。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术管理</tag>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8、jdk11安装文件下载</title>
    <url>/post/1948692156.html</url>
    <content><![CDATA[<blockquote>
<p>这里提供的安装文件是从官网下载，可比对 sha256 进行确认。</p>
<p>只提供 jdk 的 <strong>LTS</strong> 版本，并且对应系统只提供 <strong>Windows</strong>、<strong>macOS</strong>、<strong>Linux</strong>。</p>
<p>关于官网下载的说明：</p>
<ol>
<li><p>非最新维护版本，需要登录账号才能下载，这个可以搜一下，有别人分享出来的账号；</p>
</li>
<li><p>下载速度略慢，需要挂代理才能最快下载。</p>
</li>
</ol>
</blockquote>
<span id="more"></span>

<h3 id="jdk-11-0-5"><a href="#jdk-11-0-5" class="headerlink" title="jdk-11.0.5"></a>jdk-11.0.5</h3><ul>
<li><p>官网下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html</a></p>
</li>
<li><p>Checksum 地址：<a href="https://www.oracle.com/webfolder/s/digest/11-0-5-checksum.html">https://www.oracle.com/webfolder/s/digest/11-0-5-checksum.html</a></p>
</li>
<li><p>百度网盘链接:<a href="https://pan.baidu.com/s/1d_c2rlCh7jfgOtgeES5zHg">https://pan.baidu.com/s/1d_c2rlCh7jfgOtgeES5zHg</a>  密码:jsd2</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Filename</th>
<th>Checksum</th>
</tr>
</thead>
<tbody><tr>
<td>jdk-11.0.5_linux-x64_bin.deb</td>
<td>sha256: e97ed71931e733e312925464890cbfc9fc4d07fed13d63c5d6b26065d122e360</td>
</tr>
<tr>
<td>jdk-11.0.5_linux-x64_bin.rpm</td>
<td>sha256: d0ce6501e47b776590bfe297c8ea4854e0fd1e2d3d7f8dcacba5c0a37c4c12d5</td>
</tr>
<tr>
<td>jdk-11.0.5_linux-x64_bin.tar.gz</td>
<td>sha256: 387e60bdad6d6fc20d41cd712536f0f7adbb086fa73bc3cb225b3edad0bfa0a6</td>
</tr>
<tr>
<td>jdk-11.0.5_osx-x64_bin.dmg</td>
<td>sha256: 05e41051d023af9c3ae94933f452a16121969cc700e44e6254bf8c6388a49552</td>
</tr>
<tr>
<td>jdk-11.0.5_osx-x64_bin.tar.gz</td>
<td>sha256: a18a038cd76982fd99384b77c8c87bd661eac3035c6b7e6e163d4479a9c9a0ec</td>
</tr>
<tr>
<td>jdk-11.0.5_windows-x64_bin.exe</td>
<td>sha256: 184b73cb3e6c63102c9ad4a914da11faf3bd9ea8caafbe0a0c79d7f94ed3685f</td>
</tr>
<tr>
<td>jdk-11.0.5_windows-x64_bin.zip</td>
<td>sha256: 8cda919c402e92d6782e9a68bcb9fe462ac29304de48b4377eb4112891f351b2</td>
</tr>
</tbody></table>
<h3 id="jdk-8u231"><a href="#jdk-8u231" class="headerlink" title="jdk-8u231"></a>jdk-8u231</h3><ul>
<li><p>官网下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
</li>
<li><p>Checksum 地址：<a href="https://www.oracle.com/webfolder/s/digest/8u231checksum.html">https://www.oracle.com/webfolder/s/digest/8u231checksum.html</a></p>
</li>
<li><p>百度网盘链接:<a href="https://pan.baidu.com/s/1knhAqfsj2Q1VCVpPQdId3Q">https://pan.baidu.com/s/1knhAqfsj2Q1VCVpPQdId3Q</a>  密码:y5vj</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Filename</th>
<th>Checksum</th>
</tr>
</thead>
<tbody><tr>
<td>jdk-8u231-linux-i586.rpm</td>
<td>sha256: 9b5e22a987eba90c2487e2f7a6e3a3a304db0ae366bd1971a3d017069fd74639</td>
</tr>
<tr>
<td>jdk-8u231-linux-i586.tar.gz</td>
<td>sha256: 875207cd152b6c445234b20c2b5824b6a736b659eb8aab83f2a107a179d198a5</td>
</tr>
<tr>
<td>jdk-8u231-linux-x64.rpm</td>
<td>sha256: cfa09684b6a797e15b0369c480cb9a7ecafe01e464606a7df9c250d9c2da311d</td>
</tr>
<tr>
<td>jdk-8u231-linux-x64.tar.gz</td>
<td>sha256: a011584a2c9378bf70c6903ef5fbf101b30b08937441dc2ec67932fb3620b2cf</td>
</tr>
<tr>
<td>jdk-8u231-macosx-x64.dmg</td>
<td>sha256: f808d11b34fa9ee7b6326b5b6dd18544496e02c84b839d94e062bd4493df5d45</td>
</tr>
<tr>
<td>jdk-8u231-windows-i586.exe</td>
<td>sha256: 2395128a66cb2cbc0824bbc59657f249dc4f6d3bb00ec752c094ef4f97d3d28d</td>
</tr>
<tr>
<td>jdk-8u231-windows-x64.exe</td>
<td>sha256: 1a88b2054ebe972c5618d4199f79afdd5a4cba87fffdd1f1a4f1eddff9fb56c1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jdk</tag>
        <tag>jre</tag>
      </tags>
  </entry>
  <entry>
    <title>在 macOS 下怎么样安装、快速切换多个 jdk 版本</title>
    <url>/post/1961322743.html</url>
    <content><![CDATA[<blockquote>
<p>说明：</p>
<ol>
<li><p>jdk 在 macOS 下的安装路径为 <code>/Library/Java/JavaVirtualMachines/</code>；</p>
</li>
<li><p><code>/usr/libexec/java_home</code> 是 macOS 下提供的工具，类似一个简单的 java 版本管理工具，可使用 <code>-h</code> 参数查看使用帮助。</p>
</li>
</ol>
</blockquote>
<span id="more"></span>

<h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h5><p>jdk 的安装包可以参考《<a href="/post/1948692156.html" title="jdk1.8、jdk11安装文件下载">jdk1.8、jdk11安装文件下载</a>》下载，安装方式比较简单，一路下一步即可。</p>
<h5 id="2-修改环境变量"><a href="#2-修改环境变量" class="headerlink" title="2. 修改环境变量"></a>2. 修改环境变量</h5><ol>
<li>使用 vim 打开 <code>～/.bash_profile</code>（没有则新建），如果你用的是 zsh，则对应的文件是 <code>~/.zshrc</code>。</li>
<li>加入以下设置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># Java</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># 各版本对应的路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</span><br><span class="line"><span class="built_in">export</span> JAVA_11_HOME=`/usr/libexec/java_home -v 11`</span><br><span class="line"><span class="comment"># 设置默认的 jdk 版本</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br><span class="line"><span class="comment"># 动态切换版本的快捷命令</span></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> jdk11=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_11_HOME</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用以下命令，使修改的配置立即生效</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h5 id="3-动态切换"><a href="#3-动态切换" class="headerlink" title="3. 动态切换"></a>3. 动态切换</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  jdk8</span><br><span class="line">➜  java -version</span><br><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br><span class="line">➜  jdk11</span><br><span class="line">➜  java -version</span><br><span class="line">java version &quot;11.0.5&quot; 2019-10-15 LTS</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11.0.5+10-LTS)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jdk</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>《最后的舞动 The Last Dance》</title>
    <url>/post/3209780963.html</url>
    <content><![CDATA[<table>
  <thead>
    <tr>
      <th colspan="2">
        片名：最后的舞动 The Last Dance（2020）
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="5">
      <img class="poster" data-src="https://static.sqiang.net/image/post/poster_last_dance.jpg">
      </td>
      <td><b>导演</b>：杰森·海希尔</td>
    </tr>
    <tr>
      <td><b>主演</b>：迈克尔·乔丹、斯科蒂·皮蓬、菲尔·杰克逊、史蒂夫·科尔</td>
    </tr>
    <tr>
      <td><b>类型</b>：纪录片</td>
    </tr>
    <tr>
      <td><b>地区</b>：欧美</td>
    </tr>
    <tr>
      <td><b>简介</b>：1997 年秋天，迈克尔·乔丹和芝加哥公牛队开始了他们八年来第六个 NBA 总冠军的追逐。但是，尽管乔丹自 13 年前大放异彩以来取得了非凡成就，但主教练菲尔·杰克逊称之为“最后的舞动”的这次比赛被俱乐部高层中的紧张气氛所笼罩，因为这是最后一次看到有史以来最伟大的球员和他杰出的队友们一起奋力拼搏。</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="2">
        下载（磁力链接）：
        <a href="magnet:?xt=urn:btih:375855b96e874205a3e1aa7fd6e9c89bb4dd42a9&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E01</a>
        <a href="magnet:?xt=urn:btih:5b5a3bd7e7083658a6d0953a0737a8558721eca1&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E02</a>
        <a href="magnet:?xt=urn:btih:cb0235cd5b3fc6c4bc3f2b501d70096c7eaec01c&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E03</a>
        <a href="magnet:?xt=urn:btih:86f945f44e7a9dc1a7a4d4adcfef18cef3085e03&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E04</a>
        <a href="magnet:?xt=urn:btih:fff7fc9e1056941cd6e9e1053b0ffe638ad3aad2&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E05</a>
        <a href="magnet:?xt=urn:btih:0ce19de594e3093d4ecf26da87cb71eed9386f18&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E06</a>
        <a href="magnet:?xt=urn:btih:07fc4fecec9ef89e6cf0e2b7c05430397cc9f847&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E07</a>
        <a href="magnet:?xt=urn:btih:e9c2f925762a4aa0e8659c2d3b30219f6c6ef2bb&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E08</a>
        <a href="magnet:?xt=urn:btih:f7bdbef6a8b240d206ac9a0035f1cb8eea1e835f&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E09</a>
        <a href="magnet:?xt=urn:btih:853d5900caad0fcbc23f6561d9f5beac25e57fe6&tr=http://tr.cili001.com:8070/announce&tr=udp://p4p.arenabg.com:1337&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://open.demonii.com:1337">S01E10</a>
      </td>
    </tr>
  </tfoot>
</table>]]></content>
      <categories>
        <category>影视音乐</category>
      </categories>
      <tags>
        <tag>迈克尔·乔丹</tag>
        <tag>美剧</tag>
      </tags>
  </entry>
  <entry>
    <title>Emmet 基础使用之 HTML 篇</title>
    <url>/post/4009129433.html</url>
    <content><![CDATA[<blockquote>
<p><strong>Emmet</strong>（以前名为 <em>Zen Coding</em>）是一套面向文本编辑器的插件，它允许通过内容辅助高速度的编写和编辑HTML、XML、XSL和其他结构化的代码格式。</p>
<p>本文主要介绍 HTML 相关快捷操作。</p>
</blockquote>
<span id="more"></span>

<hr>
<h3 id="1-内嵌元素"><a href="#1-内嵌元素" class="headerlink" title="1. 内嵌元素"></a>1. 内嵌元素</h3><h4 id="1-1-gt-子元素"><a href="#1-1-gt-子元素" class="headerlink" title="1.1. &gt; 子元素"></a>1.1. <code>&gt;</code> 子元素</h4><p>如：<code>div&gt;ul&gt;li</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-兄弟元素"><a href="#1-2-兄弟元素" class="headerlink" title="1.2. + 兄弟元素"></a>1.2. <code>+</code> 兄弟元素</h4><p>如：<code>div+p+bq</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="1-3-提升元素级次"><a href="#1-3-提升元素级次" class="headerlink" title="1.3. ^ 提升元素级次"></a>1.3. <code>^</code> 提升元素级次</h4><p>如：<code>div+div&gt;p&gt;span+em</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>追加 <code>^</code> 后，如 <code>div+div&gt;p&gt;span+em^bq</code> 输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>追加多个 <code>^</code> 后，如 <code>div+div&gt;p&gt;span+em^^^bq</code> 输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-n-重复输出-n-个元素"><a href="#1-4-n-重复输出-n-个元素" class="headerlink" title="1.4. *n 重复输出 n 个元素"></a>1.4. <code>*n</code> 重复输出 <strong>n</strong> 个元素</h4><p>如：<code>ul&gt;li*3</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="1-5-分组子元素，用以生成比较复杂的-Dom-结构"><a href="#1-5-分组子元素，用以生成比较复杂的-Dom-结构" class="headerlink" title="1.5. () 分组子元素，用以生成比较复杂的 Dom 结构"></a>1.5. <code>()</code> 分组子元素，用以生成比较复杂的 Dom 结构</h4><p>如：<code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>支持嵌套，如 <code>(div&gt;dl&gt;(dt+dd)*2)+footer&gt;p</code> 输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-元素属性"><a href="#2-元素属性" class="headerlink" title="2. 元素属性"></a>2. 元素属性</h3><h4 id="2-1-元素的后面跟-id-或-class，生成元素的同时将添加指定名称的属性"><a href="#2-1-元素的后面跟-id-或-class，生成元素的同时将添加指定名称的属性" class="headerlink" title="2.1. 元素的后面跟 #id 或 .class，生成元素的同时将添加指定名称的属性"></a>2.1. 元素的后面跟 #id 或 .class，生成元素的同时将添加指定名称的属性</h4><p>如：<code>div#header+div.page+div#footer.class1.class2.class3</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2 class3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="2-2-使用-attr-添加其它属性"><a href="#2-2-使用-attr-添加其它属性" class="headerlink" title="2.2. 使用 [attr] 添加其它属性"></a>2.2. 使用 <code>[attr]</code> 添加其它属性</h4><p>如：<code>td[title=&quot;Hello world!&quot; colspan=3]</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">&quot;Hello world!&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li>方括号内的属性可以添加任意多个。</li>
<li>属性也可以不指定值，如 <code>td[colspan title]</code> 将输出 <code>&lt;td colspan=&quot;&quot; title=&quot;&quot;&gt;&lt;/td&gt;</code>，然后使用 tab 键可依次切换属性填充值。</li>
<li>属性值用单引号或双引号都可以。</li>
<li>如果属性值没有空格，也可以不用添加引号。</li>
</ul>
<h4 id="2-3-使用-给属性值编号"><a href="#2-3-使用-给属性值编号" class="headerlink" title="2.3. 使用 $ 给属性值编号"></a>2.3. 使用 $ 给属性值编号</h4><p>如：<code>ul&gt;li.item$*5</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用多个 $ 可填充 0 ，如 <code>ul&gt;li.item$$$*5</code> 输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>@-</code> 可以改变编号的方向（递增、递减），如 <code>ul&gt;li.item$@-*5</code> 输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>@n</code> 可以修改编号的基数值，如 <code>ul&gt;li.item$@3*5</code> 输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个综合示例，如 <code>ul&gt;li.item$@-3*5</code> 输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-元素文本内容"><a href="#3-元素文本内容" class="headerlink" title="3. 元素文本内容"></a>3. 元素文本内容</h3><h4 id="3-1-使用-text-跟元素添加内容"><a href="#3-1-使用-text-跟元素添加内容" class="headerlink" title="3.1 使用 {text} 跟元素添加内容"></a>3.1 使用 <code>&#123;text&#125;</code> 跟元素添加内容</h4><p>如：<code>a&#123;Click me&#125;</code></p>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个复杂点的例子，如 <code>p&gt;&#123;Click &#125;+a&#123;here&#125;+&#123; to continue&#125;</code> 输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to continue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提示：<code>&#123;text&#125;</code> 放在紧跟着元素分隔符的右侧，则不会影响父级的 Dom 级次。如上例中的 <code>p&gt;&#123;Click &#125;</code> 不会影响 <strong>&gt;</strong> 右边的所有元素作为 <strong>p</strong> 的下级。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>Emmet</tag>
        <tag>Zen Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew 常用命令</title>
    <url>/post/980470740.html</url>
    <content><![CDATA[<h3 id="1-安装、卸载"><a href="#1-安装、卸载" class="headerlink" title="1. 安装、卸载"></a>1. 安装、卸载</h3><h4 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h4><p>依赖：</p>
<ul>
<li>Intel CPU</li>
<li>OS X 10.10 or higher</li>
<li>Command Line Tools (CLT) for Xcode: <code>xcode-select --install</code>, developer.apple.com/downloads or Xcode</li>
<li>A Bourne-compatible shell for installation (e.g. bash or zsh)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-卸载"><a href="#1-2-卸载" class="headerlink" title="1.2. 卸载"></a>1.2. 卸载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><h4 id="2-1-信息查询"><a href="#2-1-信息查询" class="headerlink" title="2.1. 信息查询"></a>2.1. 信息查询</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Homebrew 版本</span></span><br><span class="line">➜  ~ brew -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的软件</span></span><br><span class="line">➜  ~ brew list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器打开 Homebrew 官网</span></span><br><span class="line">➜  ~ brew home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的详细信息</span></span><br><span class="line">➜  ~ brew info 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测系统中与Homebrew有关的潜在问题</span></span><br><span class="line">➜  ~ brew doctor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的所有版本</span></span><br><span class="line">➜  ~ brew list --versions | grep 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以树形展示所有已安装包的依赖</span></span><br><span class="line">➜  ~ brew deps --installed --tree</span><br></pre></td></tr></table></figure>

<h4 id="2-2-查找软件包"><a href="#2-2-查找软件包" class="headerlink" title="2.2. 查找软件包"></a>2.2. 查找软件包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ brew search git</span><br><span class="line">➜  ~ brew search /^git$/</span><br></pre></td></tr></table></figure>

<h4 id="2-3-安装软件包"><a href="#2-3-安装软件包" class="headerlink" title="2.3. 安装软件包"></a>2.3. 安装软件包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ brew install 包名</span><br></pre></td></tr></table></figure>

<h4 id="2-4-卸载软件包"><a href="#2-4-卸载软件包" class="headerlink" title="2.4. 卸载软件包"></a>2.4. 卸载软件包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ brew uninstall 包名</span><br></pre></td></tr></table></figure>

<h4 id="2-5-自身更新"><a href="#2-5-自身更新" class="headerlink" title="2.5. 自身更新"></a>2.5. 自身更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ brew update</span><br></pre></td></tr></table></figure>

<h4 id="2-6-更新包"><a href="#2-6-更新包" class="headerlink" title="2.6. 更新包"></a>2.6. 更新包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看哪些包有新版本可更新</span></span><br><span class="line">➜  ~ brew outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有包</span></span><br><span class="line">➜  ~ brew upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新指定包</span></span><br><span class="line">➜  ~ brew upgrade 包名</span><br></pre></td></tr></table></figure>

<h4 id="2-7-清理旧的升级包"><a href="#2-7-清理旧的升级包" class="headerlink" title="2.7. 清理旧的升级包"></a>2.7. 清理旧的升级包</h4><blockquote>
<p>⚠️ 注意：如果一个包当前有可更新的版本没有更新，执行清理时候只会提示一个警告，而不会执行清理操作。需要先升级到最新版本，值执行清理。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看哪些包可清理</span></span><br><span class="line">➜  ~ brew cleanup -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理所有</span></span><br><span class="line">➜  ~ brew cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理指定包</span></span><br><span class="line">➜  ~ brew cleanup 包名</span><br></pre></td></tr></table></figure>

<h4 id="2-8-锁定不想更新的包"><a href="#2-8-锁定不想更新的包" class="headerlink" title="2.8. 锁定不想更新的包"></a>2.8. 锁定不想更新的包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">➜  ~ brew pin 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">➜  ~ brew unpin 包名</span><br></pre></td></tr></table></figure>

<h4 id="2-9-关联包"><a href="#2-9-关联包" class="headerlink" title="2.9. 关联包"></a>2.9. 关联包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理无效的关联，且清理与之相关的位于/Applications和~/Applications中的无用App链接</span></span><br><span class="line">➜  ~ brew prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定软件的安装文件symlink到Homebrew上</span></span><br><span class="line">➜  ~ brew link 包名</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>开发工具</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains全系列产品30天试用期重置插件</title>
    <url>/post/1904459089.html</url>
    <content><![CDATA[<blockquote>
<p>此插件来自 <a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html">https://zhile.io</a>，仅供学习研究项目的，请勿无休止的一直试用，更多说明信息详见原文。</p>
</blockquote>
<blockquote>
<p>备注：这是个学习研究项目，<strong>只支持到 2021.2.2 及以下版本</strong>。因为大佬觉得这东西已经搞得挺好，没啥好学习研究的了，所以转到了新的学习领域，针对 2021.3.x+ 参照最新方法 《<a href="/post/3632131313.html">一个NB闪闪的开源库ja-netfilter</a>》。</p>
</blockquote>
<h3 id="1-如何安装"><a href="#1-如何安装" class="headerlink" title="1. 如何安装"></a>1. 如何安装</h3><h4 id="1-1-在线安装"><a href="#1-1-在线安装" class="headerlink" title="1.1. 在线安装"></a>1.1. 在线安装</h4><ol>
<li>打开插件市场 <code>Settings/Preferences... -&gt; Plugins</code>；</li>
<li>手动添加第三方插件仓库地址：<code>https://plugins.zhile.io</code>；</li>
<li>搜索插件名称 <code>IDE Eval Reset</code> 进行安装。</li>
</ol>
<h4 id="1-2-下载安装"><a href="#1-2-下载安装" class="headerlink" title="1.2. 下载安装"></a>1.2. 下载安装</h4><ol>
<li><p>点击 <a href="https://plugins.zhile.io/files/ide-eval-resetter-2.2.4-4959c6.zip">ide-eval-resetter-2.2.4-4959c6.zip</a> 下载，或到<a href="https://gitee.com/pengzhile/ide-eval-resetter">官方仓库</a>下载最新版本（注意：如果是 <code>macOS</code> 系统，可能会下载完自动解压）。</p>
</li>
<li><p>通常可以直接把下载到的 zip 包拖进 IDE 窗口进行插件的安装。如果无法拖动安装，可以在 <code>Settings/Preferences... -&gt; Plugins</code> 里选择手动安装（<code>Install Plugin From Disk...</code>）。</p>
</li>
</ol>
<span id="more"></span>

<h3 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2. 如何使用"></a>2. 如何使用</h3><p>一般来说，在IDE窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（25 天）没有重置，给通知让你选择。如果是初次安装因为无法获取上次重置时间，会直接给予提示。</p>
<p>也可以手动唤出插件的主界面：</p>
<ul>
<li>如果 IDE 没有打开项目，在 Welcome 界面点击菜单 <code>Get Help -&gt; Eval Reset</code></li>
<li>如果 IDE 打开了项目，点击菜单 <code>Help -&gt; Eval Reset</code></li>
</ul>
<p>唤出的插件主界面中包含了一些显示信息，2 个按钮，1 个勾选项：</p>
<ul>
<li>按钮 <code>Reload</code>：用来刷新界面上的显示信息。</li>
<li>按钮 <code>Reset</code> ：点击会询问「是否重置试用信息并重启 IDE」。选择 <code>Yes</code> 则执行重置操作并重启 IDE 生效；选择 <code>No</code> 则什么也不做（此为<strong>手动重置</strong>方式）。</li>
<li>勾选项 <code>Auto reset before per restart</code>：如果勾选了，则自勾选后每次重启/退出 IDE 时会自动重置试用信息，你无需做额外的事情（此为<strong>自动重置</strong>方式）。</li>
</ul>
<h3 id="3-如何更新"><a href="#3-如何更新" class="headerlink" title="3. 如何更新"></a>3. 如何更新</h3><blockquote>
<p>注意：插件更新需要重启 IDE。</p>
</blockquote>
<h4 id="3-1-插件更新机制（推荐）"><a href="#3-1-插件更新机制（推荐）" class="headerlink" title="3.1. 插件更新机制（推荐）"></a>3.1. 插件更新机制（推荐）</h4><p>IDE 会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</p>
<p>点击 IDE 的 <code>Check for Updates...</code> 菜单可以手动检测 IDE 和所安装插件的更新。</p>
<h4 id="3-2-手动更新"><a href="#3-2-手动更新" class="headerlink" title="3.2. 手动更新"></a>3.2. 手动更新</h4><p>从本页面（不一定最新）或<a href="https://gitee.com/pengzhile/ide-eval-resetter">官方仓库</a>下载最新的插件 zip 包安装更新。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>JetBrains</tag>
        <tag>IDEA</tag>
        <tag>PHPStorm</tag>
        <tag>WebStorm</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains全系列软件激活教程</title>
    <url>/post/1936578867.html</url>
    <content><![CDATA[<blockquote>
<p>声明：本文来源网络，主要参考 <a href="https://zhile.io/2018/08/25/jetbrains-license-server-crack.html">zhile.io</a>，只做个人学习研究之用，不得用于商业用途！</p>
<ul>
<li><p>若资金允许，请<a href="https://www.jetbrains.com/idea/buy/">点击链接</a>购买正版。</p>
</li>
<li><p>学生凭学生证可<a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-%E5%AD%A6%E7%94%9F%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F">免费申请</a>正版授权。</p>
</li>
<li><p>创业公司可<a href="https://www.jetbrains.com/shop/eform/startup">5折购买</a>正版授权。</p>
</li>
</ul>
</blockquote>
<span id="more"></span>

<blockquote>
<p>适应于最新版的激活方式，请参照：<a href="/post/1904459089.html">JetBrains全系列产品30天试用期重置插件</a></p>
</blockquote>
<h3 id="支持版本"><a href="#支持版本" class="headerlink" title="支持版本"></a>支持版本</h3><p>该方法声称支持 <strong>2020.1</strong> 及以下版本，已测试：</p>
<ul>
<li>IDEA 2019.3.4</li>
<li>PHPStorm 2019.3.4</li>
<li>WebStorm 2020.1</li>
<li>Pycharm 2020.1</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><strong>版本</strong>：<code>v3.2.0</code><br><strong>更新</strong>：<code>2020-04-10</code><br><strong>sha1sum</strong>: <code>832e9a35df3ea690d4165099619d1adac725e144</code></p>
<ul>
<li><a href="https://pan.baidu.com/s/1AdUjEPMVDplsK3I0LFajEw">百度网盘下载</a>，提取码：<code>ijtm</code></li>
</ul>
<p>具体使用方法已写在压缩包的 <code>README.pdf</code> / <code>README.txt</code> 内（包内另附操作截图）。<br>下载的包中都是带有 <code>important.txt</code> 的，缺失这个文件会不定时有弹框出现，请注意看弹框内容。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>JetBrains</tag>
        <tag>IDEA</tag>
        <tag>PHPStorm</tag>
        <tag>WebStorm</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains系软件设置和使用技巧笔记</title>
    <url>/post/2109815221.html</url>
    <content><![CDATA[<blockquote>
<p>本文适用于 JetBrains 系软件，包含通用及单个软件的设置、使用技巧等，主要是在工作使用过程中遇到的问题及解决方式笔记。</p>
</blockquote>
<h3 id="1-设置"><a href="#1-设置" class="headerlink" title="1. 设置"></a>1. 设置</h3><h4 id="1-1-通用设置"><a href="#1-1-通用设置" class="headerlink" title="1.1. 通用设置"></a>1.1. 通用设置</h4><h5 id="关闭自动保存"><a href="#关闭自动保存" class="headerlink" title="关闭自动保存"></a>关闭自动保存</h5><p>菜单：<code>Appearance &amp; Behavior &gt; System Settings &gt; Synchronization</code></p>
<p>取消勾选：</p>
<ul>
<li><input disabled="" type="checkbox"> <code>Synchronize files on frame or editor tab activation</code></li>
<li><input disabled="" type="checkbox"> <code>Save files on frame deactiation</code></li>
<li><input disabled="" type="checkbox"> <code>Use &quot;safe write&quot;(save changes to a temporary file first)</code></li>
</ul>
<h5 id="打开修改文件未保存标识"><a href="#打开修改文件未保存标识" class="headerlink" title="打开修改文件未保存标识"></a>打开修改文件未保存标识</h5><p>菜单：<code>Editor &gt; General &gt; Editor Tabs &gt; Appearance</code></p>
<p>勾选：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <code>Mark modified (*)</code></li>
</ul>
<span id="more"></span>

<h5 id="注释时使用缩进（而不直接添加到行首）"><a href="#注释时使用缩进（而不直接添加到行首）" class="headerlink" title="注释时使用缩进（而不直接添加到行首）"></a>注释时使用缩进（而不直接添加到行首）</h5><ol>
<li><p>菜单：<code>Editor &gt; Code Style &gt; Java &gt; Wrapping and Braces &gt; Keep when reformatting</code></p>
<p> 取消勾选</p>
<ul>
<li><input disabled="" type="checkbox"> <code>Comment at first column</code></li>
</ul>
</li>
<li><p>菜单：<code>Editor &gt; Code Style &gt; Java &gt; Code Generation &gt; Comment Code</code></p>
<p> 取消勾选</p>
<ul>
<li><input disabled="" type="checkbox"> <code>Line comment at first column</code></li>
<li><input disabled="" type="checkbox"> <code>Block comment at first column</code></li>
</ul>
<p> 如果需要在注释的开始位置后面追加一个空格（比如 <code>// 这是注释</code>），则勾选</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <code>Add a space at comment start</code></li>
</ul>
</li>
</ol>
<h5 id="设置列宽提示线"><a href="#设置列宽提示线" class="headerlink" title="设置列宽提示线"></a>设置列宽提示线</h5><p>菜单：<code>Editor &gt; Code Style &gt; General</code></p>
<p>分别修改：</p>
<ul>
<li><code>Hard wrap at</code></li>
<li><code>Visual guides</code></li>
</ul>
<h5 id="取消一些警告提示"><a href="#取消一些警告提示" class="headerlink" title="取消一些警告提示"></a>取消一些警告提示</h5><ul>
<li><p>关闭拼写检查</p>
<ul>
<li><input disabled="" type="checkbox"> <code>Editor &gt; Code Style &gt; Inspections &gt; Spelling</code></li>
</ul>
</li>
</ul>
<h4 id="1-2-IDEA设置"><a href="#1-2-IDEA设置" class="headerlink" title="1.2. IDEA设置"></a>1.2. IDEA设置</h4><h5 id="取消一些警告提示-1"><a href="#取消一些警告提示-1" class="headerlink" title="取消一些警告提示"></a>取消一些警告提示</h5><ul>
<li><p><code>field injection is not recommended</code></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <code>Spring &gt; Spring Core &gt; Code &gt; Autowiring for Bean Class</code> 设置 <code>Severity</code> 为 <code>Warning</code>。</li>
</ul>
</li>
<li><p><code>could not autowire. No beans of &#39;SysLogininforMapper&#39; type found.</code></p>
<ul>
<li><input disabled="" type="checkbox"> <code>Spring &gt; Spring Core &gt; Code &gt; Field injection warning</code></li>
</ul>
</li>
<li><p>去除 MyBatis XML 文件中的黄、绿背景</p>
<ul>
<li><input disabled="" type="checkbox"> <code>Prefernces &gt; Editor &gt; Inspections &gt; SQL &gt; No data sources configure</code></li>
<li><input disabled="" type="checkbox"> <code>Prefernces &gt; Editor &gt; Inspections &gt; SQL &gt; SQL dialect detection</code></li>
<li><input disabled="" type="checkbox"> <code>Prefernces &gt; Editor &gt; Colors Scheme &gt; General &gt; Code &gt; Injected language fragment &gt; Background</code></li>
</ul>
</li>
</ul>
<h4 id="1-3-WebStorm设置"><a href="#1-3-WebStorm设置" class="headerlink" title="1.3. WebStorm设置"></a>1.3. WebStorm设置</h4><h5 id="不识别Vue项目的-路径别名"><a href="#不识别Vue项目的-路径别名" class="headerlink" title="不识别Vue项目的@路径别名"></a>不识别Vue项目的@路径别名</h5><ol>
<li><p>确保 <code>vue.config.js</code> 中有如下设置：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="comment">// 主要是这部分</span></span><br><span class="line">      <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>打开 WebStorm 的系统设置，搜索关键字 <code>Webpack</code>;</p>
</li>
<li><p>手动选择 Webpack 的配置文件，如：<code>/Users/user1/www/demo-vue/node_modules/@vue/cli-service/webpack.config.js</code>，其中：</p>
<ul>
<li>必须是<strong>绝对路径</strong>。</li>
<li><code>node_modules/@vue/cli-service/webpack.config.js</code> 在项目安装好之后才有。</li>
</ul>
</li>
<li><p>保存，稍等一会儿。</p>
</li>
</ol>
<h3 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2. 快捷键"></a>2. 快捷键</h3><h4 id="2-1-通用快捷键"><a href="#2-1-通用快捷键" class="headerlink" title="2.1. 通用快捷键"></a>2.1. 通用快捷键</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前文件中查找字符</span></span><br><span class="line"><span class="built_in">command</span> + F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局查找</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前文件中查找并替换</span></span><br><span class="line"><span class="built_in">command</span> + R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局查找并替换</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最近打开过的文件</span></span><br><span class="line"><span class="built_in">command</span> + E</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最近编辑过的文件</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + E</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据类名快速打开文件</span></span><br><span class="line"><span class="built_in">command</span> + O</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据文件名快速打开文件</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + O</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据方法名打开文件</span></span><br><span class="line"><span class="built_in">command</span> + alt + O</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转到行和列，输入如：200:3 表示第 200 行，第3列</span></span><br><span class="line"><span class="built_in">command</span> + L</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前文件绝对路径</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从历史记录中粘贴</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速查看、选择当前类结构</span></span><br><span class="line"><span class="built_in">command</span> + F12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳到顶部面包屑导航条，使用方向键切换，回车下拉菜单</span></span><br><span class="line"><span class="built_in">command</span> + ⬆️</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名，及所有引用它的地方</span></span><br><span class="line"><span class="built_in">shift</span> + F6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折叠整个类，展开方法，方法体还折叠</span></span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + -</span><br><span class="line"><span class="built_in">command</span> + +</span><br></pre></td></tr></table></figure>

<h4 id="2-2-IDEA快捷键"><a href="#2-2-IDEA快捷键" class="headerlink" title="2.2. IDEA快捷键"></a>2.2. IDEA快捷键</h4><h5 id="类相关（在一个类文件中）"><a href="#类相关（在一个类文件中）" class="headerlink" title="类相关（在一个类文件中）"></a>类相关（在一个类文件中）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速修复</span></span><br><span class="line"><span class="comment"># 在类名、属性名、方法名上执行</span></span><br><span class="line">alt + enter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以选择快速生成当前类的构造方法、getter、setter、重写方法等</span></span><br><span class="line">ctrl + enter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速选择需要重写的方法</span></span><br><span class="line">ctrl + o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除未使用的引入包</span></span><br><span class="line">ctrl + alt + o</span><br></pre></td></tr></table></figure>

<h3 id="3-使用技巧"><a href="#3-使用技巧" class="headerlink" title="3. 使用技巧"></a>3. 使用技巧</h3><h4 id="3-1-通用"><a href="#3-1-通用" class="headerlink" title="3.1. 通用"></a>3.1. 通用</h4><h5 id="快速定位当前打开文件的位置"><a href="#快速定位当前打开文件的位置" class="headerlink" title="快速定位当前打开文件的位置"></a>快速定位当前打开文件的位置</h5><ul>
<li>方式一：单击侧边栏顶部的「<strong>准星</strong>」按钮（如果没有，则是开启了方式二）；</li>
<li>方式二：单击侧边栏顶部的「<strong>设置</strong>」按钮，勾选「Always Select Opened File」，则打开新文件时，左侧树形菜单自动定位目录位置。</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>JetBrains</tag>
        <tag>IDEA</tag>
        <tag>PHPStorm</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>一个NB闪闪的开源库ja-netfilter</title>
    <url>/post/3632131313.html</url>
    <content><![CDATA[<p>正如标题，这是一个NB闪闪的开源库，名字为 <code>ja-netfilter</code>，关于这个开源库的详细说明，参见这里 <a href="https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html">zhile.io</a></p>
<p>本文以 IDEA 为例，说一下这个工具怎么用：</p>
<blockquote>
<p>适用版本：jb 2021.3.x +<br>这之前的版本，还可以继续使用 <a href="/post/1904459089.html">IDE Eval Reset</a> 插件。</p>
</blockquote>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>从仓库下载最新程序包 <a href="https://gitee.com/ja-netfilter/ja-netfilter/releases">https://gitee.com/ja-netfilter/ja-netfilter/releases</a></p>
<h3 id="2-解压后开始配置"><a href="#2-解压后开始配置" class="headerlink" title="2. 解压后开始配置"></a>2. 解压后开始配置</h3><h4 id="2-1-配置-xx-vmoptions"><a href="#2-1-配置-xx-vmoptions" class="headerlink" title="2.1. 配置 xx.vmoptions"></a>2.1. 配置 xx.vmoptions</h4><p>以下两种方式可选：</p>
<ul>
<li>方式一：手动定位到对应软件的 <code>xx.vmoptions</code> 文件，添加下面这一行 <code>-javaagent:/absolute/path/to/ja-netfilter.jar</code>；</li>
<li>方式二：执行命令 <code>java -jar /path/to/ja-netfilter.jar</code> 进行注入；</li>
</ul>
<p>如果你使用最新的 Java 17，还需要添加以下两行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改-config-目录中对应的配置文件"><a href="#2-2-修改-config-目录中对应的配置文件" class="headerlink" title="2.2. 修改 config 目录中对应的配置文件"></a>2.2. 修改 config 目录中对应的配置文件</h4><p>这里以 jb 软件为例，主要修改如下：</p>
<p><strong>dns.conf</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[DNS]</span></span><br><span class="line">EQUAL,jetbrains.com</span><br><span class="line">EQUAL,brucege.com</span><br><span class="line">EQUAL,plugin.obroom.com</span><br></pre></td></tr></table></figure>

<p><strong>power.conf</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Result]</span></span><br><span class="line"><span class="comment">; Suit 220701</span></span><br><span class="line">EQUAL,108391492724719606277191711676038310454333436786970899072879934267610324870870961974305689698304529291751931883693569275416671653649715395540162187908455880751887548211257780817773830153477469379663893839249632010489688404104740814832791608983255964373246023808678041003248593298915323068020141515280275870731964298697511434302901212533563571472947179437111243030002421474283363073021442715554541318313064598900684758246291687123240210640543678544269324094608551763049140564128299834843381841274260516105408318037686490277144538983963856617365418526798235932271319705894170543971766101775628884107261100637290512593943587295268337137890353216997114446658051251047509442298463526766678103653729776506979657957966027949436493606289520405331110453990512846697802196701678785414928082416405650857741201229183421400567636999723106788808933737428330992184832395299929033666381663232693108552887968738513151493044369308652310586803160326722967115451573652070286501044484503083240302303438554529551204609089966636092666792347623413483134664670641246129954999815529917163967761617333572567787618346281658716181608204191963817312534492517480248086896060880038259592723773361709406277837609546030729611710076711450268767610513506889086815865283,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353-&gt;31872219281407242025505148642475109331663948030010491344733687844358944945421064967310388547820970408352359213697487269225694990179009814674781374751323403257628081559561462351695605167675284372388551941279783515209238245831229026662363729380633136520288327292047232179909791526492877475417113579821717193807584807644097527647305469671333646868883650312280989663788656507661713409911267085806708237966730821529702498972114194166091819277582149433578383639532136271637219758962252614390071122773223025154710411681628917523557526099053858210363406122853294409830276270946292893988830514538950951686480580886602618927728470029090747400687617046511462665469446846624685614084264191213318074804549715573780408305977947238915527798680393538207482620648181504876534152430149355791756374642327623133843473947861771150672096834149014464956451480803326284417202116346454345929350148770746553056995922154382822307758515805142704373984019252210715650875853634697920708113806880196144197384637328982263167395073688501517286678083973976140696077590122053014085412828620051470085033364773099146103525313018873319293728800442101520384088109603555959893639842091339193857485407672132882577840295039058621747654642202620767068924079813640067442975</span><br><span class="line">EQUAL,820563695837794062003013052431566406311160519459527861500703856031109754642079235583817632608600538427437617602262999609013304012507897813563718719720856177652850327961467224291449089135680755288577504536702620359129295482393325960269624080511269764101665311320956470015613044808066402568798693281462244978128867910557946603386047729514659336854309276651962414690113978708520364504328849058883417158186751315886080272834506502242438553969507697483002851232580211232007222134718334176577725640440791904351641362718652452524224349310214787836932692511798322090590491010282507213990514918561984012596822561474687437143,65537,24521566609765666164947017540032021599255701751860227819512057581863724253675446227963662825786216373422117712052647819939094618512591273903731385388945941620956494535886991119537555521717683289574562412249381695575366776196301290570457146763799416784211789775179394339350479765228864277544252534115220169733628333836919758657866915165201332480467127194998195481209996470680276955438320553419743409285076366446411459237915876713514676197204668785300100857270615348770478845912795954436677863461158442534283102154396294509903255539003316675136070586165787963286744036831353098283719024130881707718857451774498022915819-&gt;986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116366629850199080495560991841329893037291900147497007197055572787780928474439121332736213562021554409579596714683101113281773829</span><br><span class="line"></span><br><span class="line"><span class="section">[Args]</span></span><br><span class="line">EQUAL,65537,24773058818499217187577663886010908531303294206336895556072197892590450942803807164562754911175164262596715237551312004078542654996496301487027034803410086499747369353221485073240039340641397198525027728751956658900801359887190562885573922317930300068615009483578963467556425525328780085523172495307229112069939166202511721671904748968934606589702999279663332403655662225374084460291376706916679151764149324177444374590606643838366605181996272409014933080082205048098737253668016260658830645459388519595314928290853199112791333551144805347785109465401055719331231478162870216035573012645710763533896540021550083104281-&gt;3,24773058818499217187577663886010908531303294206336895556072197892590450942803807164562754911175164262596715237551312004078542654996496301487027034803410086499747369353221485073240039340641397198525027728751956658900801359887190562885573922317930300068615009483578963467556425525328780085523172495307229112069939166202511721671904748968934606589702999279663332403655662225374084460291376706916679151764149324177444374590606643838366605181996272409014933080082205048098737253668016260658830645459388519595314928290853199112791333551144805347785109465401055719331231478162870216035573012645710763533896540021550083104281</span><br><span class="line">EQUAL,65537,112990544699464667379805164176191940546242208117491544203358534026745357579006792084392734842374059845912387257283707238075863959850326589016727302942528968334782467185179054600102556548201786183972872728459057873984508534595649484729912852626347880177196897414735118804133099744542685440257890337513274043513-&gt;3,112990544699464667379805164176191940546242208117491544203358534026745357579006792084392734842374059845912387257283707238075863959850326589016727302942528968334782467185179054600102556548201786183972872728459057873984508534595649484729912852626347880177196897414735118804133099744542685440257890337513274043513</span><br></pre></td></tr></table></figure>

<p><strong>url.conf</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[URL]</span></span><br><span class="line">PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action</span><br></pre></td></tr></table></figure>

<h4 id="2-3-启动软件激活"><a href="#2-3-启动软件激活" class="headerlink" title="2.3. 启动软件激活"></a>2.3. 启动软件激活</h4><p>打开软件后，从这里 <a href="https://jetbra.in/s">https://jetbra.in/s</a> 找到对应软件的 key 进行激活。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开发工具</tag>
        <tag>JetBrains</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack入门及常用配置速查</title>
    <url>/post/2411996818.html</url>
    <content><![CDATA[<blockquote>
<p>Webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。主要针对js、css、html、图片、字体文件，进行压缩、优化、合并等操作，以实现前端项目的工程化。</p>
</blockquote>
<h2 id="1-Hello-Webpack"><a href="#1-Hello-Webpack" class="headerlink" title="1. Hello Webpack"></a>1. Hello Webpack</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化项目</span></span><br><span class="line">➜  npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 webpack</span></span><br><span class="line"><span class="comment"># --save-dev 可以用 -D 代替</span></span><br><span class="line">➜  npm i webpack webpack-cli --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在 package.json 中添加编译命令</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="1-2-添加源码文件"><a href="#1-2-添加源码文件" class="headerlink" title="1.2. 添加源码文件"></a>1.2. 添加源码文件</h3><p>初始状态下（未进行任何配置），webpack 会查找项目到 <code>/src/index.js</code> 文件作为打包入口，并且输出到 <code>/dist</code> 目录下，所以需要先添加源码文件，才能执行打包操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello webpack`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-3-执行打包"><a href="#1-3-执行打包" class="headerlink" title="1.3. 执行打包"></a>1.3. 执行打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  npm run build</span><br><span class="line"></span><br><span class="line">&gt; webpack-demo1@1.0.0 build /Users/sunqiang/www/learning/webpack/webpack-demo1</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">[webpack-cli] Compilation finished</span><br><span class="line">asset main.js 29 bytes [emitted] [minimized] (name: main)</span><br><span class="line">./src/index.js 29 bytes [built] [code generated]</span><br><span class="line">webpack 5.3.2 compiled successfully <span class="keyword">in</span> 315 ms</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2-核心功能点"><a href="#2-核心功能点" class="headerlink" title="2. 核心功能点"></a>2. 核心功能点</h2><h3 id="2-1-entry、output"><a href="#2-1-entry、output" class="headerlink" title="2.1. entry、output"></a>2.1. entry、output</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 指定 打包入口 文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/entry/file.js&#x27;</span></span><br><span class="line">  <span class="comment">// 指定 打包输出 文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">home</span>: <span class="string">&#x27;./path/to/entry/home.js&#x27;</span>,</span><br><span class="line">    <span class="attr">front</span>: <span class="string">&#x27;./path/to/entry/front.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// 通过 [] 占位符确保文件名唯一；name 对应入口文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-loaders"><a href="#2-2-loaders" class="headerlink" title="2.2. loaders"></a>2.2. loaders</h3><p>常用举例：</p>
<ul>
<li><code>bable-loader</code> 转换 ES6、ES7 新语法</li>
<li><code>css-loader</code> .css 文件的加载和解析</li>
<li><code>less-loader</code> Less 转 CSS</li>
<li><code>ts-loader</code> 将 TS 转换成 JS</li>
<li><code>file-loader</code> 进行图片、字体等的打包</li>
<li><code>raw-loader</code> 将文件以字符串多形式导入</li>
<li><code>thread-loader</code> 多进程打包 CSS 和 JS</li>
</ul>
<p>配置示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 指定匹配规则</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        <span class="comment">// 指定使用的 loader</span></span><br><span class="line">        use: <span class="string">&#x27;raw-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-plugins"><a href="#2-3-plugins" class="headerlink" title="2.3. plugins"></a>2.3. plugins</h3><p>用途：</p>
<ul>
<li>用于 bundle 文件的优化，资源管理和环境变量引入（loaders 解决不了的所有事情）</li>
<li>作用于整个构建过程</li>
</ul>
<p>常用举例：</p>
<ul>
<li><code>CommonsChunkPlugin</code> 将 chunks 相同的模块代码提取成公共 js</li>
<li><code>ClearWebpackPlugin</code> 清理构建目录</li>
<li><code>ExtracTextWebpackPlugin</code> 将 CSS 从 bundle 中提取成一个独立的 CSS 文件</li>
<li><code>CopyWebpackPlugin</code> 将文件或文件夹拷贝到构建输出目录</li>
<li><code>HtmlWebpackPlugin</code> 创建 HTML 文件去承载输出的 bundle</li>
<li><code>UglifyjsWebpackPlugin</code> 压缩 JS</li>
<li><code>ZipWebpackPlugin</code> 打包出的资源生成一个 zip 包</li>
</ul>
<p>配置示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-mode"><a href="#2-4-mode" class="headerlink" title="2.4. mode"></a>2.4. mode</h3><p>需要 <code>Webpack v4+</code> 版本。</p>
<p>用于指定当前构建环境（可使用 Webpack 内置函数）：</p>
<ul>
<li><code>development</code><ul>
<li>设置 <code>process.env.NODE_ENV</code> 的值为 <code>development</code></li>
<li>开启 <code>NamedChunksPlugin</code>、<code>NamedModulesPlugin</code>。</li>
</ul>
</li>
<li><code>production（默认）</code><ul>
<li>设置 <code>process.env.NODE_ENV</code> 的值为 <code>production</code></li>
<li>开启 <code>FlagDependencyUsagePlugin</code>、<code>FlagIncludedChunksPlugin</code>、<code>ModuleConcatenationPlugin</code>、<code>NoEmitOnErrorsPlugin</code>、<code>OccurrenceOrderPlugin</code>、<code>SideEffectsFlagPlugin</code>、<code>TerserPlugin</code>。</li>
</ul>
</li>
<li><code>none</code><ul>
<li>不开启任何优化选项。</li>
</ul>
</li>
</ul>
<h2 id="3-常用配置"><a href="#3-常用配置" class="headerlink" title="3. 常用配置"></a>3. 常用配置</h2><h3 id="3-1-用-babel-解析-ES6"><a href="#3-1-用-babel-解析-ES6" class="headerlink" title="3.1. 用 babel 解析 ES6"></a>3.1. 用 babel 解析 ES6</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装依赖</span></span><br><span class="line">npm i @babel/core @babel/preset-env babel-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加 .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. webpack.config.js</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /.js$/, <span class="comment">// 匹配所有 js 文件</span></span><br><span class="line">      use: &#x27;babel-loader&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-解析-CSS"><a href="#3-2-解析-CSS" class="headerlink" title="3.2. 解析 CSS"></a>3.2. 解析 CSS</h3><p>说明：</p>
<ul>
<li><code>css-loader</code> 加载 <code>.css</code> 文件，并且转换成 <code>commonjs</code> 对象。</li>
<li><code>style-loader</code> 将样式通过标签插入到 head 中。</li>
</ul>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装依赖</span></span><br><span class="line">npm i style-loader css-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. webpack.config.js</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /.css$/, <span class="comment">// 匹配所有 css 文件</span></span><br><span class="line">      use: [</span><br><span class="line">        &#x27;style-loader&#x27;,</span><br><span class="line">        &#x27;css-loader&#x27;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-解析-Less"><a href="#3-3-解析-Less" class="headerlink" title="3.3. 解析 Less"></a>3.3. 解析 Less</h3><p>说明：</p>
<ul>
<li><code>less-loader</code> 将 less 转为 css</li>
</ul>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装依赖</span></span><br><span class="line">npm i less less-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. webpack.config.js</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /.less$/, <span class="comment">// 匹配所有 less 文件</span></span><br><span class="line">      use: [</span><br><span class="line">        &#x27;style-loader&#x27;,</span><br><span class="line">        &#x27;css-loader&#x27;,</span><br><span class="line">        &#x27;less-loader&#x27;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-解析图片和字体"><a href="#3-4-解析图片和字体" class="headerlink" title="3.4. 解析图片和字体"></a>3.4. 解析图片和字体</h3><p>说明：</p>
<ul>
<li><code>file-loader</code> 用于处理文件。</li>
<li><code>url-loader</code> 在 <code>file-loader</code> 的基础上，增加小资源的自动 Base64 处理。</li>
</ul>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装依赖</span></span><br><span class="line">npm i file-loader url-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. webpack.config.js</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /.(png|svg|jpg|gif)$/, <span class="comment">// 匹配所有 图片 文件</span></span><br><span class="line">      <span class="comment">// use: &#x27;file-loader&#x27;</span></span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: &#x27;url-loader&#x27;, <span class="comment">// 对小于 limit 的图片执行 base64 处理</span></span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10240</span> <span class="comment">// 10K，单位：字节</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: /.(woff|woff2|eot|ttf|otf)$/, <span class="comment">// 匹配所有 字体 文件</span></span><br><span class="line">      use: &#x27;file-loader&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-5-文件监听"><a href="#3-5-文件监听" class="headerlink" title="3.5. 文件监听"></a>3.5. 文件监听</h3><blockquote>
<p>注意：这种方式，浏览器不会自动刷新，可参见下一节通过「热更新」来实现。</p>
</blockquote>
<p>作用：在发现源码发生变化时，自动重新构建新的输出文件。</p>
<p>方式：</p>
<ul>
<li>一、启动 webpack 命令时，追加 <code>--watch</code> 参数。</li>
<li>二、在 <code>webpack.config.js</code> 配置文件中增加 <code>watch: true</code>。</li>
</ul>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 开启监听，默认 false，不进行监听</span></span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 监听选项，在开启监听时生效</span></span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 设置监听要忽略的文件或文件夹，支持正则，默认空</span></span><br><span class="line">    <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="comment">// 监听到变化后等待多长时间去执行构建，默认 300ms</span></span><br><span class="line">    aggregateTimeout: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 判断文件是否发生变化</span></span><br><span class="line">    <span class="comment">// 通过轮训系统指定文件是否发生变化实现，默认每秒检查 1000次</span></span><br><span class="line">    <span class="attr">poll</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-6-热更新"><a href="#3-6-热更新" class="headerlink" title="3.6. 热更新"></a>3.6. 热更新</h3><h4 id="方式一：WDS-webpack-dev-server"><a href="#方式一：WDS-webpack-dev-server" class="headerlink" title="方式一：WDS(webpack-dev-server)"></a>方式一：WDS(webpack-dev-server)</h4><p>说明：</p>
<ul>
<li>不刷新浏览器；</li>
<li>不输出文件（没有磁盘 I/O），而是放在内存中；</li>
</ul>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. package.json 增加启动脚本</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span> <span class="comment">// --open 构建完成后自动打开浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mode: &#x27;</span>development<span class="string">&#x27;, // 注意：热更新仅用于生产环境</span></span><br><span class="line"><span class="string">plugins: [</span></span><br><span class="line"><span class="string">  new webpack.HotModuleReplacementPlugin() // webpack 内置插件</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">devServer: &#123;</span></span><br><span class="line"><span class="string">  contentBase: &#x27;</span>./dist<span class="string">&#x27;, //</span></span><br><span class="line"><span class="string">  hot: true // 开启热更新</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式二：WDM-webpack-dev-middleware"><a href="#方式二：WDM-webpack-dev-middleware" class="headerlink" title="方式二：WDM(webpack-dev-middleware)"></a>方式二：WDM(webpack-dev-middleware)</h4><p>说明：</p>
<ul>
<li>将 webpack 输出文件传输给服务器（Node.js 服务端）；</li>
<li>用于更灵活的定制场景；</li>
</ul>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: config.output.publicPath</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.licten(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;App listening on port 3000. \n&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="3-7-文件指纹（文件后缀）"><a href="#3-7-文件指纹（文件后缀）" class="headerlink" title="3.7. 文件指纹（文件后缀）"></a>3.7. 文件指纹（文件后缀）</h3><p>三种方式：</p>
<ul>
<li><code>Hash</code>：与<strong>整个项目</strong>的构建相关，只要项目文件修改，整个项目构建的 hash 值就会改变。</li>
<li><code>Chunkhash</code>：跟 webpack 打包的 chunk（模块）有关，不同的 entry 会产生不同的 chunkhash 值。</li>
<li><code>Contenthash</code>：根据文件内容来定义 hash文件内容不变，这 contenthash 不变。</li>
</ul>
<p>占位符说明：</p>
<ul>
<li><code>[ext]</code> 资源后缀名</li>
<li><code>[name]</code> 文件名</li>
<li><code>[path]</code> 文件现对路径</li>
<li><code>[folder]</code> 文件所在文件夹</li>
<li><code>[contenthash]</code> 文件内容 hash，默认 md5 生成</li>
<li><code>[hash]</code> 生成的 hash 值</li>
<li><code>[emoji]</code> 一个随机指代文件内容的 emoji</li>
</ul>
<p>配置示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm i mini-css-extract-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name]_[chunkhash].js&#x27;</span>, <span class="comment">// js 文件 + hash</span></span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;[name]_[contenthash:8].css&#x27;</span> <span class="comment">// css 文件 + hash</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;img/[name]_[hash:8].[ext]&#x27;</span> <span class="comment">// 图片文件 + hash</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /.(png|svg|jpg|gif)$/, // 匹配所有 图片 文件</span></span><br><span class="line">      <span class="comment">//   // use: &#x27;file-loader&#x27;</span></span><br><span class="line">      <span class="comment">//   use: [</span></span><br><span class="line">      <span class="comment">//     &#123;</span></span><br><span class="line">      <span class="comment">//       loader: &#x27;url-loader&#x27;, // 对小于 limit 的图片执行 base64 处理</span></span><br><span class="line">      <span class="comment">//       options: &#123;</span></span><br><span class="line">      <span class="comment">//         limit: 10240 // 10K，单位：字节</span></span><br><span class="line">      <span class="comment">//       &#125;</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   ]</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;img/[name]_[hash:8].[ext]&#x27;</span> <span class="comment">// 字体文件 + hash</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.css$/</span>, <span class="comment">// 匹配所有 css 文件</span></span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader, <span class="comment">// &#x27;style-loader&#x27;, // 二者互斥</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.less$/</span>, <span class="comment">// 匹配所有 less 文件</span></span><br><span class="line">        use: [</span><br><span class="line">           MiniCssExtractPlugin.loader, <span class="comment">// &#x27;style-loader&#x27;, // 二者互斥</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="3-8-代码压缩"><a href="#3-8-代码压缩" class="headerlink" title="3.8. 代码压缩"></a>3.8. 代码压缩</h3><h4 id="3-8-1-js-文件"><a href="#3-8-1-js-文件" class="headerlink" title="3.8.1. js 文件"></a>3.8.1. js 文件</h4><p><code>uglifyjs-webpack-plugin</code> 内置</p>
<h4 id="3-8-2-css-文件"><a href="#3-8-2-css-文件" class="headerlink" title="3.8.2. css 文件"></a>3.8.2. css 文件</h4><p><code>optimize-css-assets-webpack-pugin</code> 插件 + cssnano 预处理器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i optimize-css-assets-webpack-pugin cssnano -D</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-pugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">    <span class="attr">assetNameRegExp</span>: <span class="regexp">/\.css$/g</span>,</span><br><span class="line">    cssProcessor: <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h4 id="3-8-3-html-文件"><a href="#3-8-3-html-文件" class="headerlink" title="3.8.3. html 文件"></a>3.8.3. html 文件</h4><p><code>html-webpack-plugin</code> 插件并设置压缩参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i html-webpack-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 一个页面对应一个 HtmlWebpackPlugin（参见多页面打包 HTML）</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">template</span>: path.join(__dirname, <span class="string">&#x27;src/search.html&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;search.html&#x27;</span>, <span class="comment">// 打包出来的 html 文件名</span></span><br><span class="line">    <span class="attr">chunks</span>: [<span class="string">&#x27;search&#x27;</span>], <span class="comment">//</span></span><br><span class="line">    <span class="attr">inject</span>: <span class="literal">true</span>, <span class="comment">// css、js 自动注入 html 中</span></span><br><span class="line">    <span class="attr">minify</span>: &#123; <span class="comment">// 压缩参数</span></span><br><span class="line">      <span class="attr">html5</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 空格</span></span><br><span class="line">      <span class="attr">preserveLineBreaks</span>: <span class="literal">false</span>, <span class="comment">// 换行</span></span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">false</span> <span class="comment">// 删除注释</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="3-9-自动清理构建目录"><a href="#3-9-自动清理构建目录" class="headerlink" title="3.9. 自动清理构建目录"></a>3.9. 自动清理构建目录</h3><p>使用插件 <code>webpack-clean-plugin</code>，默认删除 output 指定的输出目录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i clean-webpack-plugin -D</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">plugins: [</span></span><br><span class="line"><span class="string">  new CleanWebpackPlugin()</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="3-10-CSS3-前缀自动补全"><a href="#3-10-CSS3-前缀自动补全" class="headerlink" title="3.10. CSS3 前缀自动补全"></a>3.10. CSS3 前缀自动补全</h3><p><code>PostCSS</code> autoprefixer 插件，属于打包完成后的后置处理，补全 CSS3 前缀。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i postcss-loader autoprefixer -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.less$/</span>, <span class="comment">// 匹配所有 less 文件</span></span><br><span class="line">      use: [</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class="line">                <span class="attr">browsers</span>: [ <span class="comment">// 设置兼容的浏览器版本</span></span><br><span class="line">                  <span class="string">&#x27;last 2 version&#x27;</span>, <span class="comment">// 最新的 2 个版本</span></span><br><span class="line">                  <span class="string">&#x27;&gt;1%&#x27;</span>, <span class="comment">// 使用人数</span></span><br><span class="line">                  <span class="string">&#x27;ios 7&#x27;</span> <span class="comment">// iOS 7 以上</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>在 PHPStorm 中配置基于 Docker 的 xdebug</title>
    <url>/post/223922994.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍在 PHPStorm 中如何配置 xdebug 进行断点调试，PHP 服务运行在 Docker 容器中。 此外，关于 vscode 的配置方式详见：<a href="https://blog.sqiang.net/post/567149842.html">如何使用 vscode 对基于 Docker 的 PHP 进行断点调试</a></p>
</blockquote>
<span id="more"></span>

<h3 id="1-Docker-设置"><a href="#1-Docker-设置" class="headerlink" title="1. Docker 设置"></a>1. Docker 设置</h3><h4 id="1-1-在镜像中安装-xdebug"><a href="#1-1-在镜像中安装-xdebug" class="headerlink" title="1.1. 在镜像中安装 xdebug"></a>1.1. 在镜像中安装 xdebug</h4><p>Dockerfile 文件中 xdebug 的安装方式如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【xdebug】</span></span><br><span class="line">&amp;&amp; mkdir -p /tmp/xdebug \</span><br><span class="line">&amp;&amp; tar -xf /tmp/xdebug.tar.gz -C /tmp/xdebug --strip-components=<span class="number">1</span> \</span><br><span class="line">&amp;&amp; docker-php-ext-configure /tmp/xdebug --enable-xdebug \</span><br><span class="line">&amp;&amp; docker-php-ext-install /tmp/xdebug \</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里主要使用 <code>docker-php-ext-configure</code> 和 <code>docker-php-ext-install</code> 来安装和启用 PHP 扩展，详见：<a href="https://blog.sqiang.net/post/90967283.html">Docker 中的 PHP 如何安装扩展</a></p>
<p>为了提高构建速度，这里用的是下载好的 xdebug 安装包，你也可以使用如下命令 <code>wget -c https://github.com/xdebug/xdebug/archive/2.7.2.tar.gz</code> 下载。</p>
<h4 id="1-2-配置-xdebug"><a href="#1-2-配置-xdebug" class="headerlink" title="1.2. 配置 xdebug"></a>1.2. 配置 xdebug</h4><p>在 <code>php.ini</code> 中加入以下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[XDebug]</span></span><br><span class="line"><span class="comment">;zend_extension = xdebug.so</span></span><br><span class="line"><span class="attr">xdebug.remote_enable</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.remote_handler</span> = dbgp</span><br><span class="line"><span class="attr">xdebug.remote_port</span> = <span class="number">9001</span></span><br><span class="line"><span class="attr">xdebug.remote_autostart</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.remote_connect_back</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">xdebug.idekey</span> = docker</span><br><span class="line"><span class="attr">xdebug.remote_host</span> = <span class="number">10.254</span>.<span class="number">254.254</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p><code>xdebug.remote_port</code> 指定的端口号需要从从容器中暴露出去；</p>
</li>
<li><p><code>xdebug.remote_host</code> 用来配置宿主机的 IP 地址</p>
<blockquote>
<p>👍 最新：在 Docker v18.03+ 可以直接设置为 <strong>host.docker.internal</strong>，以自动解析宿主机的 IP。</p>
</blockquote>
<p>因为从 Docker 容器中无法通过 <code>localhost</code> 或 <code>127.0.0.1</code> 访问宿主机，所有有以下三种解决办法：</p>
<ul>
<li>方式一：给宿主机设置一个固定 IP；</li>
<li>方式二：每次启动服务前，检查宿主机的 IP 是否发生变化，并修改 <code>php.ini</code> 文件中 xdebug 设置，使其与宿主机保持一致。</li>
<li>方式三：将地址设置为 <code>10.254.254.254</code>，并在宿主机执行命令 <code>ifconfig lo0 alias 10.254.254.254</code> 添加一个回环 IP（<em>注意，这里的修改在宿主机系统重启后会失效</em>）。</li>
</ul>
</li>
</ul>
<h3 id="2-PHPStorm-设置"><a href="#2-PHPStorm-设置" class="headerlink" title="2. PHPStorm 设置"></a>2. PHPStorm 设置</h3><p><img data-src="https://static.sqiang.net/image/post/phpstorm_xdebug1.png?imageView2/0/interlace/1/q/75%7Cimageslim"></p>
<p><img data-src="https://static.sqiang.net/image/post/phpstorm_xdebug2.png?imageView2/0/interlace/1/q/75%7Cimageslim"></p>
<p><img data-src="https://static.sqiang.net/image/post/phpstorm_xdebug3.png?imageView2/0/interlace/1/q/75%7Cimageslim"></p>
<p><img data-src="https://static.sqiang.net/image/post/phpstorm_xdebug4.png?imageView2/0/interlace/1/q/75%7Cimageslim"></p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>刷新项目，看到如下截图则配置成功。</p>
<p><img data-src="https://static.sqiang.net/image/post/phpstorm_xdebug5.png?imageView2/0/interlace/1/q/75%7Cimageslim"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>PHPStorm</tag>
        <tag>XDebug</tag>
      </tags>
  </entry>
  <entry>
    <title>在mac上使用Java反编译工具JD-GUI</title>
    <url>/post/2524245389.html</url>
    <content><![CDATA[<p>JD-GUI 是一款大家耳熟能详的 Java 反编译工具，可以方便的将编译好的 <code>.class</code> 文件反编译为 <code>.java</code> 源码文件，用于开发调试、源码学习等。</p>
<p>官网地址：<a href="http://java-decompiler.github.io/">http://java-decompiler.github.io</a></p>
<p>Git 地址：<a href="https://github.com/java-decompiler/jd-gui">https://github.com/java-decompiler/jd-gui</a></p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><blockquote>
<p>当前最新版本：v1.6.6 @ Dec 25, 2019</p>
</blockquote>
<ul>
<li><a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-1.6.6.jar</a></li>
<li><a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-1.6.6-min.jar</a></li>
<li>Linux <a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-1.6.6.rpm</a></li>
<li>Linux <a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-1.6.6.deb</a></li>
<li>MacOS <a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-osx-1.6.6.tar</a></li>
<li>Windows <a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui-windows-1.6.6.zip</a></li>
</ul>
<h3 id="解决在-macOS-下闪退问题"><a href="#解决在-macOS-下闪退问题" class="headerlink" title="解决在 macOS 下闪退问题"></a>解决在 macOS 下闪退问题</h3><p>需要注意的是，<strong>运行 JD-GUI 所需 Java 版本最高为 JDK 10.0.2（可在官网文档查看）</strong>，否则会出现闪退、无法使用等问题，所以需要修改设置进行指定，下面以 macOS 为例进行说明。</p>
<p>首先，使用如下命令，查看 jdk 的安装路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为我只安装了 Java1.8 和 Java11 两个版本，所以这里需要找 1.8 的路径</span></span><br><span class="line">➜ /usr/libexec/java_home -v 1.8</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br></pre></td></tr></table></figure>

<p>其次，使用文本编辑器打开文件 <code>/Applications/JD-GUI.app/Contents/MacOS/universalJavaApplicationStub.sh</code>，修改如下部分：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># first check system variable &quot;$JAVA_HOME&quot;</span></span><br><span class="line"><span class="comment"># 这里的配置默认找的是系统环境变量中配置的 jdk 版本</span></span><br><span class="line"><span class="comment"># 而我配置的是 Java11，所以直接运行的时候出现闪退而无法使用</span></span><br><span class="line"><span class="comment"># 这里需要直接写死 1.8 的路径</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">	JAVACMD=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/bin/java&quot;</span></span><br></pre></td></tr></table></figure>

<p>保存后，重新打开 JD-GUI.app 即可。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 vscode 启动、调试 Node.js 项目</title>
    <url>/post/2445402303.html</url>
    <content><![CDATA[<blockquote>
<p>适用场景：以 <code>npm run xxx</code> 启动项目，并进行本地开发；在需要调试的时候按 <code>F5</code> 或单击 <code>Debug</code> 相应按钮打开调试模式，进行断点调试。</p>
</blockquote>
<p>涉及 vscode 配置：</p>
<ul>
<li><code>.vscode/tasks.json</code> 启动</li>
<li><code>.vscode/launch.json</code> 调试</li>
</ul>
<p>其实 <code>launch.json</code> 也一样可以启动项目，但是 <code>tasks.json</code> 能实现更多功能，并且将启动、调试分开，会更清晰。</p>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="启动配置-tasks-json"><a href="#启动配置-tasks-json" class="headerlink" title="启动配置 tasks.json"></a>启动配置 tasks.json</h4><ul>
<li>1、直接输入 <code>command + shift + p</code> 进入命令窗口，输入 <code>run task</code> 关键字，然后选择 <code>npm</code>。</li>
<li>2、此时会列出 <code>package.json</code> 中定义的 <code>script</code> 名称，可以选择一个进行编辑；或单击一个直接运行。</li>
</ul>
<p>tasks 的使用说明<a href="https://code.visualstudio.com/docs/editor/tasks">详见官方文档</a>，下面是我在用的一个自定义 task 示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">    <span class="comment">// 这是一个使用 npm 启动项目到示例，指定脚本 dev</span></span><br><span class="line">    <span class="comment">// 注意：设置不同 type 类型时，相应的可用参数是跟随变化的</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;npm: dev&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;script&quot;</span>: <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development DEBUG=xx:mysql:client webpack-cli -w --hide-modules --config webpack.dev.js&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;NODE_ENV&quot;</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;DEBUG&quot;</span>: <span class="string">&quot;xx:mysql:client&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这是另一种启动方式</span></span><br><span class="line">    <span class="comment">// 1. 使用 nvm 切换到指定 Node 版本；2. 紧接着使用 npm 启动；3. 通过 options 追加额外参数</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;start dev&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;source ~/.zshrc &amp;&amp; nvm use 10 &amp;&amp; npm run dev&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;NODE_ENV&quot;</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;DEBUG&quot;</span>: <span class="string">&quot;xx:mysql:*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完之后保存，此时在根目录下自动添加 <code>tasks.json</code> 文件（如果没有 .vscode 目录则先创建）。</p>
<p>使用的时候直接输入 <code>command + shift + p</code>，然后输入 <code>run tasks</code> 回车，选择我们上一步配置并运行过的任务，回车即可，</p>
<blockquote>
<p>提示：在 vscode 中，最近使用过的命令会排在最上面，可以<strong>借助方向键+回车键便捷操作</strong>。</p>
</blockquote>
<h4 id="调试配置-launch-json"><a href="#调试配置-launch-json" class="headerlink" title="调试配置 launch.json"></a>调试配置 launch.json</h4><p>单击左侧边栏的调试图标，创建一个调试配置，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">9230</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个 <code>attach</code> 方式的调试配置，通过监听已启动 Node 服务开放的调试端口（如：9230）进行工作。</p>
<p>设置好之后保存，将生成 <code>.vscode/launch.json</code> 文件。</p>
<p>需要 debug 时，先打好断点，然后按 <code>F5</code> 或单击侧边栏的调试图标，手动启动对应的调试服务。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>vscode</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>借助 EditorConfig 统一编码风格</title>
    <url>/post/1679410750.html</url>
    <content><![CDATA[<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><code>EditorConfig</code> 是一个插件，通过配置文件的形式（<code>.editorconfig</code>），有助于对同一项目的多个开发人员维护一致的编码样式，包括缩进、换行符、文件编码等。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>该插件在部分编辑器中已经捆绑（比如 <code>IDEA</code>、<code>Pycharm</code>、<code>Webstorm</code>、<code>Visual Studio</code> 等），其它的则需要自行安装。</p>
<p>下面是一些主流编辑器的安装参考，其它详见官网。</p>
<ul>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime#readme">Sublime Text</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">Visule Studio Code</a></li>
<li><a href="https://github.com/editorconfig/editorconfig-vim#readme">vim</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/7294-editorconfig">PHPStorm</a></li>
<li><a href="https://github.com/sindresorhus/atom-editorconfig#readme">Atom</a></li>
<li><a href="https://github.com/ncjones/editorconfig-eclipse#readme">Eclipse</a></li>
</ul>
<span id="more"></span>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录创建文件 <code>.editorconfig</code>，添加如下示例配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># editorconfig.org</span></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有文件</span></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="comment"># 缩进格式，space 或 tab</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="comment"># 缩进大小</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br><span class="line"><span class="comment"># 当使用 tab 缩进时的大小</span></span><br><span class="line"><span class="comment">#tab_width = 2</span></span><br><span class="line"><span class="comment"># 换行符，可选 lf、cr、crlf</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="comment"># 文件默认字符集</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="comment"># 清除行尾空格</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 在保存时，文件底部保留一个空行</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以 .md 结尾的文件</span></span><br><span class="line"><span class="section">[*.md]</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以 .php、.py、.java 结尾的文件</span></span><br><span class="line"><span class="section">[*.&#123;php,py,java&#125;]</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Makefile]</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配除路径分隔符（/）之外的任何字符串</td>
</tr>
<tr>
<td>**</td>
<td>匹配任何字符串</td>
</tr>
<tr>
<td>?</td>
<td>匹配任何单个字符</td>
</tr>
<tr>
<td>[name]</td>
<td>匹配名称中的任何单个字符</td>
</tr>
<tr>
<td>[!name]</td>
<td>匹配任何不在名称中的单个字符</td>
</tr>
<tr>
<td>{s1,s2,s3}</td>
<td>匹配给定的任何字符串（以逗号分隔）</td>
</tr>
<tr>
<td>{num1..num2}</td>
<td>匹配num1和num2之间的任何整数，其中num1和num2可以是正数或负数</td>
</tr>
</tbody></table>
<p>更多详细功能，参见官网 <a href="https://editorconfig.org/">https://editorconfig.org/</a>。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>EditorConfig</tag>
      </tags>
  </entry>
  <entry>
    <title>替换国内镜像源让 Homebrew 起飞</title>
    <url>/post/3431125306.html</url>
    <content><![CDATA[<blockquote>
<p>推荐直接使用一键切换脚本：<a href="/post/1031793596.html">一键切换brew国内镜像源</a></p>
</blockquote>
<h3 id="1-基本镜像-formula"><a href="#1-基本镜像-formula" class="headerlink" title="1. 基本镜像 formula"></a>1. 基本镜像 formula</h3><h4 id="1-1-替换"><a href="#1-1-替换" class="headerlink" title="1.1. 替换"></a>1.1. 替换</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参见官网：https://mirror.tuna.tsinghua.edu.cn/help/homebrew</span></span><br><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">➜  brew update</span><br></pre></td></tr></table></figure>

<h4 id="1-2-还原"><a href="#1-2-还原" class="headerlink" title="1.2. 还原"></a>1.2. 还原</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">➜  git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line">➜  brew update</span><br></pre></td></tr></table></figure>

<h3 id="2-二进制预编译包-bottles"><a href="#2-二进制预编译包-bottles" class="headerlink" title="2. 二进制预编译包 bottles"></a>2. 二进制预编译包 bottles</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参见官网：https://mirrors.tuna.tsinghua.edu.cn/help/homebrew-bottles</span></span><br><span class="line"><span class="comment"># 如果你使用的不是 zsh，则替换 .zshrc 为 .bash_profile 或对应的文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>开发工具</tag>
        <tag>Homebrew</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 vscode 对基于 Docker 的 PHP 进行断点调试</title>
    <url>/post/567149842.html</url>
    <content><![CDATA[<h3 id="1-Visual-Studio-Code"><a href="#1-Visual-Studio-Code" class="headerlink" title="1. Visual Studio Code"></a>1. Visual Studio Code</h3><h4 id="1-1-安装主程序"><a href="#1-1-安装主程序" class="headerlink" title="1.1. 安装主程序"></a>1.1. 安装主程序</h4><ul>
<li><p><a href="https://code.visualstudio.com/#alt-downloadshttps://code.visualstudio.com">官方稳定版下载，点击这里</a>，支持以下系统：</p>
<ul>
<li>macOS</li>
<li>Linux</li>
<li>Windows</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h4 id="1-2-安装扩展：PHP-Debug"><a href="#1-2-安装扩展：PHP-Debug" class="headerlink" title="1.2. 安装扩展：PHP Debug"></a>1.2. 安装扩展：PHP Debug</h4><h5 id="1-2-1-安装"><a href="#1-2-1-安装" class="headerlink" title="1.2.1. 安装"></a>1.2.1. 安装</h5><p>按快捷键 <code>cmd + p</code> 或 <code>ctrl + p</code>，然后输入 <code>ext install php debug</code></p>
<p>注意：安装完成后必须重启 vscode。</p>
<h5 id="1-2-2-配置"><a href="#1-2-2-配置" class="headerlink" title="1.2.2. 配置"></a>1.2.2. 配置</h5><p>打开一个 PHP 项目，点击菜单 <strong>Debug &gt; Add Configuration</strong>，或按照下图操作：</p>
<p><img data-src="https://static.sqiang.net/image/post/vscode_php_xdebug1.png"></p>
<p>详细配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Listen for XDebug&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;php&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">9001</span>, <span class="comment">// 对应 XDebug 的配置</span></span><br><span class="line">            <span class="attr">&quot;stopOnEntry&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;pathMappings&quot;</span>: &#123;</span><br><span class="line">                <span class="comment">// &quot;容器中对应的项目地址&quot;: &quot;本机项目地址&quot;</span></span><br><span class="line">                <span class="comment">// 绝对路径</span></span><br><span class="line">                <span class="attr">&quot;/var/www/html/test/&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch currently open script&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;php&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">9001</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置成功后，在项目下会生成一个包含该配置的目录，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .vscode</span><br><span class="line">│   ├── launch.json</span><br><span class="line">├── 其它项目文件</span><br></pre></td></tr></table></figure>

<h3 id="2-Docker-下的-PHP-环境"><a href="#2-Docker-下的-PHP-环境" class="headerlink" title="2. Docker 下的 PHP 环境"></a>2. Docker 下的 PHP 环境</h3><blockquote>
<p>提示：推荐直接克隆我之前封装的一个基于 Docker 的 <a href="https://github.com/whorusq/lnmp-docker">LNMP 环境</a>，当然你也可用使用你自己的 Docker PHP 环境，并根据具体环境对相关内容进行调整。</p>
</blockquote>
<h4 id="2-1-安装、配置-XDebug-扩展"><a href="#2-1-安装、配置-XDebug-扩展" class="headerlink" title="2.1. 安装、配置 XDebug 扩展"></a>2.1. 安装、配置 XDebug 扩展</h4><ul>
<li><p>修改 Dockerfile 文件，安装 XDebug</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&amp;&amp; mkdir -p /tmp/xdebug \</span><br><span class="line">&amp;&amp; wget -c https://github.com/xdebug/xdebug/archive/2.6.0.tar.gz \</span><br><span class="line">&amp;&amp; tar -xf 2.6.0.tar.gz -C /tmp/xdebug --strip-components=1 \</span><br><span class="line">&amp;&amp; docker-php-ext-configure /tmp/xdebug --enable-xdebug \</span><br><span class="line">&amp;&amp; docker-php-ext-install /tmp/xdebug \</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>  修改后，需要重新编译对应的镜像文件，更多安装扩展的方式请参考：<a href="90967283.html">Docker 中的 PHP 如何安装扩展</a></p>
</li>
<li><p>配置 XDebug</p>
<p>  在 php.ini 文件追加以下配置</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension = xdebug.so</span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_handler = dbgp</span><br><span class="line">xdebug.remote_port = 9001</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">xdebug.remote_connect_back = 0</span><br><span class="line">xdebug.idekey = docker</span><br><span class="line">xdebug.remote_host = 192.168.2.14</span><br></pre></td></tr></table></figure>

<p>  说明：</p>
<ul>
<li><code>remote_port</code> 默认 <code>9000</code>，为避免冲突，建议改为 <code>9001</code></li>
<li><code>remote_host</code> 是宿主机的 ip 地址</li>
</ul>
</li>
</ul>
<h4 id="2-2-调整-Nginx-server-配置"><a href="#2-2-调整-Nginx-server-配置" class="headerlink" title="2.2.  调整 Nginx server 配置"></a>2.2.  调整 Nginx server 配置</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> my.test; <span class="comment"># 这里替换你的域名</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html/test;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://php_apache:8091; <span class="comment"># 这里是对应的 apache 容器地址和端口</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">index</span> index.php;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要追加以下两个参数，用以解决在 debug 时 504 超时问题，具体数值可根据需要设置。</p>
<ul>
<li><code>proxy_read_timeout</code></li>
<li><code>proxy_send_timeout</code></li>
</ul>
<h4 id="2-3-暴露-XDebug-通信接口"><a href="#2-3-暴露-XDebug-通信接口" class="headerlink" title="2.3. 暴露 XDebug 通信接口"></a>2.3. 暴露 XDebug 通信接口</h4><p>修改 <code>docker-compose.yml</code> 文件，在 nginx 服务下通过 <code>expose</code> 暴露 <strong>9001</strong> 端口</p>
<p>使用如下命令重新启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker-compose stop</span><br><span class="line">➜  docker-compose down</span><br><span class="line">➜  docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="3-测试断点调试"><a href="#3-测试断点调试" class="headerlink" title="3. 测试断点调试"></a>3. 测试断点调试</h3><p>按快捷键 <code>F5</code> 打开断点，此时在浏览器中访问网页，将跳转到 vscode 编辑器，并且样式如下：</p>
<p><img data-src="https://static.sqiang.net/image/post/vscode_php_xdebug2.png"></p>
<p>说明：上图是一个 TP 项目，虽然没有手动设置断点，但是开启调试模式后，访问网页会首先进入根目录下的框架入口文件。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>开发工具</tag>
        <tag>vscode</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>弹窗提示「Windows要求已数字签名的驱动程序」怎么办</title>
    <url>/post/1732007690.html</url>
    <content><![CDATA[<p>最近买了个雷蛇的鼠标，<code>Windows 7</code> 系统下通过雷云安装驱动的时候，弹窗提示「<strong>Windows要求已数字签名的驱动程序</strong>」，错误窗口详细信息的大意是一个驱动文件无法通过系统的数字签名，无法安装，导致设备可能无法正常使用。</p>
<p>这其实是系统的一个安全警告，可通过以下命令关闭系统的数字签名认证：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">bcdedit.exe -<span class="built_in">set</span> loadoptions DDISABLE_INTEGRITY_CHECKS</span><br></pre></td></tr></table></figure>

<p>重启系统，然后重新安装出错的程序就可以了。</p>
<p><strong>注意</strong>：如果还是不行的话，则安装以下官方补丁程序：</p>
<p>Windows 7 32bit：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=46078">https://www.microsoft.com/zh-CN/download/details.aspx?id=46078</a></p>
<p>Windows 7 64bit：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=46148">https://www.microsoft.com/zh-CN/download/details.aspx?id=46148
</a></p>
]]></content>
      <categories>
        <category>系统和软件</category>
      </categories>
      <tags>
        <tag>系统和软件</tag>
        <tag>数字签名</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 浏览器最新稳定版完整离线安装包下载</title>
    <url>/post/2159656190.html</url>
    <content><![CDATA[<blockquote>
<p>当前最新稳定版本：<strong>Version 95.0.4638.69 (Official Build)</strong></p>
</blockquote>
<h3 id="谷歌官网直接下载地址"><a href="#谷歌官网直接下载地址" class="headerlink" title="谷歌官网直接下载地址"></a>谷歌官网直接下载地址</h3><p><strong>注意</strong>：需要科学上网！无法科学上网的，请使用后面的网盘备份地址。</p>
<ul>
<li><a href="https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BBABABE6F-A3B2-8FF1-24AD-5C9064C7E130%7D%26lang%3Dzh-CN%26browser%3D4%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dstable-arch_x86-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup.exe">Windows 32位</a></li>
<li><a href="https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BBABABE6F-A3B2-8FF1-24AD-5C9064C7E130%7D%26lang%3Dzh-CN%26browser%3D4%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe">Windows 64位</a></li>
<li><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">Linux （.deb）</a></li>
<li><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm">Linux （.rpm）</a></li>
<li><a href="https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg">macOS（.dmg）</a></li>
</ul>
<h3 id="备份下载地址"><a href="#备份下载地址" class="headerlink" title="备份下载地址"></a>备份下载地址</h3><ul>
<li>百度网盘（含最新及部分历史版本）：<a href="https://pan.baidu.com/s/195fycw8BEK4B1xhi4ig1Sg">https://pan.baidu.com/s/195fycw8BEK4B1xhi4ig1Sg</a> 密码: <code>oig4</code></li>
<li>阿里云盘（只有最新版）：<a href="https://www.aliyundrive.com/s/tQDPe57hBPx">https://www.aliyundrive.com/s/tQDPe57hBPx</a></li>
</ul>
]]></content>
      <categories>
        <category>系统和软件</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>macOS</tag>
        <tag>系统和软件</tag>
        <tag>Google Chrome</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中的 PHP 如何安装扩展</title>
    <url>/post/90967283.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍在 Docker 中三类扩展的安装方式，包括核心扩展、PECL扩展、其它扩展。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-PHP-源码"><a href="#1-PHP-源码" class="headerlink" title="1. PHP 源码"></a>1. PHP 源码</h3><p>为了保证 Docker 镜像尽量小，PHP 的源文件是以压缩包的形式存在镜像中，官方提供了 <code>docker-php-source</code> 快捷脚本，用于对源文件压缩包的解压（extract）及解压后的文件进行删除（delete）的操作。</p>
<p>示例：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.1</span>-apache</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-source extract \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 此处开始执行你需要的操作 \</span></span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-source delete</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：一定要记得删除，否则解压出来的文件会大大增加镜像的文件大小。</strong></p>
<h3 id="2-安装扩展"><a href="#2-安装扩展" class="headerlink" title="2. 安装扩展"></a>2. 安装扩展</h3><h4 id="2-1-核心扩展"><a href="#2-1-核心扩展" class="headerlink" title="2.1. 核心扩展"></a>2.1. 核心扩展</h4><p>这里主要用到的是官方提供的 <code>docker-php-ext-configure</code> 和 <code>docker-php-ext-install</code> 快捷脚本，如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.1</span>-fpm</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">	<span class="comment"># 相关依赖必须手动安装</span></span></span><br><span class="line">	&amp;&amp; apt-get install -y \</span><br><span class="line">        libfreetype6-dev \</span><br><span class="line">        libjpeg62-turbo-dev \</span><br><span class="line">        libmcrypt-dev \</span><br><span class="line">        libpng-dev \</span><br><span class="line">    <span class="comment"># 安装扩展</span></span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \</span><br><span class="line">    <span class="comment"># 如果安装的扩展需要自定义配置时</span></span><br><span class="line">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里的 <code>docker-php-ext-configure</code> 和 <code>docker-php-ext-install</code> 已经包含了 <code>docker-php-source</code> 的操作，所有不需要再手动去执行。</p>
<h4 id="2-2-PECL-扩展"><a href="#2-2-PECL-扩展" class="headerlink" title="2.2. PECL 扩展"></a>2.2. PECL 扩展</h4><p>因为一些扩展并不包含在 PHP 源码文件中，所有需要使用 <a href="https://secure.php.net/manual/zh/install.pecl.intro.php">PECL</a>（PHP 的扩展库仓库，通过 <a href="http://pear.php.net/">PEAR</a> 打包）。用 <code>pecl install</code> 安装扩展，然后再用官方提供的 <code>docker-php-ext-enable</code> 快捷脚本来启用扩展，如下示例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.1</span>-fpm</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">	<span class="comment"># 手动安装依赖</span></span></span><br><span class="line">	&amp;&amp; apt-get install -y libmemcached-dev zlib1g-dev \</span><br><span class="line">	<span class="comment"># 安装需要的扩展</span></span><br><span class="line">   &amp;&amp; pecl install memcached-<span class="number">2.2</span>.<span class="number">0</span> \</span><br><span class="line">   <span class="comment"># 启用扩展</span></span><br><span class="line">   &amp;&amp; docker-php-ext-enable memcached</span><br></pre></td></tr></table></figure>

<h4 id="2-3-其它扩展"><a href="#2-3-其它扩展" class="headerlink" title="2.3. 其它扩展"></a>2.3. 其它扩展</h4><p>一些既不在 PHP 源码包，也不再 PECL 扩展仓库中的扩展，可以通过下载扩展程序源码，编译安装的方式安装，如下示例：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL <span class="string">&#x27;https://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz&#x27;</span> -o xcache.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p xcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf xcache.tar.gz -C xcache --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm xcache.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ( \</span></span><br><span class="line"><span class="bash">        <span class="built_in">cd</span> xcache \</span></span><br><span class="line"><span class="bash">        &amp;&amp; phpize \</span></span><br><span class="line"><span class="bash">        &amp;&amp; ./configure --enable-xcache \</span></span><br><span class="line"><span class="bash">        &amp;&amp; make -j$(nproc) \</span></span><br><span class="line"><span class="bash">        &amp;&amp; make install \</span></span><br><span class="line"><span class="bash">    ) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r xcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-enable xcache</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：官方提供的 <code>docker-php-ext-*</code> 脚本接受任意的绝对路径（不支持相对路径，以便与系统内置的扩展程序进行区分），所以，上面的例子也可以这样写：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL <span class="string">&#x27;https://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz&#x27;</span> -o xcache.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /tmp/xcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf xcache.tar.gz -C /tmp/xcache --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm xcache.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure /tmp/xcache --enable-xcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install /tmp/xcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r /tmp/xcache</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Docker</tag>
        <tag>PECL</tag>
        <tag>PEAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装及基础入门</title>
    <url>/post/2495096853.html</url>
    <content><![CDATA[<blockquote>
<p><strong>Docker</strong> 是一款针对程序开发人员和系统管理员来开发、部署、运行应用的一款虚拟化平台。它可以让你像使用集装箱一样快速的组合成应用，并且可以像运输标准集装箱一样</p>
<p><strong>Vagrant</strong> 是另一款虚拟化工具，与 Docker 的区别<a href="/post/3519953407.html">参见这里</a>。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-安装篇"><a href="#1-安装篇" class="headerlink" title="1. 安装篇"></a>1. 安装篇</h3><h4 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1. 系统要求"></a>1.1. 系统要求</h4><blockquote>
<p>可通过命令 uname -a 查看系统基本信息</p>
</blockquote>
<p>❗️要求：<strong>x64 位、内核版本 &gt;= 3.10</strong></p>
<p>推荐：</p>
<ul>
<li>Ubuntu 16.04 Xenial +</li>
<li>Debian 8 Jessie +</li>
<li>CentOS7 +</li>
</ul>
<blockquote>
<p>提示：如果你要安装 Docker 的操作系统是图形界面，macOS、Windows、Linux 都有对应的桌面客户端 GUI 程序，各自下载地址如下：</p>
<ul>
<li><a href="https://docs.docker.com/desktop/install/mac-install/">Docker Desktop for Mac</a></li>
<li><a href="https://docs.docker.com/desktop/install/windows-install/">Docker Desktop for Windows</a></li>
<li><a href="https://docs.docker.com/desktop/install/linux-install/">Docker Desktop for Linux</a></li>
</ul>
</blockquote>
<blockquote>
<p>说明：Docker Desktop 包含了 Docker 的所有东西，安装了这个就不需要看后续安装步骤了。<strong>后续的安装说明，适用于非图形界面的服务器系统</strong>。</p>
</blockquote>
<h4 id="1-2-一键安装脚本"><a href="#1-2-一键安装脚本" class="headerlink" title="1.2. 一键安装脚本"></a>1.2. 一键安装脚本</h4><p>此脚本适用于 Ubuntu、Debian、CentOS 系统，其中：官方版在某些情况下可能安装比较慢，阿里云的脚本在 CentOS7.4 下多次尝试都失败，所以推荐 DaoCloud 版。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方</span></span><br><span class="line">➜  curl -sSL https://get.docker.com/ | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># DaoCloud（推荐）</span></span><br><span class="line">➜  curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云</span></span><br><span class="line">➜  curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh</span><br><span class="line">或</span><br><span class="line">➜  wget -qO- http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker --version</span><br><span class="line">Docker version 18.02.0-ce, build fc4de44</span><br></pre></td></tr></table></figure>

<p>启动 Docker，并加入自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  systemctl start docker</span><br><span class="line">➜  systemctl <span class="built_in">enable</span> docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<blockquote>
<p>安装成功之后，如果想让普通用户拥有 docker 的所有权限，需执行 <code>sudo usermod -aG docker your-user</code> 将普通用户加入到 docker 组，否则需要使用 <code>sudo docker commands</code> 的形式执行所有 docker 命令。</p>
<p>加入 docker 组后，需重启系统才能生效。</p>
</blockquote>
<h4 id="1-3-手动安装官方参考文档"><a href="#1-3-手动安装官方参考文档" class="headerlink" title="1.3. 手动安装官方参考文档"></a>1.3. 手动安装官方参考文档</h4><ul>
<li><a href="https://docs.docker.com/engine/install/ubuntu/">Ubuntu</a></li>
<li><a href="https://docs.docker.com/engine/install/debian/">Debian</a></li>
<li><a href="https://docs.docker.com/engine/install/centos/">CentOS</a></li>
</ul>
<h3 id="2-基础入门篇"><a href="#2-基础入门篇" class="headerlink" title="2. 基础入门篇"></a>2. 基础入门篇</h3><h4 id="2-1-镜像"><a href="#2-1-镜像" class="headerlink" title="2.1. 镜像"></a>2.1. 镜像</h4><h5 id="2-1-1-介绍"><a href="#2-1-1-介绍" class="headerlink" title="2.1.1. 介绍"></a>2.1.1. 介绍</h5><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。<strong>镜像不包含任何动态数据，其内容在构建之后也不会被改变。</strong></p>
<p>Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 将这些不同的层结合到一个镜像中去。</p>
<p>通常 Union FS 有两个用途：</p>
<ul>
<li>实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下；</li>
<li>将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</li>
</ul>
<p>Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p>
<h5 id="2-1-2-镜像加速器"><a href="#2-1-2-镜像加速器" class="headerlink" title="2.1.2. 镜像加速器"></a>2.1.2. 镜像加速器</h5><p>由于国内访问 Docker Hub 有时会遇到困难，所以需要配置镜像加速器，推荐如下两个，需登录后获取自己的镜像加速地址。</p>
<ul>
<li><p><a href="https://www.daocloud.io/mirror">DaoCloud</a></p>
</li>
<li><p><a href="https://cr.console.aliyun.com/#/accelerator">阿里云</a></p>
</li>
</ul>
<h5 id="2-1-3-常用操作命令"><a href="#2-1-3-常用操作命令" class="headerlink" title="2.1.3. 常用操作命令"></a>2.1.3. 常用操作命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">$ docker search ubuntu:16.04</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取镜像</span></span><br><span class="line">$ docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像（只会显示顶层镜像）</span></span><br><span class="line">$ docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像（需要先删除依赖该镜像的容器）</span></span><br><span class="line">$ docker rmi [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有虚悬镜像</span></span><br><span class="line">$ docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有仓库名包含 redis 的镜像</span></span><br><span class="line">$ docker rmi $(docker images -q redis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像标签</span></span><br><span class="line">$ sudo docker tag &lt;镜像ID&gt; &lt;标签名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出镜像存储文件</span></span><br><span class="line">$ docker save -o 导出镜像名.tar.gz &lt;镜像ID 或 镜像名:tag&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像存储文件（包含镜像以及相关元数据信息，比如标签等）</span></span><br><span class="line">$ docker load &lt; 导出镜像名.tar.gz</span><br><span class="line">或</span><br><span class="line">$ docker load --input 导出镜像名.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-2-容器"><a href="#2-2-容器" class="headerlink" title="2.2. 容器"></a>2.2. 容器</h4><h5 id="2-2-1-介绍"><a href="#2-2-1-介绍" class="headerlink" title="2.2.1. 介绍"></a>2.2.1. 介绍</h5><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。</p>
<ul>
<li>容器可以被创建、启动、停止、删除、暂停等。</li>
<li>容器的实质是<strong>进程</strong>，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此<em>容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间</em>。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会把容器和虚拟机搞混。</li>
<li>按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化</strong>。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</li>
</ul>
<h5 id="2-2-2-常用操作命令"><a href="#2-2-2-常用操作命令" class="headerlink" title="2.2.2. 常用操作命令"></a>2.2.2. 常用操作命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出一个“hello world”后终止容器</span></span><br><span class="line">$ docker run ubuntu:16.04 /bin/<span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个 bash 终端，允许用户进行交互</span></span><br><span class="line">$ docker run -it ubuntu:16.04 /bin/bash</span><br><span class="line">root@0eb917598209:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行，主要使用 -d 参数</span></span><br><span class="line">$ docker run -d ubuntu:16.04 /bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行中的容器</span></span><br><span class="line">$ docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有容器</span></span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出：容器ID ｜ 容器名称 ｜ 容器端口映射 ｜ 容器状态</span></span><br><span class="line"><span class="comment"># 更多格式参考官方文档：https://docs.docker.com/engine/reference/commandline/ps/#formatting</span></span><br><span class="line">$ docker ps -a --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Names&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line"><span class="comment"># 方法一：attach 此方法会受命令阻塞影响，并且 exit 退出后将同时关闭容器</span></span><br><span class="line">$ docker attach &lt;容器id&gt;</span><br><span class="line"><span class="comment"># 方法二：exec（推荐）</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it <span class="variable">$CONTAINER_ID</span> /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭容器</span></span><br><span class="line">$ docker stop <span class="variable">$CONTAINER_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已关闭的容器</span></span><br><span class="line">$ docker start <span class="variable">$CONTAINER_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取容器的输出信息（-f 选项用于持续获取）</span></span><br><span class="line">$ docker logs <span class="variable">$CONTAINER_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时查看容器的最新100条日志</span></span><br><span class="line">$ docker logs -f --tail=100 <span class="variable">$CONTAINER_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空对应容器的日志文件</span></span><br><span class="line">$ docker ps -a | grep <span class="variable">$CONTAINER_NAME</span></span><br><span class="line">$ find /var/lib/docker/containers/ -name *-json.log | grep 959a80270bbc</span><br><span class="line">$ cat /dev/null &gt; /absolute/path/to/959a80270bbc.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的相关信息</span></span><br><span class="line">$ docker inspect <span class="variable">$CONTAINER_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">$ docker rm <span class="variable">$CONTAINER_ID</span>-1 <span class="variable">$CONTAINER_ID</span>-2 <span class="variable">$CONTAINER_ID</span>-3 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未运行的容器</span></span><br><span class="line">$ docker rm $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出容器快照（将丢弃历史记录和元数据信息）</span></span><br><span class="line">$ docker <span class="built_in">export</span> &lt;容器ID&gt; &gt; &lt;导出文件名&gt;.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器快照导入镜像</span></span><br><span class="line">$ cat &lt;导出文件名&gt;.tar | docker import - &lt;导入之后的镜像名:标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在宿主机与容器之间相互拷贝文件</span></span><br><span class="line">$ docker cp [OPTIONS] <span class="variable">$CONTAINER_ID</span>:容器中的文件路径 本地目标路径</span><br><span class="line">$ docker cp [OPTIONS] 本地文件路径 <span class="variable">$CONTAINER_ID</span>:容器中的目标路径</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Docker-常用命令图解"><a href="#2-3-Docker-常用命令图解" class="headerlink" title="2.3. Docker 常用命令图解"></a>2.3. Docker 常用命令图解</h4><p><img data-src="https://static.sqiang.net/image/post/docker_commands.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 之 Dockerfile 介绍</title>
    <url>/post/404938395.html</url>
    <content><![CDATA[<h3 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1. 基本结构"></a>1. 基本结构</h3><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>在文件中，支持以 # 开头的注释行。</p>
<p>一般，Dockerfile 共包括四部分：</p>
<ul>
<li>基础镜像信息</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动时执行指令</li>
</ul>
<span id="more"></span>

<p>使用流程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ mkdir mynginx</span><br><span class="line">➜ <span class="built_in">cd</span> mynginx</span><br><span class="line">➜ touch Dockerfile</span><br><span class="line">➜ vi Dockerfile</span><br></pre></td></tr></table></figure>

<p>写入如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index</span><br><span class="line">.html</span><br></pre></td></tr></table></figure>

<p>以上是一个最简单的 Dockerfile，相对完整版的 Dockerfile 示例，请<a href="https://github.com/whorusq/docker-learning/tree/master/lamp2">点击这里</a>查看。</p>
<h3 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2. 常用指令"></a>2. 常用指令</h3><h4 id="2-1-FROM"><a href="#2-1-FROM" class="headerlink" title="2.1. FROM"></a>2.1. FROM</h4><blockquote>
<p>指定当前 Dockerfile 文件所创建的镜像基于哪个基础镜像</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>FROM &lt;image&gt;</code></li>
<li><code>FROM &lt;image&gt;:&lt;tag&gt;</code></li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li><p>一个 Dockerfile 中 FROM 是必备的指令，并<br>且必须是第一条指令。</p>
</li>
<li><p>Docker 还存在一个特殊的镜像，名为<br>scratch 。</p>
<p>  它是个虚拟概念，并不实际存在，表示一个空白的镜像。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>  如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
</li>
<li><p>在 Docker 仓库中存在很多高质量的官方镜像</p>
<ul>
<li>官方镜像仓库：<a href="https://store.docker.com/">https://store.docker.com</a></li>
<li>DaoCloud 镜像仓库：<a href="http://hub.daocloud.io/">http://hub.daocloud.io</a></li>
<li>阿里云镜像仓库：<a href="https://dev.aliyun.com/search.html">https://dev.aliyun.com/search.html</a></li>
</ul>
</li>
</ul>
<h4 id="2-2-MAINTAINER"><a href="#2-2-MAINTAINER" class="headerlink" title="2.2. MAINTAINER"></a>2.2. MAINTAINER</h4><blockquote>
<p>指定维护者信息。</p>
</blockquote>
<p>格式：<code>MAINTAINER &lt;name&gt;</code></p>
<h4 id="2-3-RUN"><a href="#2-3-RUN" class="headerlink" title="2.3. RUN"></a>2.3. RUN</h4><blockquote>
<p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>RUN &lt;command&gt;</code> 在 shell 终端中运行命令，即 <code>/bin/sh -c</code></li>
<li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 使用 exec 执行</li>
</ul>
<p>比如，我们想指定使用其它终端，就可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code></p>
<p><strong>注意</strong>：Dockerfile 中每一个指令都会建立一层， RUN 也不例外。所以在编写 Dockerfile 的过程中，我们应该尽量避免无意义的层次，采取类似如下示例的操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 安装基础工具包</span></span><br><span class="line">	&amp;&amp; apt-get install -y software-properties-common vim wget  \</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里追加其它操作：安装软件、配置服务等</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 做一些清理工作</span></span><br><span class="line">	&amp;&amp; apt-get clean \</span><br><span class="line">    &amp;&amp; apt-get autoclean \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br></pre></td></tr></table></figure>

<p><strong>注意：在编写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</strong></p>
<h4 id="2-4-CMD"><a href="#2-4-CMD" class="headerlink" title="2.4. CMD"></a>2.4. CMD</h4><blockquote>
<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><p><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 exec 执行，<strong>推荐</strong>方式</p>
<blockquote>
<p>示例：<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></p>
</blockquote>
</li>
<li><p><code>CMD command param1 param2</code> 在 /bin/sh 中执行，提供给需要交互的应用</p>
</li>
<li><p><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 ENTRYPOINT 的默认参数</p>
</li>
</ul>
<p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。 CMD 指令就是用于指定默认的容器主进程的启动命令的。</p>
<p>ubuntu 镜像默认的 CMD 是 <code>/bin/bash</code>。</p>
<p><strong>注意</strong>：</p>
<blockquote>
<ol>
<li>如果指定了多条命令，只有最后一条会被执行。</li>
<li>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</li>
</ol>
</blockquote>
<h4 id="2-5-ENTRYPOINT"><a href="#2-5-ENTRYPOINT" class="headerlink" title="2.5. ENTRYPOINT"></a>2.5. ENTRYPOINT</h4><blockquote>
<p>与 CMD 一样，都是配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li>
<li><code>ENTRYPOINT command param1 param2</code></li>
</ul>
<p>当指定了 ENTRYPOINT 后， CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; <span class="string">&quot;&lt;CMD&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p>
<h4 id="2-6-ENV"><a href="#2-6-ENV" class="headerlink" title="2.6. ENV"></a>2.6. ENV</h4><blockquote>
<p>设置环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>
<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV VERSION=1.0 DEBUG=on \</span><br><span class="line"></span><br><span class="line">    NAME=<span class="string">&quot;Happy Feet&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-COPY"><a href="#2-7-COPY" class="headerlink" title="2.7. COPY"></a>2.7. COPY</h4><blockquote>
<p>复制本地主机的 <src>（为 Dockerfile 所在目录的相对路径）到容器中的 <dest>。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p><strong>&lt;源路径&gt;</strong> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY hom* /mydir/</span><br><span class="line"></span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure>

<p><strong>&lt;目标路径&gt;</strong> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工 作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>
<p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建 相关文件都在使用 Git 进行管理的时候。</p>
<h4 id="2-8-ADD"><a href="#2-8-ADD" class="headerlink" title="2.8. ADD"></a>2.8. ADD</h4><blockquote>
<p>与 COPY 的格式和性质基本一致，但是在 COPY 基础上增加了一些功能。</p>
<p>其中 <src> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>
</blockquote>
<p>在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY ，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。<strong>最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。</strong></p>
<p>⚠️ <strong>注意</strong>：</p>
<blockquote>
<p>ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>
<p>因此在 COPY 和 制均使用 COPY 指令中选择的时候，可以遵循这样的原则：<strong>所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD 。</strong></p>
</blockquote>
<h4 id="2-9-VOLUME"><a href="#2-9-VOLUME" class="headerlink" title="2.9. VOLUME"></a>2.9. VOLUME</h4><blockquote>
<p>定义匿名卷。</p>
<p>即创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>VOLUME [&quot;&lt;path1&gt;&quot;, &quot;&lt;path2&gt;&quot;...]</code></li>
<li><code>VOLUME path</code></li>
</ul>
<p>运行时可以通过 <strong>-v</strong> 选项覆盖这个挂载设置，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>

<h4 id="2-10-EXPOSE"><a href="#2-10-EXPOSE" class="headerlink" title="2.10. EXPOSE"></a>2.10. EXPOSE</h4><blockquote>
<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。</p>
</blockquote>
<p>格式：<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></p>
<p><strong>注意</strong>：</p>
<ol>
<li><p>这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映 射；</li>
<li>用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
</li>
<li><p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。</p>
<ul>
<li>-p ，是 映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问；</li>
<li>EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</li>
</ul>
</li>
</ol>
<h4 id="2-11-USER"><a href="#2-11-USER" class="headerlink" title="2.11. USER"></a>2.11. USER</h4><blockquote>
<p>指定运行容器时的用户名或 UID，后续的 RUN / CMD / ENTRYPOINT 也会使用指定用户。</p>
</blockquote>
<p>格式：<code>USER daemon</code></p>
<p>与 WORKDIR 指令一样， USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line">USER redis</span><br><span class="line">RUN [ <span class="string">&quot;redis-server&quot;</span> ]</span><br></pre></td></tr></table></figure>

<p>要临时获取管理员权限可以使用 <strong>gosu</strong>，而不推荐 sudo，可参照：<a href="https://github.com/tianon/gosu">https://github.com/tianon/gosu</a></p>
<p>使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 gosu</span></span><br><span class="line">RUN wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">&quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot;</span> \</span><br><span class="line">&amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span><br><span class="line">&amp;&amp; gosu nobody <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span><br><span class="line">CMD [ <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;gosu&quot;</span>, <span class="string">&quot;redis&quot;</span>, <span class="string">&quot;redis-server&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h4 id="2-12-WORKDIR"><a href="#2-12-WORKDIR" class="headerlink" title="2.12. WORKDIR"></a>2.12. WORKDIR</h4><blockquote>
<p>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。</p>
</blockquote>
<p>格式：<code>WORKDIR /path/to/workdir</code></p>
<p>我们可以使用多个 WORKDIR 指令，但是后续命令的参数如果是相对路径，则会基于之前命令指定的路径。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<p>最后的路径是 <code>/a/b/c</code></p>
<h4 id="2-13-ONBUILD"><a href="#2-13-ONBUILD" class="headerlink" title="2.13. ONBUILD"></a>2.13. ONBUILD</h4><blockquote>
<p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p>
</blockquote>
<p>格式：</p>
<ul>
<li><code>ONBUILD [INSTRUCTION]</code></li>
</ul>
<h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3. 构建镜像"></a>3. 构建镜像</h3><p>编写完成 Dockerfile 之后，我们就可以通过 docker build 命令来创建镜像了。</p>
<p>格式：<code>docker build [选项] 路径</code></p>
<p>在 Dockerfile 所在目录，执行如下命令进行构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ sudo docker build -t php:v5.6 .</span><br><span class="line">➜ sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">php                 5.6                 cb4854aef367        3 months ago        351MB</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中 <strong>-t</strong> 用于指定镜像的标签信息；<strong>.</strong> 表示构建上下文的目录</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 之 Redis 环境</title>
    <url>/post/43281251.html</url>
    <content><![CDATA[<h3 id="1-相关资源"><a href="#1-相关资源" class="headerlink" title="1. 相关资源"></a>1. 相关资源</h3><ul>
<li>镜像地址：<a href="https://store.docker.com/images/redis">https://store.docker.com/images/redis</a></li>
<li>Redis 发布地址：<a href="https://github.com/antirez/redis">https://github.com/antirez/redis</a></li>
</ul>
<p>拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认拉取最新版本，目前是 4.0.1</span></span><br><span class="line">➜  docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或指定版本</span></span><br><span class="line">➜  docker pull redis:3</span><br></pre></td></tr></table></figure>
<p>检查镜像是否拉取成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  redis docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              d4f259423416        5 weeks ago         106MB</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><h4 id="2-1-默认启动"><a href="#2-1-默认启动" class="headerlink" title="2.1. 默认启动"></a>2.1. 默认启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  redis docker run --name myredis -d redis</span><br><span class="line">41f9c2e8fb86c415257c0342eb58435c3a5bbaf10f888a2cb3c7243d08ec796c</span><br></pre></td></tr></table></figure>
<p>之后就可以通过客户端程序连接 <code>127.0.0.1:6379</code> 来访问了</p>
<h4 id="2-2-怎么使用-redis-cli-连接容器？"><a href="#2-2-怎么使用-redis-cli-连接容器？" class="headerlink" title="2.2. 怎么使用 redis-cli 连接容器？"></a>2.2. 怎么使用 redis-cli 连接容器？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  redis docker run -it --link myredis --rm redis redis-cli -h myredis -p 6379</span><br><span class="line">myredis:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">myredis:6379&gt; SET name <span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line">OK</span><br><span class="line">myredis:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">myredis:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-如何将数据持久化存储到宿主机？"><a href="#2-3-如何将数据持久化存储到宿主机？" class="headerlink" title="2.3. 如何将数据持久化存储到宿主机？"></a>2.3. 如何将数据持久化存储到宿主机？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker run --name myredis2 -d -v ~/data/redis:/data redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>--appendonly yes</code> 用于打开 redis 的数据持久化存储</li>
<li><code>-v ~/data/redis:/data</code> 用于将宿主机的目录映射到容器对应的数据存储目录</li>
</ul>
<h4 id="2-4-自定义配置文件"><a href="#2-4-自定义配置文件" class="headerlink" title="2.4. 自定义配置文件"></a>2.4. 自定义配置文件</h4><p>首先到 <a href="https://github.com/antirez/redis/blob/unstable/redis.conf">https://github.com/antirez/redis/blob/unstable/redis.conf</a> 下载一份 redis 的默认配置文件，然后在 redis 容器启动时如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/myredis/conf/redis.conf 对应宿主机配置文件位置</span></span><br><span class="line">➜  docker run -v ~/myredis/conf/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf --name myredis3 redis redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 的 MySQL 导入导出数据</title>
    <url>/post/2298000230.html</url>
    <content><![CDATA[<ol>
<li><p>查看容器名称或ID</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker ps --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Names&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;&quot;</span></span><br><span class="line">CONTAINER ID        NAMES                STATUS              PORTS</span><br><span class="line">33223943f76a        lnmpa_mysql_1        Up 12 hours         0.0.0.0:3306-&gt;3306/tcp</span><br></pre></td></tr></table></figure></li>
<li><p>导出</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker <span class="built_in">exec</span> -it lnmpa_mysql_1 mysqldump -uroot -p123456 -P 3306 <span class="variable">$DATABASE_NAME</span> &gt; <span class="variable">$DATABASE_NAME_20181108_001</span>.sql</span><br></pre></td></tr></table></figure></li>
<li><p>导入</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker <span class="built_in">exec</span> -i lnmpa_mysql_1 mysql -uroot -p123456 <span class="variable">$DATABASE_NAME</span> &lt; <span class="variable">$DATABASE_NAME_20181108_001</span>.sql</span><br></pre></td></tr></table></figure>

<p> <strong>注意</strong>：这里与导出不同，需要将参数 <code>-it</code> 更换为 <code>-i</code> ，否则会报错：<code>cannot enable tty mode on non tty input</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 的 PHP 如何连接 MySQL</title>
    <url>/post/2161195361.html</url>
    <content><![CDATA[<p>环境</p>
<ul>
<li>基于 docker-compose 管理的 PHP 和 MySQL 服务</li>
<li>PHP 容器中的程序连接 MySQL 容器中的服务， 采用 PDO 形式</li>
</ul>
<p>测试代码片段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:dbname=test;host=127.0.0.1;charset=utf8mb4;port=3306&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(PDOException <span class="variable">$pe</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$pe</span>-&gt;getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLSTATE[HY000] [2002] Connection refused</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>解决方法</p>
<blockquote>
<p>以上错误主要是对 Docker 容器的隔离机制理解不够，其实每个容器之间都是隔离的，如果有相互依赖的服务，需要进行显示的关联，比如使用选项 <code>--link</code>。</p>
</blockquote>
<blockquote>
<p>同理，使用 docker-compose 时候，容器之间关联是采用类似如下的方式：</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.xml 缩减版</span></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">  php:</span><br><span class="line">    build: ./php</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    links:</span><br><span class="line">      - <span class="string">&quot;mysql&quot;</span></span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    build: ./mysql</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_PASSWORD: root</span><br></pre></td></tr></table></figure>

<p>注意，关键地方来了：测试连接 MySQL 的代码其实是运行在 PHP 对应的容器里，而 MySQL 服务是在它自己对应的容器里，当我们的 host 填写 127.0.0.1 时候，其实对应的是 PHP 容器里面，所以不可能找到对应的服务，从而引起上面拒绝连接的错误。</p>
<p>那么，怎么进行连接呢？</p>
<p><strong>其实容器之间关联之后，可以通过容器名进行连接，是的，容器名！</strong></p>
<p>在上面的 docker-compose.xml 文件中，MySQL 服务对应的容器名是 mysql，PHP 容器与它关联的名字也是 MySQL，所以把 127.0.0.1 改成 <code>mysql</code> 再进行连接即可！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 的 Redis 服务</title>
    <url>/post/3425556216.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍基于 Docker 的 Redis 服务基本使用，涉及服务创建、客户端连接测试等。</p>
</blockquote>
<h3 id="1-相关资源"><a href="#1-相关资源" class="headerlink" title="1. 相关资源"></a>1. 相关资源</h3><ul>
<li>官网：<a href="https://redis.io/">https://redis.io</a></li>
<li>镜像地址：<a href="https://store.docker.com/images/redis">https://store.docker.com/images/redis</a></li>
<li>Redis 发布地址：<a href="https://github.com/antirez/redis">https://github.com/antirez/redis</a></li>
</ul>
<span id="more"></span>

<h3 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2. 拉取镜像"></a>2. 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认拉取最新稳定版本，目前是 5.x</span></span><br><span class="line">➜  docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或指定版本</span></span><br><span class="line">➜  docker pull redis:5</span><br></pre></td></tr></table></figure>
<p>检查镜像是否拉取成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               5                   4cdbec704e47        9 days ago          98.2MB</span><br><span class="line">redis               latest              44d36d2c2374        2 months ago        98.2MB</span><br></pre></td></tr></table></figure>

<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><h4 id="3-1-默认启动"><a href="#3-1-默认启动" class="headerlink" title="3.1. 默认启动"></a>3.1. 默认启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker run --name myredis -d redis</span><br><span class="line">41f9c2e8fb86c415257c0342eb58435c3a5bbaf10f888a2cb3c7243d08ec796c</span><br></pre></td></tr></table></figure>
<p>之后就可以通过客户端程序连接 <code>127.0.0.1:6379</code> 来访问了。</p>
<h4 id="3-2-怎么使用-redis-cli-连接容器？"><a href="#3-2-怎么使用-redis-cli-连接容器？" class="headerlink" title="3.2. 怎么使用 redis-cli 连接容器？"></a>3.2. 怎么使用 redis-cli 连接容器？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker run -it --link myredis --rm redis redis-cli -h myredis -p 6379</span><br><span class="line">myredis:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">myredis:6379&gt; SET name <span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line">OK</span><br><span class="line">myredis:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">myredis:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-如何将数据持久化存储到宿主机？"><a href="#3-3-如何将数据持久化存储到宿主机？" class="headerlink" title="3.3. 如何将数据持久化存储到宿主机？"></a>3.3. 如何将数据持久化存储到宿主机？</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker run --name myredis2 -d -v ~/data/redis:/data redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>--appendonly yes</code> 用于打开 redis 的数据持久化存储</li>
<li><code>-v ~/data/redis:/data</code> 用于将宿主机的目录映射到容器对应的数据存储目录</li>
</ul>
<h4 id="3-4-自定义配置文件"><a href="#3-4-自定义配置文件" class="headerlink" title="3.4. 自定义配置文件"></a>3.4. 自定义配置文件</h4><p>建议<a href="https://redis.io/">官网</a>下载指定版本的 Redis 源码包，解压后获取默认配置文件 <code>redis.conf</code></p>
<p>然后在 Redis 容器启动时如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/myredis/conf/redis.conf 对应宿主机配置文件位置</span></span><br><span class="line">➜  docker run -v ~/myredis/conf/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf --name myredis3 redis redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-docker-compose-编排"><a href="#4-使用-docker-compose-编排" class="headerlink" title="4. 使用 docker compose 编排"></a>4. 使用 docker compose 编排</h3><p>上面是基本使用方式，为便于管理，我们一般使用 <code>docker compose</code> 来统一创建、管理各服务。</p>
<h4 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1. 创建"></a>4.1. 创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个目录 redi 存放，结构如下</span></span><br><span class="line">➜  tree -L 2 redis</span><br><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   └── redis.conf &lt;-- 默认配置文件</span><br><span class="line">├── data</span><br><span class="line">│   └── dump.rdb &lt;-- 数据持久化文件</span><br><span class="line">└── docker-compose.yml</span><br></pre></td></tr></table></figure>

<p><code>docker-compose.yml</code> 文件如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis</span></span><br><span class="line"><span class="comment"># https://redis.io</span></span><br><span class="line"><span class="comment"># https://hub.docker.com/_/redis</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;56379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-启动"><a href="#4-2-启动" class="headerlink" title="4.2. 启动"></a>4.2. 启动</h4><blockquote>
<p>⚠️ 注意：启动前，注意修改配置文件中的连接密码（requirepass）和 IP 绑定（bind）两个属性，尤其是当使用 <code>redis-cli</code> 或其它客户端工具连接发生异常时。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker compose up</span><br><span class="line">Creating network <span class="string">&quot;redis_default&quot;</span> with the default driver</span><br><span class="line">Creating redis_redis_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to redis_redis_1</span><br><span class="line">redis_1  | 1:C 10 Apr 2020 07:24:54.884 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">redis_1  | 1:C 10 Apr 2020 07:24:54.885 <span class="comment"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">redis_1  | 1:C 10 Apr 2020 07:24:54.885 <span class="comment"># Configuration loaded</span></span><br><span class="line">redis_1  |                 _._</span><br><span class="line">redis_1  |            _.-``__ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line">redis_1  |       _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class="line">redis_1  |   .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line">redis_1  |  (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string">redis_1  |  |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 6379</span></span><br><span class="line"><span class="string">redis_1  |  |    `-._   `._    /     _.-&#x27;</span>    |     PID: 1</span><br><span class="line">redis_1  |   `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">redis_1  |  |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string">redis_1  |  |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           http://redis.io</span></span><br><span class="line"><span class="string">redis_1  |   `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">redis_1  |  |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string">redis_1  |  |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">redis_1  |   `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">redis_1  |       `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">redis_1  |           `-._        _.-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">redis_1  |               `-.__.-&#x27;</span></span><br><span class="line">redis_1  |</span><br><span class="line">redis_1  | 1:M 10 Apr 2020 07:24:54.890 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">redis_1  | 1:M 10 Apr 2020 07:24:54.891 <span class="comment"># Server initialized</span></span><br><span class="line">redis_1  | 1:M 10 Apr 2020 07:24:54.891 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">redis_1  | 1:M 10 Apr 2020 07:24:54.901 * DB loaded from disk: 0.009 seconds</span><br><span class="line">redis_1  | 1:M 10 Apr 2020 07:24:54.901 * Ready to accept connections</span><br></pre></td></tr></table></figure>

<h4 id="4-3-连接测试"><a href="#4-3-连接测试" class="headerlink" title="4.3. 连接测试"></a>4.3. 连接测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  docker <span class="built_in">exec</span> -it <span class="variable">$&#123;Redis 容器 ID&#125;</span> redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h3><h4 id="5-1-客户端无法连接"><a href="#5-1-客户端无法连接" class="headerlink" title="5.1. 客户端无法连接"></a>5.1. 客户端无法连接</h4><h5 id="情况一：地址、端口号"><a href="#情况一：地址、端口号" class="headerlink" title="情况一：地址、端口号"></a>情况一：地址、端口号</h5><p>连接时确保填写正确的<strong>连接地址</strong>和<strong>端口号</strong>。</p>
<ul>
<li>从另一个容器连接到当前 Redis 服务，需要使用 <code>--link</code> 连接两个容器，并且连接地址使用 Redis 对应的服务名；</li>
<li>从物理机连接到当前 Redis 服务，确保端口是<strong>暴露出来的端口号</strong>，而不是默认的端口号。</li>
</ul>
<h5 id="情况二：配置文件"><a href="#情况二：配置文件" class="headerlink" title="情况二：配置文件"></a>情况二：配置文件</h5><p>在较高版本的 <code>redis.conf</code> 配置文件中，属性 <code>protected-mode yes</code> 被默认开启，以保证 Redis 的安全性。</p>
<p>所以必须给 Redis 设置密码才可以连接。</p>
<p>如果只是测试用而不需要密码，则修改此属性的值为 <code>no</code> ，并且属性 <code>requirepass xxx</code> 不要打开即可。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Docker</tag>
        <tag>redis-server</tag>
        <tag>redis-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 的 php-fpm 如何使用 socket 方式进行连接</title>
    <url>/post/2218952744.html</url>
    <content><![CDATA[<p>现有两个容器：<code>nginx</code> 和 <code>php-fpm</code>，我们通常的连接方式是采用 tcp 形式，配置 <code>127.0.0.1:9000</code> 将 php 相关请求转发给 php-fpm，而使用 socket 的连接方式，将获得更好的性能。</p>
<span id="more"></span>

<p>具体配置示例如下：</p>
<ol>
<li><p>配置 docker-compose.yml</p>
 <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Nginx</span></span><br><span class="line">  nginx:</span><br><span class="line">	build:</span><br><span class="line">	  context: ./build/nginx</span><br><span class="line">	  args:</span><br><span class="line">		VERSION: <span class="number">1.14</span></span><br><span class="line">	image: lnmp/nginx:<span class="number">1.14</span></span><br><span class="line">	...</span><br><span class="line">	volumes:</span><br><span class="line">	  .....</span><br><span class="line">	  - ./conf/php_fpm/sock:/sock</span><br><span class="line">	links:</span><br><span class="line">	  - php_fpm</span><br><span class="line"></span><br><span class="line">  <span class="comment"># PHP with fpm</span></span><br><span class="line">  php_fpm:</span><br><span class="line">	build:</span><br><span class="line">	  context: ./build/php70_fpm</span><br><span class="line">	  args:</span><br><span class="line">		- VERSION=<span class="number">7.0</span></span><br><span class="line">	image: lnmp/php_fpm:<span class="number">7.0</span></span><br><span class="line">	  .....</span><br><span class="line">	volumes:</span><br><span class="line">	  .....</span><br><span class="line">	  <span class="comment"># php-fpm 的配置</span></span><br><span class="line">	  - ./conf/php_fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf</span><br><span class="line">	  <span class="comment"># 挂载宿主机 socket 目录，因为 nginx 服务也需要访问</span></span><br><span class="line">	  - ./conf/php_fpm/sock:/sock</span><br></pre></td></tr></table></figure></li>
<li><p>修改 php-fpm 配置文件</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">daemonize</span> = <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="section">[www]</span></span><br><span class="line"><span class="comment">;listen = 127.0.0.1:9000</span></span><br><span class="line"><span class="attr">listen</span> = /sock/php70-fpm.sock</span><br><span class="line"><span class="attr">listen.mode</span> = <span class="number">0666</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>修改对应项目的 nginx 配置文件</p>
 <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> test.local;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /usr/share/nginx/html/testProject;</span><br><span class="line"></span><br><span class="line">  .....</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 处理 php 文件</span></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ \.php</span> &#123;</span><br><span class="line">    <span class="comment"># fastcgi_pass php_fpm:9000;</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/sock/php70-fpm.sock;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME  /var/www/html/testProject/$fastcgi_script_name;</span><br><span class="line">    <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上操作完成后，重新使用 <code>docker-compose up</code> 启动服务。</p>
<blockquote>
<p><strong>提示</strong>：如果出现 502 或 找不到 xx.sock 文件的错误，请检查确认用户权限或相关设置是否正确。</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Docker</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Docker 容器与宿主机时间不同步</title>
    <url>/post/1784173707.html</url>
    <content><![CDATA[<h4 id="解决方式一：追加容器启动参数"><a href="#解决方式一：追加容器启动参数" class="headerlink" title="解决方式一：追加容器启动参数"></a>解决方式一：追加容器启动参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v /etc/localtime:/etc/localtime:ro</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">-e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="解决方式二：调整-Dockerfile-参数"><a href="#解决方式二：调整-Dockerfile-参数" class="headerlink" title="解决方式二：调整 Dockerfile 参数"></a>解决方式二：调整 Dockerfile 参数</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> TZ=America/Los_Angeles</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure>

<p>参照：</p>
<ul>
<li><a href="https://serverfault.com/questions/683605/docker-container-time-timezone-will-not-reflect-changes">https://serverfault.com/questions/683605/docker-container-time-timezone-will-not-reflect-changes</a></li>
<li><a href="http://stackoverflow.com/questions/22800624/will-docker-container-auto-sync-time-with-the-host-machine">http://stackoverflow.com/questions/22800624/will-docker-container-auto-sync-time-with-the-host-machine</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的升级 Nginx（热部署）版本</title>
    <url>/post/1273366459.html</url>
    <content><![CDATA[<h3 id="1-升级"><a href="#1-升级" class="headerlink" title="1. 升级"></a>1. 升级</h3><h4 id="1-1-下载、编译新版本的-Nginx"><a href="#1-1-下载、编译新版本的-Nginx" class="headerlink" title="1.1. 下载、编译新版本的 Nginx"></a>1.1. 下载、编译新版本的 Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ wget https://nginx.org/download/nginx-1.15.6.tar.gz</span><br><span class="line">➜  ~ tar zxvf nginx-1.15.6.tar.gz</span><br><span class="line">➜  ~ <span class="built_in">cd</span> nginx-1.15.6</span><br><span class="line">➜  ~ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">➜  ~ make</span><br></pre></td></tr></table></figure>

<p>备份原 Nginx 二进制文件，并用新版本替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.old</span><br><span class="line">➜  ~ \cp -rf objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<h4 id="1-2-切换-Nginx-的新老进程"><a href="#1-2-切换-Nginx-的新老进程" class="headerlink" title="1.2. 切换 Nginx 的新老进程"></a>1.2. 切换 Nginx 的新老进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody    6681  6680  0 12:17 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31579  3601  0 12:28 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<p>向正在运行的老版本的 <code>master</code> 进程发送热部署信号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">kill</span> -USR2 6680</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 将使用新的二进制文件启动新版本的 master 和 worker 进程</span></span><br><span class="line"><span class="comment"># 并将所有用户请求平滑的过渡到新的进程</span></span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody    6681  6680  0 12:17 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31581  6680  0 12:29 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   31582 31581  0 12:29 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31584  3601  0 12:29 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<p>向老版本的 <code>master</code> 进程发送信号，让其优雅关闭所有 <code>worker</code> 进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">kill</span> -WINCH 6680</span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root     31581  6680  0 12:29 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   31582 31581  0 12:29 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31587  3601  0 12:31 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>⚠️ 注意</strong>：老版本的 <code>master</code> 进程不会自动退出，以方便执行版本回退操作。当新版本稳定运行后，再发送信号退出老版本的 <code>master</code> 进程。</p>
</blockquote>
<span id="more"></span>

<h3 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2. 版本回退"></a>2. 版本回退</h3><ol>
<li><p>向老版本的 Nginx 进程发送信号，重启其 <code>worker</code> 进程</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">kill</span> -HUP 6680</span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root     31581  6680  0 12:29 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   31582 31581  0 12:29 ?        00:00:00 nginx: worker process</span><br><span class="line">nobody   31588  6680  0 12:35 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31590  3601  0 12:35 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p>等老版本的 Nginx <code>worker</code> 进程启动后，向新版本的 Nginx <code>master</code> 进程发送信号，让其退出打开的所有 <code>worker</code> 进程</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">kill</span> -WINCH 31581</span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root     31581  6680  0 12:29 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   31588  6680  0 12:35 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31590  3601  0 12:35 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></li>
<li><p>最后退出新版本的 <code>master</code> 进程</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">kill</span> -QUIT 31581</span><br><span class="line">➜  ~ ps -ef | grep nginx</span><br><span class="line">root      6680     1  0 12:17 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   31588  6680  0 12:35 ?        00:00:00 nginx: worker process</span><br><span class="line">root     31592  3601  0 12:36 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Nginx 输入用户名和密码才能访问</title>
    <url>/post/2256713588.html</url>
    <content><![CDATA[<blockquote>
<p>场景：一个外网访问地址，不希望对全部人可见，希望只有正确输入用户名、密码的人才能访问时，可以通过修改 Nginx 配置实现。</p>
</blockquote>
<h3 id="1-检查-htpasswd-是否可用"><a href="#1-检查-htpasswd-是否可用" class="headerlink" title="1. 检查 htpasswd 是否可用"></a>1. 检查 htpasswd 是否可用</h3><p>我们会用到一个工具 <code>htpasswd</code>，主要用于对访问密码加密（<strong>注：千万不要直接存明文密码！！！</strong>），可使用以下命令检查是否已经安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sq@host01:~$ <span class="built_in">which</span> htpasswd</span><br><span class="line">/usr/bin/htpasswd</span><br></pre></td></tr></table></figure>

<p>如果没有这个工具，需要先安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">$ sudo apt-get install -y apache2-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">$ yum -y install httpd-tools</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="2-生成密钥文件"><a href="#2-生成密钥文件" class="headerlink" title="2. 生成密钥文件"></a>2. 生成密钥文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/.htpasswd 是生成的用户名、密码文件及存放路径。</span></span><br><span class="line"><span class="comment"># 根据自己的情况存放到一个合适位置，后面修改 Nginx 配置文件的时候会用到。</span></span><br><span class="line">$ htpasswd -c /etc/nginx/.htpasswd admin</span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看生成的文件内容如下</span></span><br><span class="line">$ cat /etc/nginx/.htpasswd</span><br><span class="line">admin:$apr1$pCPJOCsr<span class="variable">$pyVB5i</span>.K/CuUPHGeWm6XN1</span><br></pre></td></tr></table></figure>

<h3 id="3-配置-Nginx-并重启"><a href="#3-配置-Nginx-并重启" class="headerlink" title="3. 配置 Nginx 并重启"></a>3. 配置 Nginx 并重启</h3><p>如下修改 Nginx 配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  demo.xxx.com; <span class="comment"># 需要控制访问的域名</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /data/wwwroot/demo;</span><br><span class="line">    <span class="attribute">index</span>  index.htm index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">auth_basic</span> <span class="string">&quot;Restricted&quot;</span>; <span class="comment"># 弹窗上的提示信息（有些浏览器不显示）</span></span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> /etc/nginx/.htpasswd; <span class="comment"># 生成的用户名、密码文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 Nginx，访问 <code>demo.xxx.com</code> 即可看到用户名、密码输入框。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下 MySQL 自动备份脚本</title>
    <url>/post/3905919184.html</url>
    <content><![CDATA[<blockquote>
<p>基于 mysqldump 命令创建的脚本，支持自动备份1个或多个数据库到指定目录，如果需要备份到本地，请参考：<a href="/post/3997579074.html">使用 Shell 备份远程服务器上的 MySQL 数据库到本机</a></p>
</blockquote>
<span id="more"></span>

<h3 id="1-源码"><a href="#1-源码" class="headerlink" title="1. 源码"></a>1. 源码</h3><p>新建 Shell 脚本文件：<code>mysqlDump.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 备份当前服务器上指定的数据库（多个库，以 , 分隔）</span></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="comment">#       ./mysqlDump.sh 备份默认设置的数据库</span></span><br><span class="line"><span class="comment">#       ./mysqlDump.sh db_name1,db_name2,... 备份指定名称的数据库</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># File: https://github.com/whorusq/linux-learning/blob/master/shell/mysqlDump.sh</span></span><br><span class="line"><span class="comment"># Author: whoru.S.Q &lt;whoru@sqiang.net&gt;</span></span><br><span class="line"><span class="comment"># Version: 1.0</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接参数</span></span><br><span class="line">DB_HOST=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">DB_USER=<span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PWD=<span class="string">&quot;&quot;</span></span><br><span class="line">DB_PORT=<span class="string">&quot;3306&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待备份的数据库名称，多个库时以 , 分隔</span></span><br><span class="line">DB_NAME=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份文件路径</span></span><br><span class="line">DUMP_FILE_PATH=/opt/backup</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> main &#123;</span><br><span class="line">    <span class="comment"># 参数检查</span></span><br><span class="line">    <span class="comment"># 如果当前脚本在执行时传递了参数，则优先级高于当前脚本文件中变量的默认设置</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        DB_NAME=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> [ ! <span class="string">&quot;<span class="variable">$DB_NAME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">read</span> -p <span class="string">&quot;请输入要备份的数据库名称：&quot;</span> dbname</span><br><span class="line">            DB_NAME=<span class="variable">$dbname</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查备份目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$DUMP_FILE_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        mkdir -p <span class="variable">$DUMP_FILE_PATH</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> -ne <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -en <span class="string">&quot;无法创建备份文件目录：<span class="variable">$DUMP_FILE_PATH</span>&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 操作开始</span></span><br><span class="line">    OLD_IFS=<span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line">    IFS=<span class="string">&quot;,&quot;</span></span><br><span class="line">    arr=(<span class="variable">$DB_NAME</span>)</span><br><span class="line">    IFS=<span class="string">&quot;<span class="variable">$OLD_IFS</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> db <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># echo &quot;$db&quot;</span></span><br><span class="line">        doDump <span class="variable">$db</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> doDump &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;\n\033[32m==&gt;\033[0m 开始备份数据库：<span class="variable">$1</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">    dump_date=`date +%Y%m%d%H%M%S`</span><br><span class="line">    dump_file=<span class="variable">$1</span><span class="string">&quot;_&quot;</span><span class="variable">$dump_date</span><span class="string">&quot;.sql&quot;</span></span><br><span class="line">    final_dump_file=<span class="variable">$dump_file</span><span class="string">&quot;.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备份</span></span><br><span class="line">    <span class="comment"># 考虑还原数据库时的通用性，备份的同时不执行压缩操作</span></span><br><span class="line">    $(<span class="built_in">which</span> mysqldump) -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PWD</span> -P <span class="variable">$DB_PORT</span> <span class="variable">$DB_NAME</span> &gt; <span class="variable">$dump_file</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> -ne <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -en <span class="string">&quot;操作失败&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 压缩、转移备份的文件</span></span><br><span class="line">    tar -zcvf <span class="variable">$final_dump_file</span> <span class="variable">$dump_file</span></span><br><span class="line">    mv <span class="variable">$final_dump_file</span> <span class="variable">$DUMP_FILE_PATH</span></span><br><span class="line">    rm -rf <span class="variable">$dump_file</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;\n\033[32m==&gt;\033[0m 备份完成，生成备份文件：<span class="variable">$DUMP_FILE_PATH</span>/<span class="variable">$final_dump_file</span>\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">main <span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-使用说明"><a href="#2-使用说明" class="headerlink" title="2. 使用说明"></a>2. 使用说明</h3><ol>
<li><p>使用前先设置数据库连接参数</p>
</li>
<li><p>设置待备份的数据库名称</p>
<ul>
<li>方式一：在脚本文件里修改变量 DB_NAME</li>
<li>方式二：运行脚本时动态传参，如 <code>./mysqlDump.sh db_name</code></li>
</ul>
<blockquote>
<p>注意：脚本运行参数优先级高于脚本文件中的设置；待备份的数据库名称支持多个，以 <code>,</code> 分隔。</p>
</blockquote>
</li>
</ol>
<h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./mysqlDump.sh online_v3.0</span><br><span class="line"></span><br><span class="line">==&gt; 开始备份数据库：online_v3.0</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">online_v3.0_20181012164400.sql</span><br><span class="line"></span><br><span class="line">==&gt; 备份完成，生成备份文件：/opt/backup/online_v3.0_20181012164400.sql.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 脚本入门及语法速查</title>
    <url>/post/3078944762.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍 Linux 下 Shell 的分类及基本语法。</p>
</blockquote>
<span id="more"></span>

<h3 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h3><h4 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1. 基本结构"></a>1.1. 基本结构</h4><p>创建 <code>helloWorld.sh</code> 文件，写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>#!</code> 告诉系统其后路径所指定的程序是解释此脚本文件的 Shell 程序，常见的 Shell 程序有以下几类（可通过命令 <code>cat /etc/shells</code> 查看）：</p>
<ul>
<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>
<li>Bourne Again Shell（/bin/bash）</li>
<li>C Shell（/usr/bin/csh）</li>
<li>K Shell（/usr/bin/ksh）</li>
<li>Shell for Root（/sbin/sh）</li>
<li>……</li>
</ul>
<p>其中 <strong>Bash</strong> 在日常工作中被广泛使用，同时也是大多数 Linux 系统默认的 Shell。</p>
<p>执行该 sh 脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加可执行权限</span></span><br><span class="line">➜  chmod u+x helloWorld.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行脚本</span></span><br><span class="line">➜  ./helloWorld.sh</span><br><span class="line">或</span><br><span class="line">➜  sh hellowWorld.sh</span><br></pre></td></tr></table></figure>
<h4 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2. 注释"></a>1.2. 注释</h4><p>单行注释</p>
<ul>
<li>以 <code>#</code> 开头的行是注释</li>
</ul>
<p>多行注释</p>
<ul>
<li><p>方式一：用一对 <code>&#123;&#125;</code> 括起来，定义成一个函数，没有地方调用即达到注释的效果。</p>
</li>
<li><p>方式二：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h3><h4 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1. 变量"></a>2.1. 变量</h4><ul>
<li><p>变量定义</p>
<ul>
<li>变量名建议大写；</li>
<li>有效字符仅能包含字母、数字、下划线，首个字符不能以数字开头；</li>
<li><code>=</code> 两边不能有空格；</li>
<li>不能使用标点符号；</li>
<li>不能使用 bash 里的关键字（可用 <code>help</code> 命令查看保留关键字）。</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">VAR1=<span class="string">&quot;whoru&quot;</span></span><br><span class="line">VAR2=100</span><br><span class="line">var3=/data/www</span><br><span class="line">var4_name=<span class="string">&quot;root&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>访问变量 <code>$VAR1</code> 或 <code>$(var1)</code>，其中，加花括号是为了帮助解释器识别变量的边界。</p>
</li>
<li><p>设置变量只读 <code>readonly VAR1</code></p>
</li>
<li><p>删除变量（<strong>不适用于只读变量！</strong>） <code>unset VAR1</code></p>
</li>
<li><p>局部、全局变量</p>
<ul>
<li>不做特殊声明，shell 中所有变量都是<strong>全局变量</strong>。</li>
<li>可以使用关键字 <code>local</code> 定义局部变量。</li>
<li><em>如果函数内部和外部存在同名变量，则内部会覆盖外部</em>。</li>
</ul>
</li>
</ul>
<h4 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2. 字符串"></a>2.2. 字符串</h4><ul>
<li><p>值用双引号 <code>&quot;&quot;</code> 或单引号 <code>&#39;&#39;</code> 表示</p>
<ul>
<li>单引号单限制：<ul>
<li>单引号里的任何字符都会原样输出；</li>
<li>单引号字符串中的变量是无效的；</li>
</ul>
</li>
<li>双引号的优点：<ul>
<li>双引号里可以有变量；</li>
<li>双引号里可以出现转义字符；</li>
</ul>
</li>
</ul>
</li>
<li><p>其它</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串拼接</span></span><br><span class="line">name=<span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">var2=<span class="string">&quot;hello, &quot;</span><span class="variable">$name</span> <span class="comment"># 输出 hello, xiaoming</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字符串长度</span></span><br><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment"># 输出 4</span></span><br><span class="line"><span class="built_in">echo</span> `expr length <span class="string">&quot;<span class="variable">$string</span>&quot;</span>` <span class="comment"># 输出 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取子字符串</span></span><br><span class="line">msg=<span class="string">&quot;zhangsan is a good man&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;msg:1:4&#125;</span> <span class="comment"># 输出 hang</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;msg: -3&#125;</span> <span class="comment"># 输出 man</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-数组"><a href="#2-3-数组" class="headerlink" title="2.3. 数组"></a>2.3. 数组</h4><ul>
<li><p>bash 支持一维数组（<strong>不支持多维数组</strong>），并且没有限定数组的大小。</p>
</li>
<li><p>数组元素的下标由 0 开始，获取数组元素要用到下标。</p>
</li>
<li><p>定义：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array1=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">array2[0]=value0</span><br><span class="line">array2[1]=value1</span><br><span class="line">array2[2]=value2</span><br></pre></td></tr></table></figure></li>
<li><p>读取</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定下标的元素</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;array2[2]&#125;</span>; // 输出 value2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组所有元素</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;array2[*]&#125;</span>; // 输出 value0 value1 value2</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;array2[@]&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取数组元素个数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;#array2[@]&#125;</span>; // 输出 3</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;#array2[*]&#125;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>取得数组中指定下标元素的字符长度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="variable">$&#123;#array2[2]&#125;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-4-传递参数"><a href="#2-4-传递参数" class="headerlink" title="2.4. 传递参数"></a>2.4. 传递参数</h4><p>在执行 Shell 脚本时，可以向脚本传递参数，脚本内获取参数的格式为 <code>$n</code>，这里的 <strong>n</strong> 指传递给脚本的第 <strong>n</strong> 个参数。</p>
<p>如下脚本文件 <code>demo.sh</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>执行该文件，并传递参数，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ./demo3.sh param1 param2 param3</span><br><span class="line">执行的文件名：./demo3.sh</span><br><span class="line">第一个参数为：param1</span><br><span class="line">第二个参数为：param2</span><br><span class="line">第三个参数为：param3</span><br></pre></td></tr></table></figure>

<p>其中，<code>$0</code> 是一个特殊变量，代表当前脚本文件名，还有几个类似的变量如下：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$#</td>
<td>传递给脚本的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>以一个单字符串的形式显示所有向脚本传递的参数，如 <code>&quot;$1 $2 ... $n&quot;</code></td>
</tr>
<tr>
<td>$@</td>
<td>与 <code>$*</code> 相同，但是使用引号把每个参数包裹起来，如 <code>&quot;$1&quot; &quot;$2&quot; ... &quot;$n&quot;</code></td>
</tr>
<tr>
<td>$?</td>
<td>最后一个执行的命令的退出状态：0 正常；1 或其它任何值，表示有错误</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>最后一个后台命令的进程号。</td>
</tr>
</tbody></table>
<h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h3><h4 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1. 算数运算符"></a>3.1. 算数运算符</h4><blockquote>
<p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，其中 <strong>expr</strong> 最常用。</p>
</blockquote>
<p>假定有两个变量：<code>a=10</code> <code>b=20</code></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>加法</td>
<td><code>`expr $a + $b`</code> 结果为 30。</td>
</tr>
<tr>
<td><code>-</code></td>
<td>减法</td>
<td><code>`expr $a - $b`</code> 结果为 -10。</td>
</tr>
<tr>
<td><code>*</code></td>
<td>乘法</td>
<td><code>`expr $a \* $b`</code> 结果为  200。</td>
</tr>
<tr>
<td><code>/</code></td>
<td>除法</td>
<td><code>`expr $b / $a`</code> 结果为 2。</td>
</tr>
<tr>
<td><code>%</code></td>
<td>取余</td>
<td><code>`expr $b % $a`</code> 结果为 0。</td>
</tr>
<tr>
<td><code>=</code></td>
<td>赋值</td>
<td><code>a=$b</code> 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td><code>==</code></td>
<td>用于比较两个数字是否相同</td>
<td><code>[ $a == $b ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>用于比较两个数字是否不相同</td>
<td><code>[ $a != $b ]</code> 返回 true。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：</p>
<ul>
<li>表达式和运算符之间要有空格，如 <code>2+2</code> 是错误的，必须写成 <code>2 + 2</code>;</li>
<li>完整的表达式要被反引号 <code>` `</code> 包裹起来；</li>
</ul>
<h4 id="3-2-关系运算符"><a href="#3-2-关系运算符" class="headerlink" title="3.2. 关系运算符"></a>3.2. 关系运算符</h4><blockquote>
<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
</blockquote>
<p>假定有两个变量：<code>a=10</code> <code>b=20</code></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-eq</code></td>
<td>检测两个数是否相等</td>
<td><code>[ $a -eq $b ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>-ne</code></td>
<td>检测两个数是否不相等</td>
<td><code>[ $a -ne $b ]</code> 返回 true。</td>
</tr>
<tr>
<td><code>-gt</code></td>
<td>检测左边的数是否大于右边的</td>
<td><code>[ $a -gt $b ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>-lt</code></td>
<td>检测左边的数是否小于右边的</td>
<td><code>[ $a -lt $b ]</code> 返回 true。</td>
</tr>
<tr>
<td><code>-ge</code></td>
<td>检测左边的数是否大于等于右边的</td>
<td><code>[ $a -ge $b ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>-le</code></td>
<td>检测左边的数是否小于等于右边的</td>
<td><code>[ $a -le $b ]</code> 返回 true。</td>
</tr>
</tbody></table>
<h4 id="3-3-布尔操作符"><a href="#3-3-布尔操作符" class="headerlink" title="3.3. 布尔操作符"></a>3.3. 布尔操作符</h4><p>假定有两个变量：<code>a=10</code> <code>b=20</code></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>!</code></td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td><code>[ ! false ]</code> 返回 true。</td>
</tr>
<tr>
<td><code>-o</code></td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>
</tr>
<tr>
<td><code>-a</code></td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>
</tr>
</tbody></table>
<h4 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4. 逻辑运算符"></a>3.4. 逻辑运算符</h4><p>假定有两个变量：<code>a=10</code> <code>b=20</code></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑的 AND</td>
<td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>
</tr>
<tr>
<td>&#124;&#124;</td>
<td>逻辑的 OR</td>
<td>[[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true</td>
</tr>
</tbody></table>
<h4 id="3-5-字符串运算符"><a href="#3-5-字符串运算符" class="headerlink" title="3.5. 字符串运算符"></a>3.5. 字符串运算符</h4><p>假定有两个变量：<code>a=&quot;abc&quot;</code> <code>b=&quot;efg&quot;</code></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>=</code></td>
<td>检测两个字符串是否相等</td>
<td><code>[ $a = $b ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>检测两个字符串是否不相等</td>
<td><code>[ $a != $b ]</code> 返回 true。</td>
</tr>
<tr>
<td><code>-z</code></td>
<td>检测字符串长度是否为 0（空）</td>
<td><code>[ -z $a ]</code> 返回 false。</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>检测字符串长度是否不为0（非空）</td>
<td><code>[ -n &quot;$a&quot; ]</code> 返回 true。</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为不为空</td>
<td><code>[ $a ]</code> 返回 true。</td>
</tr>
</tbody></table>
<h4 id="3-6-文件测试运算符"><a href="#3-6-文件测试运算符" class="headerlink" title="3.6. 文件测试运算符"></a>3.6. 文件测试运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>说明（如果是，则返回 true）</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>-b</code></td>
<td>检测文件是否是块设备文件</td>
<td><code>[ -b $file ]</code></td>
</tr>
<tr>
<td><code>-c</code></td>
<td>检测文件是否是字符设备文件</td>
<td><code>[ -c $file ]</code></td>
</tr>
<tr>
<td><code>-d</code></td>
<td>检测文件是否是目录</td>
<td><code>[ -d $file ]</code></td>
</tr>
<tr>
<td><code>-f</code></td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件）</td>
<td><code>[ -f $file ]</code></td>
</tr>
<tr>
<td><code>-g</code></td>
<td>检测文件是否设置了 SGID 位</td>
<td><code>[ -g $file ]</code></td>
</tr>
<tr>
<td><code>-k</code></td>
<td>检测文件是否设置了粘着位(Sticky Bit)</td>
<td><code>[ -k $file ]</code></td>
</tr>
<tr>
<td><code>-p</code></td>
<td>检测文件是否是有名管道</td>
<td><code>[ -p $file ]</code></td>
</tr>
<tr>
<td><code>-u</code></td>
<td>检测文件是否设置了 SUID 位</td>
<td><code>[ -u $file ]</code></td>
</tr>
<tr>
<td><code>-r</code></td>
<td>检测文件是否可读</td>
<td><code>[ -r $file ]</code></td>
</tr>
<tr>
<td><code>-w</code></td>
<td>检测文件是否可写</td>
<td><code>[ -w $file ]</code></td>
</tr>
<tr>
<td><code>-x</code></td>
<td>检测文件是否可执行</td>
<td><code>[ -x $file ]</code></td>
</tr>
<tr>
<td><code>-s</code></td>
<td>检测文件是否为非空（文件大小是否大于0）文件</td>
<td><code>[ -s $file ]</code></td>
</tr>
<tr>
<td><code>-e</code></td>
<td>检测文件（包括目录）是否存在</td>
<td><code>[ -e $file ]</code></td>
</tr>
</tbody></table>
<h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h3><h4 id="4-1-if-语句"><a href="#4-1-if-语句" class="headerlink" title="4.1. if 语句"></a>4.1. if 语句</h4><p>大多使用<strong>关系运算符</strong>检查关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-case-语句"><a href="#4-2-case-语句" class="headerlink" title="4.2. case 语句"></a>4.2. case 语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">    模式1)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">        ;;</span><br><span class="line">    模式2）</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        commandDefault</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>


<h4 id="4-3-while-语句"><a href="#4-3-while-语句" class="headerlink" title="4.3. while 语句"></a>4.3. while 语句</h4><p>用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-until-循环"><a href="#4-4-until-循环" class="headerlink" title="4.4. until 循环"></a>4.4. until 循环</h4><p>执行一系列命令直至条件为 true 时停止，它与 <code>while 循环</code> 在处理方式上刚好相反。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="4-5-for-循环"><a href="#4-5-for-循环" class="headerlink" title="4.5. for 循环"></a>4.5. for 循环</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="4-6-无限循环"><a href="#4-6-无限循环" class="headerlink" title="4.6. 无限循环"></a>4.6. 无限循环</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法1</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法3</span></span><br><span class="line"><span class="keyword">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure>

<h4 id="4-7-退出循环"><a href="#4-7-退出循环" class="headerlink" title="4.7. 退出循环"></a>4.7. 退出循环</h4><ul>
<li><code>break</code> 跳出整个循环，执行循环体后面的代码，支持 <code>break n</code> 退出多层嵌套循环</li>
<li><code>continue</code> 结束当前循环，同样支持 <code>continue n</code> 退出多层</li>
</ul>
<h3 id="5-输入、输出重定向"><a href="#5-输入、输出重定向" class="headerlink" title="5. 输入、输出重定向"></a>5. 输入、输出重定向</h3><h4 id="5-1-命令列表"><a href="#5-1-命令列表" class="headerlink" title="5.1. 命令列表"></a>5.1. 命令列表</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>command &gt; file</code></td>
<td>将输出结果重定向到 file。</td>
</tr>
<tr>
<td><code>command &lt; file</code></td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td><code>command &gt;&gt; file</code></td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td><code>n &gt; file</code></td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td><code>n &gt;&gt; file</code></td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td><code>n &gt;&amp; m</code></td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td><code>n &lt;&amp; m</code></td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td><code>&lt;&lt; tag</code></td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody></table>
<p>关于文件描述符：</p>
<ul>
<li><code>0</code> 通常是标准输入（STDIN），Unix程序默认从 <code>stdin</code> 读取数据。</li>
<li><code>1</code> 标准输出（STDOUT），Unix程序默认向 <code>stdout</code> 输出数据。</li>
<li><code>2</code> 标准错误输出（STDERR），Unix程序会向 <code>stderr</code> 流中写入错误信息。</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 stdout 和 stderr 合并后重定向到 file</span></span><br><span class="line">➜  <span class="built_in">command</span> &gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="5-2-dev-null-文件"><a href="#5-2-dev-null-文件" class="headerlink" title="5.2. /dev/null 文件"></a>5.2. /dev/null 文件</h4><p>这是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，也什么也读不到。我们通常将命令的输出重定向到它，起到“禁止输出”的效果。</p>
<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 屏蔽 stdout 和 stderr</span></span><br><span class="line">➜  <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="5-3-Here-文档"><a href="#5-3-Here-文档" class="headerlink" title="5.3. Here 文档"></a>5.3. Here 文档</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将两个 delimiter 之间的内容(document) 作为输入传递给 command。</span></span><br><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">delimiter</span></span><br><span class="line"><span class="string">document</span></span><br><span class="line"><span class="string">delimiter</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>结尾的 <code>delimiter</code> 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>
<li>开始的 <code>delimiter</code> 前后的空格会被忽略掉。</li>
</ul>
<h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h3><h4 id="6-1-基本语法"><a href="#6-1-基本语法" class="headerlink" title="6.1. 基本语法"></a>6.1. 基本语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funcName [()] &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">command</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>function</code> 关键字非必须；</li>
<li>如果该函数不传入变量，这函数名的后面的括号可以不加；</li>
<li><code>return</code> 函数返回值<ul>
<li>非必须，默认返回最后一条命令的执行结果；</li>
<li>它只能返回 1 ～ 255 之间的整数，通常只是用来供其它地方获取状态，比如 0 成功，1 或 非 0 失败；</li>
<li>也可以使用 <code>echo</code> 输出一个字符串作为函数的返回值。</li>
</ul>
</li>
<li>调用函数仅使用其函数名，如 <code>funcName</code>；</li>
<li><strong>所有函数在使用前必须定义</strong>，即函数调用必须要在函数声明之后。</li>
</ul>
<h4 id="6-2-函数参数"><a href="#6-2-函数参数" class="headerlink" title="6.2. 函数参数"></a>6.2. 函数参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用并传参</span></span><br><span class="line">func param1 param2 param3</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：</p>
<ul>
<li>在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如：$1 表示第一个参数，$2 表示第二个参数；</li>
<li>当 n &gt;= 10 时，需要使用 <code>$&#123;n&#125;</code> 来获取参数。</li>
</ul>
<h3 id="7-包含文件（封装函数库）"><a href="#7-包含文件（封装函数库）" class="headerlink" title="7. 包含文件（封装函数库）"></a>7. 包含文件（封装函数库）</h3><p>通常我们将公用的函数抽离到单独文件，以便重复调用，减少冗余代码。</p>
<p>对于一个函数库文件：</p>
<ul>
<li>后缀名任意，通常使用 <code>.lib</code> 进行标识；</li>
<li>一般不授予可执行权限；</li>
<li>不需要跟脚本放在同一级目录，只需在脚本引用时指定；</li>
<li>通常第一行一般使用 <code>#!/bin/echo</code> 输出警告信息，避免用户执行。</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/echo</span></span><br><span class="line"><span class="comment"># /home/user1/lib/comm_function.lib</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> add &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`expr <span class="variable">$1</span> + <span class="variable">$2</span>`&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># /home/user1/test.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入函数库文件</span></span><br><span class="line"><span class="comment"># 使用绝对 或 相对路径</span></span><br><span class="line">. ./lib/comm_function.lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用文件中的函数</span></span><br><span class="line">add 1 3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  sh -x test_functions.sh</span><br><span class="line">+ . ./lib/comm_function.lib</span><br><span class="line">+ add 1 3</span><br><span class="line">++ expr 1 + 3</span><br><span class="line">+ <span class="built_in">echo</span> 4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8. 常用命令"></a>8. 常用命令</h3><h4 id="8-1-find-命令"><a href="#8-1-find-命令" class="headerlink" title="8.1. find 命令"></a>8.1. find 命令</h4><p>语法：<code>find [路径] [选项] [操作]</code></p>
<h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-name</code></td>
<td>文件名</td>
<td><code>-iname</code></td>
<td>文件名（忽略大小写）</td>
</tr>
<tr>
<td><code>-perm 777</code></td>
<td>文件权限</td>
<td><code>-type f｜d｜l｜c｜b｜p</code></td>
<td>文件类型</td>
</tr>
<tr>
<td><code>-user</code></td>
<td>文件属主</td>
<td><code>-nouser</code></td>
<td>无有效属主</td>
</tr>
<tr>
<td><code>-group</code></td>
<td>文件属组</td>
<td><code>-nogroup</code></td>
<td>无有效属组</td>
</tr>
<tr>
<td><code>-size -n｜+n</code></td>
<td>文件大小</td>
<td><code>-prune</code></td>
<td>排除某些查找目录（通常与 <code>-path</code> 一同使用）</td>
</tr>
<tr>
<td><code>-mindepth n</code></td>
<td>从 n 级子目录开始查找</td>
<td><code>-maxdepth n</code></td>
<td>最多搜索到 n 级子目录</td>
</tr>
<tr>
<td><code>-mtime -n｜+n</code></td>
<td>文件修改时间（天）</td>
<td><code>-mmin -n｜+n</code></td>
<td>文件修改时间（分钟）</td>
</tr>
<tr>
<td><code>-newer file1</code></td>
<td>文件修改时间比 file1 早</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件名</span></span><br><span class="line">➜  find /etc/ -name <span class="string">&#x27;*.conf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件类型</span></span><br><span class="line"><span class="comment"># f 文件；d 目录；c 字符设备文件；</span></span><br><span class="line"><span class="comment"># b 块设备文件；l 链接文件；p 管道文件</span></span><br><span class="line">➜  find /etc/ -<span class="built_in">type</span> f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件大小</span></span><br><span class="line"><span class="comment"># -n 小于等于；+n 大于等于</span></span><br><span class="line">➜  find . -size +100M</span><br><span class="line">➜  find . -size -10k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件修改时间</span></span><br><span class="line"><span class="comment"># -n &lt; n天以内修改过的文件；</span></span><br><span class="line"><span class="comment"># n = n 天修改过得文件；</span></span><br><span class="line"><span class="comment"># +n &gt; n天以外修改过的文件；</span></span><br><span class="line">➜  find . -mtime -3</span><br><span class="line">➜  find . -mtime 3</span><br><span class="line">➜  find . -mtime +3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除目录</span></span><br><span class="line"><span class="comment"># -path ./test1 -prune 排除 test1 目录</span></span><br><span class="line"><span class="comment"># -path ./test2 -prune 排除 test2 目录</span></span><br><span class="line"><span class="comment"># -o type f 固定结尾写法</span></span><br><span class="line">➜  find . -path ./test1 -prune -o -path ./test2 -prune -o <span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>

<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><ul>
<li><code>-print</code> 打印输出</li>
<li><code>-exec &#39;command&#39; &#123;&#125; \;</code> 其中 <code>&#123;&#125;</code> 是前面查找匹配到的结果</li>
<li><code>-ok</code> 与 exec 功能一样，但每次操作都给用户提示，由用户决定是否执行对应的操作。</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 30 天以前的日志文件并删除</span></span><br><span class="line">➜  find /var/<span class="built_in">log</span> -name <span class="string">&#x27;*.log&#x27;</span> -mtime +30 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有 .conf 文件，并移动到指定目录</span></span><br><span class="line">➜  find /etc/apache -name <span class="string">&#x27;*.conf&#x27;</span> -<span class="built_in">exec</span> cp &#123;&#125; /home/user1/backup \;</span><br></pre></td></tr></table></figure>

<h4 id="8-2-echo-命令"><a href="#8-2-echo-命令" class="headerlink" title="8.2. echo 命令"></a>8.2. echo 命令</h4><p>用于字符串的输出，基本格式 <code>echo string</code>。</p>
<p>使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示普通字符</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span> <span class="comment"># 输出 It is a test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示转义字符</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;\&quot;It is a test\&quot;&quot;</span> <span class="comment"># 输出 &quot;It is a test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示变量</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">NAME=<span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$NAME</span> It is a test&quot;</span> <span class="comment"># 输出 xiaoming is a test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示换行</span></span><br><span class="line">➜  <span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> <span class="comment"># -e 开启转义</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示不换行</span></span><br><span class="line">➜  <span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果定向至文件</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span> &gt; myfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示命令执行结果</span></span><br><span class="line">➜  <span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure>

<h4 id="8-3-printf-命令"><a href="#8-3-printf-命令" class="headerlink" title="8.3. printf 命令"></a>8.3. printf 命令</h4><p>模仿 C 程序库（library）里的 printf() 程序，主要用于格式化输出。</p>
<p>默认 <code>printf</code> 不会像 <code>echo</code> 自动添加换行符，我们可以手动添加 <code>\n</code>。</p>
<p>其基本语法格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>format-string</code> 为格式控制字符串</li>
<li><code>arguments</code> 为参数列表。</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg</span><br><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234</span><br><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543</span><br><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876</span><br><span class="line">姓名     性别   体重kg</span><br><span class="line">郭靖     男      66.12</span><br><span class="line">杨过     男      48.65</span><br><span class="line">郭芙     女      47.99</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>%s</code> <code>%c</code> <code>%d</code> <code>%f</code> 都是格式替代符；</li>
<li><code>%-10s</code> 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</li>
<li><code>%-4.2f</code> 指格式化为小数，其中.2指保留2位小数。</li>
</ul>
<p>更多使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没有引号也可以输出</span></span><br><span class="line">➜  <span class="built_in">printf</span> %s abcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></span><br><span class="line">➜  <span class="built_in">printf</span> %s abc def</span><br><span class="line">abcdef</span><br><span class="line"></span><br><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%s\n&quot;</span> abc def</span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class="line">➜  <span class="built_in">printf</span> <span class="string">&quot;%s and %d \n&quot;</span></span><br><span class="line"> and 0</span><br></pre></td></tr></table></figure>

<h4 id="8-4-test-命令"><a href="#8-4-test-命令" class="headerlink" title="8.4. test 命令"></a>8.4. test 命令</h4><p>用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试（详见<a href="#3-%E8%BF%90%E7%AE%97%E7%AC%A6">第3节</a>对应的运算符部分）。</p>
<p>基本使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件已存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="9-补充"><a href="#9-补充" class="headerlink" title="9. 补充"></a>9. 补充</h3><h4 id="9-1-变量替换"><a href="#9-1-变量替换" class="headerlink" title="9.1. 变量替换"></a>9.1. 变量替换</h4><table>
<thead>
<tr>
<th>规则</th>
<th>说明</th>
<th>示例 <code>var=&quot;Hello shell&quot;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>$&#123;变量#匹配规则&#125;</code></td>
<td>从头开始匹配，最短删除</td>
<td><code>$&#123;var#*e&#125;</code> =&gt; <code>llo shell</code></td>
</tr>
<tr>
<td><code>$&#123;变量##匹配规则&#125;</code></td>
<td>从头开始匹配，最长删除</td>
<td><code>$&#123;var##*e&#125;</code> =&gt; <code>ll</code></td>
</tr>
<tr>
<td><code>$&#123;变量%匹配规则&#125;</code></td>
<td>从尾开始匹配，最短删除</td>
<td><code>$&#123;var%e*&#125;</code> =&gt; <code>Hello sh</code></td>
</tr>
<tr>
<td><code>$&#123;变量%%匹配规则&#125;</code></td>
<td>从尾开始匹配，最长删除</td>
<td><code>$&#123;var%%e*&#125;</code> =&gt; <code>H</code></td>
</tr>
<tr>
<td><code>$&#123;变量/旧字符串/新字符串&#125;</code></td>
<td>只替换匹配到的第一个</td>
<td><code>$&#123;var/e/*&#125;</code> =&gt; <code>H*llo shell</code></td>
</tr>
<tr>
<td><code>$&#123;变量//旧字符串/新字符串&#125;</code></td>
<td>全部替换</td>
<td><code>$&#123;var//e/*&#125;</code> =&gt; <code>H*llo sh*ll</code></td>
</tr>
</tbody></table>
<h4 id="9-2-有类型变量"><a href="#9-2-有类型变量" class="headerlink" title="9.2. 有类型变量"></a>9.2. 有类型变量</h4><p>shell 中变量默认都是<strong>字符串</strong>，除非使用以下方式声明。</p>
<table>
<thead>
<tr>
<th>declare 或 typeset 参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>只读</td>
</tr>
<tr>
<td>-i</td>
<td>整数</td>
</tr>
<tr>
<td>-a</td>
<td>数组</td>
</tr>
<tr>
<td>-f</td>
<td>在脚本中显示定义的函数和内容</td>
</tr>
<tr>
<td>-F</td>
<td>在脚本中显示定义的函数</td>
</tr>
<tr>
<td>-X</td>
<td>将变量声明为环境变量</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">declare</span> -r var1=<span class="string">&quot;hello shell type&quot;</span></span><br><span class="line">➜  var1=<span class="string">&quot;hello lalala&quot;</span></span><br><span class="line">zsh: read-only variable: var1</span><br></pre></td></tr></table></figure>

<h4 id="9-3-使用-bc-进行浮点数运算"><a href="#9-3-使用-bc-进行浮点数运算" class="headerlink" title="9.3. 使用 bc 进行浮点数运算"></a>9.3. 使用 bc 进行浮点数运算</h4><p>系统内置，支持 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>^ 指数</code>、<code>% 取余</code>，并使用 <code>scale</code> 指定小数位数，默认 <code>0</code>。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">which</span> bc</span><br><span class="line">/usr/bin/bc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5+4&quot;</span> | bc</span><br><span class="line">9</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5-4&quot;</span> | bc</span><br><span class="line">1</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5*4&quot;</span> | bc</span><br><span class="line">20</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5/4&quot;</span> | bc</span><br><span class="line">1</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;scale=3;5/4&quot;</span> | bc</span><br><span class="line">1.250</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5%4&quot;</span> | bc</span><br><span class="line">1</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;5^4&quot;</span> | bc</span><br><span class="line">625</span><br></pre></td></tr></table></figure>

<h4 id="9-4-…-与-…"><a href="#9-4-…-与-…" class="headerlink" title="9.4. [ … ] 与 [[ … ]]"></a>9.4. [ … ] 与 [[ … ]]</h4><ul>
<li><code>[[</code> 是关键字，许多 shell 并不支持这种方式。<ul>
<li>所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换；</li>
<li>更能防止脚本里的许多逻辑错误，比如说 <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code> 和 <code>&gt;</code> 操作符能在一个 <code>[[ ... ]]</code> 测试里通过，但在 <code>[ ... ]</code> 结构会发生错误。</li>
<li>会进行算术扩展。</li>
</ul>
</li>
<li><code>[</code> 是一条命令，与 test 等价，大多数的 shell 都支持。<ul>
<li>在其中的表达式应是它的命令行参数，所以串比较操作符 <code>&gt;</code> 与 <code>&lt;</code> 必须转义，否则就变成 IO 重定向操作符了。</li>
<li>不会进行算术扩展。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell文本处理三剑客之awk</title>
    <url>/post/4211206534.html</url>
    <content><![CDATA[<blockquote>
<p>awk 是一个文本处理工具，通常用于处理数据并生成结果报告。其命名源于三位创始人姓氏首字母：Alfred Aho、Peter Weinberger、Brian Kernighan。</p>
</blockquote>
<p>语法：</p>
<ul>
<li><code>awk [options] &#39;BEGIN&#123;&#125; pattern &#123;commands&#125; END&#123;&#125;&#39; file</code></li>
<li><code>stdout | awk [options] &#39;BEGIN&#123;&#125; pattern &#123;commands&#125; END&#123;&#125;&#39;</code></li>
</ul>
<p>说明：</p>
<ul>
<li><code>options</code> 选项</li>
<li><code>BEGIN&#123;&#125;</code> 正式处理数据之前执行</li>
<li><code>pattern</code> 匹配模式</li>
<li><code>&#123;commands;...&#125;</code> 处理命令，可能多行</li>
<li><code>END&#123;&#125;</code> 处理完所有匹配数据后执行</li>
</ul>
<span id="more"></span>

<h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><table>
<thead>
<tr>
<th>变量名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>整行内容</td>
</tr>
<tr>
<td><code>$1-$n</code></td>
<td>当前行的第 1 - n 个字段（列）</td>
</tr>
<tr>
<td><code>NF</code></td>
<td><em>Number Field</em>，当前行字段个数（多少列）</td>
</tr>
<tr>
<td><code>NR</code></td>
<td><em>Number Row</em>，当前行的行号，从 1 开始计数</td>
</tr>
<tr>
<td><code>FNR</code></td>
<td><em>File Number Row</em>，多文件处理时，每个文件行号单独计数，都是从 0 开始</td>
</tr>
<tr>
<td><code>FS</code></td>
<td><em>Field Separator</em>，输入字段分隔符（默认空格或 tab 键）</td>
</tr>
<tr>
<td><code>RS</code></td>
<td><em>Row Separator</em>，输入行分隔符（默认回车换行）</td>
</tr>
<tr>
<td><code>OFS</code></td>
<td><em>Output Field Separator</em>，输出字段分隔符（默认空格）</td>
</tr>
<tr>
<td><code>ORS</code></td>
<td><em>Output Row Separator</em>，输出行分隔符（默认回车换行）</td>
</tr>
<tr>
<td><code>FILENAME</code></td>
<td>当前输入的文件名字</td>
</tr>
<tr>
<td><code>ARGC</code></td>
<td>命令行参数个数</td>
</tr>
<tr>
<td><code>ARGV</code></td>
<td>命令行参数数组</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 : 分隔，输出第 1 列</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 -- 分隔成行，以 : 分隔成列，输出第 1、2 列</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;;RS=&quot;--&quot;&#125; &#123;print $1,$2&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 : 分隔列，输出最后一列，因为 NF 变量是总列数</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $NF&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>


<h3 id="格式化输出（printf）"><a href="#格式化输出（printf）" class="headerlink" title="格式化输出（printf）"></a>格式化输出（printf）</h3><table>
<thead>
<tr>
<th>格式符</th>
<th>说明</th>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>%s</code></td>
<td>字符串</td>
<td><code>-</code></td>
<td>左对齐</td>
</tr>
<tr>
<td><code>%d</code></td>
<td>十进制</td>
<td><code>+</code></td>
<td>右对齐</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>浮点数</td>
<td><code>#</code></td>
<td>八进制前面加 0，十六进制前面加 0x</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>十六进制</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>%o</code></td>
<td>八进制</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>%e</code></td>
<td>科学计数法</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>%c</code></td>
<td>单个字符的 ASCII 码</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># printf &quot;%+20s %-20s\n&quot;,$1,$7</span></span><br><span class="line"><span class="comment">#   - 左对齐；+ 右对齐</span></span><br><span class="line"><span class="comment">#   20 列宽，不足则补空</span></span><br><span class="line"><span class="comment">#   s 打印字符串</span></span><br><span class="line"><span class="comment">#   .3f 打印保留 3 位数的浮点数</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;-&quot;&#125;&#123;printf &quot;%+20s %20.3f %-20s\n&quot;,$1,$3,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line">                root                0.000 /bin/bash</span><br><span class="line">                 bin                1.000 /sbin/nologin</span><br><span class="line">              daemon                2.000 /sbin/nologin</span><br><span class="line">                 adm                3.000 /sbin/nologin</span><br><span class="line">                  lp                4.000 /sbin/nologin</span><br></pre></td></tr></table></figure>

<h3 id="模式匹配（pattern）"><a href="#模式匹配（pattern）" class="headerlink" title="模式匹配（pattern）"></a>模式匹配（pattern）</h3><ul>
<li><code>RegExp</code>：<code>/patern/</code></li>
<li><code>关系运算</code>：<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>==</code>、<code>!=</code>、<code>~</code> 正则匹配、<code>!~</code> 非正则匹配、<code>&amp;&amp; </code> 与、<code>||</code> 或、<code>!</code> 非</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印以 root 开头的行</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; /^root/ &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第 3 列大于 1000 的行</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; $3&gt;1000 &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第 7 列是 /sbin/nologin 的行</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; $7==&quot;/sbin/nologin&quot; &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第 7 列以 nologin 结尾的行</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; $7~/.*nologin$/ &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第 3 列大于 500，并且第 7 列以 nologin 结尾的行</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; $3&gt;500 &amp;&amp; $7~/.*nologin$/ &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">chrony:x:997:995::/var/lib/chrony:/sbin/nologin</span><br><span class="line">dockerroot:x:996:993:Docker User:/var/lib/docker:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h3 id="计算表达式"><a href="#计算表达式" class="headerlink" title="计算表达式"></a>计算表达式</h3><p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数学计算</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=2; print x+y&#125;&#x27;</span></span><br><span class="line">12</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=2; print x*y&#125;&#x27;</span></span><br><span class="line">20</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=2; print x^y&#125;&#x27;</span></span><br><span class="line">100</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=2; print x**y&#125;&#x27;</span></span><br><span class="line">100</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=x++; print x,y&#125;&#x27;</span></span><br><span class="line">11 10</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;x=10;y=++x; print x,y&#125;&#x27;</span></span><br><span class="line">11 11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印空行行号、统计空行数量</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;idx=0;&#125; /^$/ &#123;idx++; print NR&#125; END&#123;print idx;&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 条件判断</span></span><br><span class="line"><span class="keyword">if</span>(condition1) &#123;</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition2) &#123;</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">    <span class="comment">#do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;10;i++) &#123;</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果第 3 列小于 10 并且第 7 列是 /sbin/nologin 的行打印 this is if</span></span><br><span class="line"><span class="comment"># 如果第 3 列大于 500 的打印 this is else if</span></span><br><span class="line"><span class="comment"># 否则打印 this is else</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123; if($3&lt;10 &amp;&amp; $7=&quot;/sbin/nologin&quot;) &#123;print &quot;this is if&quot;&#125; else if($3&gt;500) &#123;print &quot;this is else if&quot;&#125; else &#123;print &quot;this is else&quot;&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class="line">this is <span class="keyword">if</span></span><br><span class="line">this is <span class="keyword">if</span></span><br><span class="line">this is <span class="keyword">else</span></span><br><span class="line">this is <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">this is <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 1-10 相加的结果</span></span><br><span class="line"><span class="comment"># 注意：变量不需要提前声明</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123; while(i&lt;10) &#123; sum+=i; i++&#125;; print sum&#125;&#x27;</span></span><br><span class="line">45</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;do &#123; sum+=i; i++; &#125; while(i&lt;10); print sum&#125;&#x27;</span></span><br><span class="line">45</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123; for(i=0;i&lt;10;i++) &#123; sum+=i; &#125;; print sum&#125;&#x27;</span></span><br><span class="line">45</span><br></pre></td></tr></table></figure>


<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>length(str)</code></td>
<td>计算字符串长度</td>
<td>整数长度值</td>
</tr>
<tr>
<td><code>index(str,sub_str)</code></td>
<td>在 str 中查找 sub_str 的位置</td>
<td>位置索引，从 1 计数</td>
</tr>
<tr>
<td><code>tolower(str)</code></td>
<td>转小写</td>
<td>转换后的小写字符串</td>
</tr>
<tr>
<td><code>toupper(str)</code></td>
<td>转大些</td>
<td>转换后的大写字符串</td>
</tr>
<tr>
<td><code>substr(str,start,length)</code></td>
<td>从 str 第 start 个字符开始，截取 length 位</td>
<td>截取后到子串</td>
</tr>
<tr>
<td><code>split(str,arr,fs)</code></td>
<td>按 fs 拆分字符串，结果保存到 arr</td>
<td>拆分后子串的个数</td>
</tr>
<tr>
<td><code>match(str,reg)</code></td>
<td>在 str 中按 reg 查找，返回位置</td>
<td>索引位置</td>
</tr>
<tr>
<td><code>sub(reg,new_sub_str,str)</code></td>
<td>在 str 中搜索符合 reg  的子串，将其替换为 new_sub_str，<strong>只替换第一个</strong></td>
<td>替换的个数</td>
</tr>
<tr>
<td><code>gsub(reg,new_sub_str,str)</code></td>
<td>类似 <code>sub</code>，替换所有</td>
<td>替换的个数</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sub(/oo/,&quot;11&quot;,$1) 返回替换的个数；后面的 $1 为替换后的值</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123; print length($1),toupper($1),substr($1,0,2),sub(/oo/,&quot;11&quot;,$1),$1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">4 ROOT ro 1 r11t</span><br><span class="line">3 BIN bi 0 bin</span><br><span class="line">6 DAEMON da 0 daemon</span><br><span class="line">4 SYNC sy 0 sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组下标从 1 开始</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;str=&quot;Shell;Python;C;C++;Java;PHP&quot;; split(str,arr,&quot;;&quot;); print arr[2]&#125;&#x27;</span></span><br><span class="line">Python</span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;str=&quot;Shell;Python;C;C++;Java;PHP&quot;; split(str,arr,&quot;;&quot;); for(i in arr) &#123; print arr[i]; &#125;&#125;&#x27;</span></span><br><span class="line">C++</span><br><span class="line">Java</span><br><span class="line">PHP</span><br><span class="line">Shell</span><br><span class="line">Python</span><br><span class="line">C</span><br></pre></td></tr></table></figure>


<h3 id="常用选项（options）"><a href="#常用选项（options）" class="headerlink" title="常用选项（options）"></a>常用选项（options）</h3><ul>
<li><code>-v</code> 参数传递</li>
<li><code>-f</code> 指定脚本文件</li>
<li><code>-v</code> 指定分隔符</li>
<li><code>-V</code> 查看 awk 版本</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入外部变量</span></span><br><span class="line">➜  var1=10</span><br><span class="line">➜  var2=<span class="string">&quot;hello awk&quot;</span></span><br><span class="line">➜  awk -v var1=<span class="string">&quot;<span class="variable">$var1</span>&quot;</span> -v var2=<span class="string">&quot;<span class="variable">$var2</span>&quot;</span> <span class="string">&#x27;BEGIN&#123;print var1,var2&#125;&#x27;</span></span><br><span class="line">10 hello awk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有操作抽离到一个独立文件</span></span><br><span class="line"><span class="comment"># 建议：复杂操作优先使用这种方式，更易于程序理解和管理</span></span><br><span class="line">➜  touch script.awk</span><br><span class="line">BEGIN&#123;</span><br><span class="line">    FS=<span class="string">&quot;:&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$3</span>&lt;10 &amp;&amp; <span class="variable">$7</span>=<span class="string">&quot;/sbin/nologin&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;this is if&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$3</span>&gt;500) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;this is else if&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;this is else&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜  awk -f script.awk /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># -F: 相当于 BEGIN&#123;FS=&quot;:&quot;&#125;</span></span><br><span class="line">$ awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="built_in">pwd</span></span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>shell 中的数组操作如下：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>示例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>定义一个数组</td>
<td><code>arr=(&quot;Python&quot; &quot;PHP&quot; &quot;Java&quot; &quot;Go&quot; &quot;Rust&quot;)</code></td>
<td></td>
</tr>
<tr>
<td>某个数组元素（下标从 0 开始）</td>
<td><code>echo $&#123;arr[2]&#125;</code></td>
<td>Java</td>
</tr>
<tr>
<td>数组元素个数</td>
<td><code>echo $&#123;#arr[@]&#125;</code></td>
<td>5</td>
</tr>
<tr>
<td>某个元素的长度</td>
<td><code>echo $&#123;#arr[0]&#125;</code></td>
<td>6</td>
</tr>
<tr>
<td>修改元素值</td>
<td><code>arr[2]=&quot;JAVA&quot;</code></td>
<td></td>
</tr>
<tr>
<td>删除数组元素</td>
<td><code>unset arr[1]</code></td>
<td></td>
</tr>
<tr>
<td>打印所有数组元素）</td>
<td><code>echo $&#123;arr[@]&#125;</code></td>
<td>Python JAVA Go Rust</td>
</tr>
<tr>
<td>分片访问</td>
<td><code>echo $&#123;arr[@]:0:2&#125;</code></td>
<td>Python JAVA</td>
</tr>
<tr>
<td>数组元素替换（找到的第一个）</td>
<td><code>echo $&#123;arr[@]/A/a&#125;</code></td>
<td>Python JaVA Go Rust</td>
</tr>
<tr>
<td>数组元素替换（所有）</td>
<td><code>echo $&#123;arr[@]//A/a&#125;</code></td>
<td>Python JaVa Go Rust</td>
</tr>
<tr>
<td>数组遍历</td>
<td><code>for a in $&#123;arr[*]&#125;; do echo $a; done</code></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>而 awk 中数组的使用略有不同，它使用<strong>关联数组</strong>提供数组功能，即数组的索引可以是<strong>数字</strong>或<strong>任意字符串</strong>。</p>
</blockquote>
<p>语法示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="comment"># 语法：array_name[index]=value</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;arr[0]=0; arr[&quot;second&quot;]=&quot;2&quot;; print arr[0],arr[&quot;second&quot;];&#125;&#x27;</span></span><br><span class="line">0 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组元素参与计算</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;arr[0]=0; arr[&quot;second&quot;]=&quot;2&quot;; print arr[0]+3,arr[&quot;second&quot;];&#125;&#x27;</span></span><br><span class="line">3 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数组元素</span></span><br><span class="line"><span class="comment"># 语法：delete array_name[index]</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;arr[0]=0;arr[&quot;second&quot;]=&quot;2&quot;; delete arr[&quot;second&quot;]; print arr[&quot;second&quot;];&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line"><span class="comment"># 方式一：for ... in 是无序输出</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;str=&quot;Python Rust PHP Go&quot;; arrLen=split(str,arr,&quot; &quot;); for(i in arr)&#123; print i,arr[i] &#125;&#125;&#x27;</span></span><br><span class="line">4 Go</span><br><span class="line">1 Python</span><br><span class="line">2 Rust</span><br><span class="line">3 PHP</span><br><span class="line"><span class="comment"># 方式二：for(i=1;i&lt;=len;i++) &#123; ... &#125; 有序输出</span></span><br><span class="line">➜  awk <span class="string">&#x27;BEGIN&#123;str=&quot;Python Rust PHP Go&quot;; arrLen=split(str,arr,&quot; &quot;); for(i=1;i&lt;=arrLen;i++)&#123; print i,arr[i] &#125;&#125;&#x27;</span></span><br><span class="line">1 Rust</span><br><span class="line">2 Go</span><br><span class="line">3 Python</span><br><span class="line">4 PHP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell文本处理三剑客之grep</title>
    <url>/post/990120436.html</url>
    <content><![CDATA[<blockquote>
<p>过滤器，主要用于过滤文件内容，查找匹配信息。</p>
</blockquote>
<p>语法：</p>
<ul>
<li><code>grep [option] [pattern] [file1,file2...]</code></li>
<li><code>command | grep [option] [pattern]</code></li>
</ul>
<span id="more"></span>

<p>参数（option）：</p>
<ul>
<li><code>-v</code> 不显示匹配信息</li>
<li><code>-i</code> 搜索时忽略大小写</li>
<li><code>-n</code> 显示行号</li>
<li><code>-r</code> 递归搜索（当前目录下所有目录）</li>
<li><code>-E</code> 支持扩展的正则表达式，相当于 <code>egrep</code> 命令</li>
<li><code>-F</code> 不按正则表达式匹配，按字符串字面意思匹配</li>
<li>其它<ul>
<li><code>-c</code> 成功匹配数量</li>
<li><code>-w</code> 匹配整个单词</li>
<li><code>-x</code> 匹配整行</li>
<li><code>-l</code> 只列出匹配的文件名</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell文本处理三剑客之sed</title>
    <url>/post/216593370.html</url>
    <content><![CDATA[<blockquote>
<p>sed 是 stream editor 的缩写，流编辑器，主要用于对标准输出或文件进行处理。</p>
</blockquote>
<p>语法：</p>
<ul>
<li><code>stdout | sed [option] &quot;pattern command&quot;</code></li>
<li><code>sed [option] &quot;pattern command&quot; file1</code></li>
</ul>
<span id="more"></span>

<h4 id="常用选项（option）"><a href="#常用选项（option）" class="headerlink" title="常用选项（option）"></a>常用选项（option）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -n 只打印静默模式匹配行，而不输出原行</span></span><br><span class="line"><span class="comment"># p 是打印命令</span></span><br><span class="line">➜  sed <span class="string">&#x27;/hello/p&#x27;</span> helloWorld.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">HELLO bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">➜  sed -n <span class="string">&#x27;/hello/p&#x27;</span> helloWorld.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -e 追加一组编辑命令</span></span><br><span class="line">➜  sed -n -e <span class="string">&#x27;/hello/p&#x27;</span> -e <span class="string">&#x27;/HELLO/p&#x27;</span> helloWorld.sh</span><br><span class="line">HELLO bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 把所有编辑命令保存在文件中，适用于复杂编辑操作</span></span><br><span class="line">➜  cat edit.sed</span><br><span class="line">/hello/p</span><br><span class="line">➜  sed -n -f edit.sed hello.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -E （或 -r）支持扩展正则表达式</span></span><br><span class="line">➜  sed -n -E <span class="string">&#x27;/hello|HELLO/p&#x27;</span> helloWorld.sh</span><br><span class="line">HELLO bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 直接修改源文件内容</span></span><br><span class="line"><span class="comment"># s 是替换命令</span></span><br><span class="line"><span class="comment"># 这里是吧 helloWorld.sh 文件中所有的 hello 改为 hello123</span></span><br><span class="line">➜  sed -n -i <span class="string">&#x27;s/hello/hello123/g&#x27;</span> helloWorld.sh</span><br></pre></td></tr></table></figure>


<h4 id="匹配模式（pattern）"><a href="#匹配模式（pattern）" class="headerlink" title="匹配模式（pattern）"></a>匹配模式（pattern）</h4><table>
<thead>
<tr>
<th>匹配模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>10command</code></td>
<td>第 10 行</td>
</tr>
<tr>
<td><code>10,20command</code></td>
<td>第 10 到 20 行</td>
</tr>
<tr>
<td><code>10,+5command</code></td>
<td>第 10 到 16 行</td>
</tr>
<tr>
<td><code>/pattern1/command</code></td>
<td>匹配 pattern1 对应的行</td>
</tr>
<tr>
<td><code>/pattern1/,/pattern2/command</code></td>
<td>从 pattern1 对应的行开始，到 pattern2 的行</td>
</tr>
<tr>
<td><code>10,/pattern1/command</code></td>
<td>从第 10 行开始，到 pattern1 的行</td>
</tr>
<tr>
<td><code>/pattern1/,10command</code></td>
<td>从 pattern1 对应的行开始，到第 10 行</td>
</tr>
</tbody></table>
<h4 id="常用编辑命令（command）"><a href="#常用编辑命令（command）" class="headerlink" title="常用编辑命令（command）"></a>常用编辑命令（command）</h4><ul>
<li>查询<ul>
<li><code>p</code> 打印匹配的内容</li>
</ul>
</li>
<li>增加<ul>
<li><code>a string</code> 行后追加</li>
<li><code>i string</code> 行前追加</li>
<li><code>r file</code> 从外部文件读入，在匹配的行后追加</li>
<li><code>w newfile</code> 将匹配的行写入外部文件</li>
</ul>
</li>
<li>删除<ul>
<li><code>d</code> 删除</li>
</ul>
</li>
<li>修改<ul>
<li><code>s/old/new</code> 替换行内第一个 old 为 new</li>
<li><code>s/old/new/g</code> 行内所有 old 替换为 new</li>
<li><code>s/old/new/2g</code> 从第 2 行开始到文件末尾的所有 old 替换为 new</li>
<li><code>s/old/new/ig</code> 行内所有 old 替换为 new，忽略大小写</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除以 sys 开头、并且以/sbin/nologin 结尾的行</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;/^sys.*\/sbin\/nologin$/d&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除注释行、空行</span></span><br><span class="line">sed -i <span class="string">&#x27;/[:blank:]*#/d;/^$/d&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找在以 vagrant 开头的行，下一行追加内容</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;/^vagrant/a 这是追加的一行内容&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有的 root 替换为 root123</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;s/root/root123/ig&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有以 sys 开头、以 nologin 结尾的行，尾部追加 _666</span></span><br><span class="line"><span class="comment"># 其中 &amp; 表示前面正则匹配到的内容</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;s/^sys.*nologin$/&amp;_666/g&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有以 sys 开头、以 nologin_666 结尾的行 改为</span></span><br><span class="line"><span class="comment"># 以 SYS_ 开头、以 _777 结尾，其中 \1 表示前面括号中匹配的中间部分内容</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;s/^sys\(.*\)nologin_666$/SYS_\1_777/g&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 1 ～ 10 行所有的 sys 改为 SYS</span></span><br><span class="line">➜  sed -i <span class="string">&#x27;1,10s/sys/SYS/ig&#x27;</span> passwd_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计 my.cnf 文件中 mysqld 的子配置项数量</span></span><br><span class="line"><span class="comment"># sed 查找从 [mysqld] 到 下一个[.*] 之间的行</span></span><br><span class="line"><span class="comment"># grep -v 过滤注释、空行和 [.*] 行</span></span><br><span class="line"><span class="comment"># wc -l 统计最后的行数</span></span><br><span class="line">➜  sed -n <span class="string">&quot;/^\[mysqld\]$/,/^\[.*\]$/p&quot;</span> /etc/my.cnf | grep -Ev <span class="string">&#x27;^$|[#;]|^\[.*&#x27;</span> | wc -l</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果匹配模式中存在变量，则建议使用双引号，如 <code>sed -i &quot;s/$OLD_STR/$NEW_STR/g&quot; passwd_bak</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>shell 中如何输出 n 个连续字符</title>
    <url>/post/1152072481.html</url>
    <content><![CDATA[<p>本文以输出 n 个空格为例，新建 <code>demo.sh</code> ，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=<span class="string">&#x27;192.168.1.5&#x27;</span></span><br><span class="line">DESCRIPTION=<span class="string">&#x27;内部服务器5&#x27;</span></span><br><span class="line"><span class="comment"># spacenum=`expr 16 - $&#123;#IP&#125;`</span></span><br><span class="line">spacenum=12</span><br><span class="line"><span class="comment"># seq -s &#x27; &#x27; 5 输出 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># seq -s &#x27;a&#x27; 5 输出 1a2a3a4a5a</span></span><br><span class="line"><span class="comment"># sed &#x27;s/[0-9]//g&#x27; 将 0-9 的数字去掉</span></span><br><span class="line">spaces=$(seq -s <span class="string">&#x27; &#x27;</span> <span class="variable">$spacenum</span> | sed <span class="string">&#x27;s/[0-9]//g&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;$IP<span class="variable">$spaces</span>- <span class="variable">$DESCRIPTION</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ sh demo.sh</span><br><span class="line">192.168.1.5            - 内部服务器5</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>一键切换brew国内镜像源</title>
    <url>/post/1031793596.html</url>
    <content><![CDATA[<blockquote>
<p>这是一个切换 brew 镜像的脚本，菜单一键操作。目前只添加了<strong>阿里云</strong>和<strong>中科大</strong>的镜像源，如果需要使用其它镜像，请按照格式自行添加。</p>
</blockquote>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li>新建文件 <code>changeBrewMirror.sh</code>；</li>
<li>将下面的代码拷贝到文件中；</li>
<li>给文件赋予可执行权限 <code>chmod u+x changeBrewMirror.sh</code>；</li>
<li>运行脚本 <code>sh changeBrewMirror.sh</code> 或 <code>./changeBrewMirror.sh</code>；</li>
<li>ok</li>
</ol>
<span id="more"></span>

<h3 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 修改 macOS 系统下的 brew 为国内镜像源</span></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       ./changeBrewMirror.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: whoru.S.Q &lt;whoru@sqiang.net&gt;</span></span><br><span class="line"><span class="comment"># Link: https://github.com/whorusq/learning-linux/blob/master/shell/changeBrewMirror.sh</span></span><br><span class="line"><span class="comment"># Version: 1.0</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像列表</span></span><br><span class="line"><span class="comment"># 格式：&quot;镜像名称,brew地址,homebrew-core地址,homebrew-bottles地址&quot;</span></span><br><span class="line">MIRROR_LIST=(</span><br><span class="line">  <span class="string">&quot;阿里云,https://mirrors.aliyun.com/homebrew/brew.git,https://mirrors.aliyun.com/homebrew/homebrew-core.git,https://mirrors.aliyun.com/homebrew/homebrew-bottles&quot;</span></span><br><span class="line">  <span class="string">&quot;中科院,https://mirrors.ustc.edu.cn/brew.git,https://mirrors.ustc.edu.cn/homebrew-core.git,https://mirrors.ustc.edu.cn/homebrew-bottles&quot;</span></span><br><span class="line">)</span><br><span class="line">IFS_OLD=<span class="variable">$IFS</span></span><br><span class="line"><span class="comment"># 支持的 shell 类型</span></span><br><span class="line"><span class="comment"># 其它类型请修改相关判断逻辑</span></span><br><span class="line">SHELL_TYPE_LIST=(<span class="string">&quot;/bin/zsh&quot;</span> <span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line"><span class="comment"># 当前 shell 的配置文件路径</span></span><br><span class="line">SHELL_CONFIG_PATH=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 允许的操作序号</span></span><br><span class="line">ALLOWED_CHOICE=(0)</span><br><span class="line"><span class="comment"># 输入错误计数</span></span><br><span class="line">ERROR_NO=0</span><br><span class="line"><span class="comment"># 最大错误输入次数</span></span><br><span class="line">MAX_ERROR_NO=3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="keyword">function</span> menu &#123;</span><br><span class="line">  <span class="comment"># 根据配置读取镜像列表，构造操作菜单</span></span><br><span class="line">  <span class="built_in">local</span> menu_num=1</span><br><span class="line">  <span class="built_in">local</span> MENUS=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span>(( i=1; i&lt;=<span class="variable">$&#123;#MIRROR_LIST[@]&#125;</span>; i++))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    IFS=,</span><br><span class="line">    <span class="built_in">local</span> mirror=(<span class="variable">$&#123;MIRROR_LIST[$(($i-1))]&#125;</span>)</span><br><span class="line">    MENUS=<span class="variable">$MENUS</span><span class="string">&quot;[<span class="variable">$&#123;menu_num&#125;</span>]. <span class="variable">$&#123;mirror[0]&#125;</span>镜像源\n&quot;</span></span><br><span class="line">    ALLOWED_CHOICE[i]=<span class="variable">$menu_num</span></span><br><span class="line">    menu_num=$((<span class="variable">$menu_num</span>+<span class="number">1</span>))</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  MENUS=<span class="variable">$MENUS</span><span class="string">&quot;[0]. 恢复默认\n&quot;</span></span><br><span class="line">  clear</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-------------------------------------&quot;</span></span><br><span class="line">	<span class="built_in">echo</span> -en <span class="variable">$MENUS</span></span><br><span class="line">	IFS=<span class="variable">$IFS_OLD</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;-------------------------------------&quot;</span></span><br><span class="line"></span><br><span class="line">  getShellConfigPath ;</span><br><span class="line"></span><br><span class="line">  handleChoice ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理用户输入</span></span><br><span class="line"><span class="keyword">function</span> handleChoice &#123;</span><br><span class="line">  <span class="built_in">echo</span> -en <span class="string">&quot;请输入\033[32m序号\033[0m选择要执行的操作: &quot;</span></span><br><span class="line">	<span class="built_in">read</span> choice</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;ALLOWED_CHOICE[@]&#125;</span>&quot;</span>  =~ <span class="string">&quot;<span class="variable">$choice</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$choice</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">      reset ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      change <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ERROR_NO</span> -lt <span class="variable">$MAX_ERROR_NO</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;无效操作，请重新输入...\n&quot;</span></span><br><span class="line">      ERROR_NO=$((<span class="variable">$ERROR_NO</span>+<span class="number">1</span>))</span><br><span class="line">      handleChoice ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;错误次数过多，请重新运行程序&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 shell 配置文件路径</span></span><br><span class="line"><span class="keyword">function</span> getShellConfigPath &#123;</span><br><span class="line">  <span class="built_in">local</span> shell_type=`<span class="built_in">echo</span> <span class="variable">$SHELL</span>`</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;SHELL_TYPE_LIST[@]&#125;</span>&quot;</span>  =~ <span class="string">&quot;<span class="variable">$shell_type</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$shell_type</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">      <span class="string">&quot;/bin/zsh&quot;</span>)</span><br><span class="line">        SHELL_CONFIG_PATH=~/.zshrc</span><br><span class="line">        ;;</span><br><span class="line">      <span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">        SHELL_CONFIG_PATH=~/.bash_profile</span><br><span class="line">        ;;</span><br><span class="line">      *)</span><br><span class="line">        <span class="comment"># default</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;未知的 shell 类型，请手动设置&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示上一步执行结果</span></span><br><span class="line"><span class="keyword">function</span> showResult &#123;</span><br><span class="line">  <span class="keyword">if</span> [ `<span class="built_in">echo</span> $?` -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;failed&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="comment"># brew config | grep &quot;$&#123;mirror_config[1]&#125;&quot; | wc -l</span></span><br><span class="line"><span class="keyword">function</span> change &#123;</span><br><span class="line">  <span class="comment"># 根据传过来的编号读取对应的配置信息</span></span><br><span class="line">  IFS=,</span><br><span class="line">  <span class="built_in">local</span> mirror_config=(<span class="variable">$&#123;MIRROR_LIST[$(($1-1))]&#125;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># brew.git</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 替换\033[32m brew.git \033[0m\n&quot;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">  git remote set-url origin <span class="variable">$&#123;mirror_config[1]&#125;</span></span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># homebrew-core.git</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 替换\033[32m homebrew-core.git \033[0m\n&quot;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">  git remote set-url origin <span class="variable">$&#123;mirror_config[2]&#125;</span></span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 更新</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 更新\033[32m brew \033[0m\n&quot;</span></span><br><span class="line">  brew update</span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># homebrew-bottles</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 替换\033[32m homebrew-bottles \033[0m\n&quot;</span></span><br><span class="line">  <span class="built_in">local</span> exp=<span class="string">&quot;export HOMEBREW_BOTTLE_DOMAIN=<span class="variable">$&#123;mirror_config[3]&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$SHELL_CONFIG_PATH</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$exp</span> &gt;&gt; <span class="variable">$SHELL_CONFIG_PATH</span></span><br><span class="line">    <span class="built_in">source</span> <span class="variable">$SHELL_CONFIG_PATH</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;找不到 shell 配置文件，请手动将 <span class="variable">$exp</span> 添加到你系统的环境变量中。&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n成功切换到【<span class="variable">$&#123;mirror_config[0]&#125;</span>】镜像源\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="keyword">function</span> reset &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 恢复\033[32m brew.git \033[0m\n&quot;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">  git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 恢复\033[32m homebrew-core.git \033[0m\n&quot;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">  git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 更新\033[32m brew \033[0m\n&quot;</span></span><br><span class="line">  brew update</span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 恢复\033[32m homebrew-bottles \033[0m\n&quot;</span></span><br><span class="line">  sed -e <span class="string">&#x27;/HOMEBREW_BOTTLE_DOMAIN/d&#x27;</span> <span class="variable">$SHELL_CONFIG_PATH</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  <span class="built_in">source</span> <span class="variable">$SHELL_CONFIG_PATH</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  showResult ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n已恢复\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menu ;</span><br></pre></td></tr></table></figure>

<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><h4 id="warning-There-are-too-many-unreachable-loose-objects-run-39-git-prune-39-to-remove-them"><a href="#warning-There-are-too-many-unreachable-loose-objects-run-39-git-prune-39-to-remove-them" class="headerlink" title="warning: There are too many unreachable loose objects; run &#39;git prune&#39; to remove them."></a><code>warning: There are too many unreachable loose objects; run &#39;git prune&#39; to remove them.</code></h4><p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">➜  git prune &amp;&amp; git gc</span><br><span class="line"></span><br><span class="line">➜  <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span></span><br><span class="line">➜  git prune &amp;&amp; git gc</span><br><span class="line"></span><br><span class="line">➜  <span class="built_in">cd</span> -</span><br><span class="line">➜  brew update</span><br></pre></td></tr></table></figure>

<p>参照：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/34859640/error-when-trying-to-brew-update">https://stackoverflow.com/questions/34859640/error-when-trying-to-brew-update</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Shell 备份远程服务器上的 MySQL 数据库到本机</title>
    <url>/post/3997579074.html</url>
    <content><![CDATA[<blockquote>
<p>操作流程：</p>
<ol>
<li>先登录服务器，备份数据库；</li>
<li>将备份文件拉取到本机。</li>
</ol>
</blockquote>
<p>主要涉及知识点：<code>expect</code>、<code>mysqldump</code>、<code>scp</code></p>
<span id="more"></span>

<h3 id="1-源码"><a href="#1-源码" class="headerlink" title="1. 源码"></a>1. 源码</h3><p>新建 Shell 文件：<code>mysqlDumpRemote2Local.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 登录远程服务器，备份指定数据库并下载到本地</span></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="comment">#       ./mysqlDumpRemote2Local.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># File: https://github.com/whorusq/linux-learning/blob/master/shell/mysqlDumpRemote2Local.sh</span></span><br><span class="line"><span class="comment"># Author: whoru.S.Q &lt;whoru@sqiang.net&gt;</span></span><br><span class="line"><span class="comment"># Version: 1.0</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待操作待服务器列表</span></span><br><span class="line"><span class="comment"># 格式：&quot;描述,数据库名,数据库用户名,数据库密码,数据库端口号,SSH登录用户名,SSH服务器IP,SSH登录密码,SSH端口号&quot;</span></span><br><span class="line">HOSTS=(</span><br><span class="line"> 	<span class="string">&quot;test,db_demo,root,pwd123456,3306,root,192.168.1.127,pwd3333,22&quot;</span></span><br><span class="line">)</span><br><span class="line">HOSTS_LEN=`<span class="built_in">echo</span> <span class="variable">$&#123;#HOSTS[*]&#125;</span>`</span><br><span class="line">HOST_KEY=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器上备份文件的存放目录</span></span><br><span class="line">DB_BACKUP_PATH=/opt/backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前脚本所处目录</span></span><br><span class="line">BASE_PATH=$(<span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span>;<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">function</span> main &#123;</span><br><span class="line">    <span class="comment">#检查基础设置</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$HOST_LEN</span>&quot;</span> == <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;您还没有配置待操作的服务器参数&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示菜单</span></span><br><span class="line">    MENU=<span class="string">&quot;\n&quot;</span></span><br><span class="line">    INDEX=1</span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$&#123;HOSTS[*]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> host_name=`<span class="built_in">echo</span> <span class="variable">$host</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $1&quot; ===&gt; &quot;$2&#125;&#x27;</span>`</span><br><span class="line">        MENU=<span class="variable">$MENU</span><span class="string">&quot;\t&quot;</span><span class="variable">$INDEX</span><span class="string">&quot;. &quot;</span><span class="variable">$host_name</span><span class="string">&quot;\n&quot;</span></span><br><span class="line">        INDEX=`expr <span class="variable">$INDEX</span> + 1`</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="variable">$MENU</span><span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查选择</span></span><br><span class="line">    checkChoice</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始导出操作</span></span><br><span class="line">    doDump</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> checkChoice &#123;</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;请输入序号选择待备份的数据库：&quot;</span> HOST_NUM</span><br><span class="line">    len=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$HOST_NUM</span>&quot;</span>|sed <span class="string">&#x27;s/[1-9]//g&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$len</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        ifGoon <span class="string">&quot;输入有误，只支持1-9的数字，是否重新输入[y/n]：&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        KEY=`expr <span class="variable">$HOST_NUM</span> - 1`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$KEY</span> -le <span class="variable">$HOSTS_LEN</span> ]; <span class="keyword">then</span></span><br><span class="line">            HOST_KEY=<span class="variable">$KEY</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ifGoon <span class="string">&quot;未知的序号，是否重新输入[y/n]：&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ifGoon &#123;</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;\033[32m==&gt;\033[0m &quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="variable">$1</span> GOON</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$GOON</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        checkChoice</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> doDump &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$SERVER_KEY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;未知的序号&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从对应的配置中解析数据库和 SSH 参数</span></span><br><span class="line">    HOST=<span class="variable">$&#123;HOSTS[$HOST_KEY]&#125;</span></span><br><span class="line">    HOST_NAME=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>`</span><br><span class="line">    DB_NAME=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span>`</span><br><span class="line">    DB_USER=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $3 &#125;&#x27;</span>`</span><br><span class="line">    DB_PWD=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $4 &#125;&#x27;</span>`</span><br><span class="line">    DB_PORT=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $5 &#125;&#x27;</span>`</span><br><span class="line">    SSH_USER=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $6 &#125;&#x27;</span>`</span><br><span class="line">    SSH_IP=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $7 &#125;&#x27;</span>`</span><br><span class="line">    SSH_PWD=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $8 &#125;&#x27;</span>`</span><br><span class="line">    SSH_PORT=`<span class="built_in">echo</span> <span class="variable">$HOST</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123; print $9 &#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备份文件名</span></span><br><span class="line">    DUMP_FILENAME=<span class="variable">$HOST_NAME</span><span class="string">&quot;_&quot;</span>`date +%Y%m%d%H%M%S`</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 操作开始 &quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 登录 <span class="variable">$&#123;HOST_NAME&#125;</span> 正式服务器，备份数据库&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">        spawn ssh <span class="variable">$&#123;SSH_USER&#125;</span>@<span class="variable">$&#123;SSH_IP&#125;</span> -p <span class="variable">$&#123;SSH_PORT&#125;</span></span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">            \&quot;yes/no\&quot; &#123;send \&quot;yes\n\&quot;; exp_continue;&#125;</span></span><br><span class="line"><span class="string">            \&quot;*assword\&quot; &#123; send \&quot;<span class="variable">$&#123;SSH_PWD&#125;</span>\r\n\&quot;; exp_continue ; sleep 3; &#125;</span></span><br><span class="line"><span class="string">            \&quot;Last*\&quot; &#123;  send_user \&quot;\n 登录成功 \n\&quot;;&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        expect \&quot;*]#\&quot;</span></span><br><span class="line"><span class="string">        send \&quot;ls <span class="variable">$&#123;DB_BACKUP_PATH&#125;</span> &amp;&gt;/dev/null &amp;&amp; cd <span class="variable">$&#123;DB_BACKUP_PATH&#125;</span> || mkdir -p <span class="variable">$&#123;DB_BACKUP_PATH&#125;</span> &amp;&amp; cd <span class="variable">$&#123;DB_BACKUP_PATH&#125;</span> \r\&quot;</span></span><br><span class="line"><span class="string">        send \&quot;mysqldump -u<span class="variable">$&#123;DB_USER&#125;</span> -p<span class="variable">$&#123;DB_PWD&#125;</span> -P <span class="variable">$&#123;DB_PORT&#125;</span> <span class="variable">$&#123;DB_NAME&#125;</span> &gt; <span class="variable">$&#123;DUMP_FILENAME&#125;</span>.sql \r\&quot;</span></span><br><span class="line"><span class="string">        send \&quot;tar -zcvf <span class="variable">$&#123;DUMP_FILENAME&#125;</span>.tar.gz <span class="variable">$&#123;DUMP_FILENAME&#125;</span>.sql  \r\&quot;</span></span><br><span class="line"><span class="string">        send \&quot;exit \r\&quot;</span></span><br><span class="line"><span class="string">        interact</span></span><br><span class="line"><span class="string">    &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 退出 <span class="variable">$&#123;HOST_NAME&#125;</span> 正式服务器 \n&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 将备份文件拉取到本机 \n&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line">    expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">        spawn scp -P <span class="variable">$SSH_PORT</span> <span class="variable">$SSH_USER</span>@<span class="variable">$SSH_IP</span>:<span class="variable">$DB_BACKUP_PATH</span>/<span class="variable">$DUMP_FILENAME</span>.tar.gz <span class="variable">$BASE_PATH</span></span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">            \&quot;*assword\&quot; &#123; send \&quot;<span class="variable">$&#123;SSH_PWD&#125;</span>\r\n\&quot;; exp_continue ; &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\033[32m==&gt;\033[0m 操作结束，文件位置：&quot;</span><span class="variable">$BASE_PATH</span>/<span class="variable">$DUMP_FILENAME</span>.tar.gz<span class="string">&quot; \n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ./mysqlDumpRemote2Local.sh</span><br><span class="line"></span><br><span class="line">        1. test ===&gt; db_demo</span><br><span class="line"></span><br><span class="line">请输入序号选择待备份的数据库：1</span><br><span class="line"></span><br><span class="line">==&gt; 操作开始</span><br><span class="line"></span><br><span class="line">==&gt; 登录 test 正式服务器，备份数据库</span><br><span class="line">spawn ssh root@192.168.1.127 -p 22</span><br><span class="line">root@192.168.1.127&#x27;s password:</span><br><span class="line">Last login: Tue Nov 13 13:43:53 2018 from xxxxxxxxx</span><br><span class="line"></span><br><span class="line"> 登录成功</span><br><span class="line">[root@ test ~]# ls /opt/backup &amp;&gt;/dev/null &amp;&amp; cd /opt/backup || mkdir -p /opt/backup &amp;&amp; cd /opt/backup</span><br><span class="line">[root@ test backup]# mysqldump -uroot -ppwd123456 -P 3306 db_demo &gt; test_20181113135359.sql</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">[root@dbhs backup]# tar -zcvf test_20181113135359.tar.gz test_20181113135359.sql</span><br><span class="line">test_20181113135359.sql</span><br><span class="line">[root@dbhs backup]# exit</span><br><span class="line">logout</span><br><span class="line">Connection to 192.168.1.127 closed.</span><br><span class="line"></span><br><span class="line">==&gt; 退出 test 正式服务器</span><br><span class="line"></span><br><span class="line">==&gt; 将备份文件拉取到本机</span><br><span class="line"></span><br><span class="line">spawn scp -P 22 root@192.168.1.127:/opt/backup/test_20181113135359.tar.gz /Users/xxxxx/mydev/linux-learning/shell</span><br><span class="line">root@218.29.103.28&#x27;s password:</span><br><span class="line">test_20181113135359.tar.gz                       100%   66KB 941.5KB/s   00:00</span><br><span class="line"></span><br><span class="line">==&gt; 操作结束，文件位置：/Users/xxxxx/mydev/linux-learning/shell/test_20181113135359.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下如何修改 ssh 登录欢迎信息</title>
    <url>/post/980934396.html</url>
    <content><![CDATA[<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><center>
<img data-src="https://static.sqiang.net/image/post/linux_motd.png" width="90%">
</center>

<span id="more"></span>

<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>新建一个sh脚本文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim motd.sh</span><br></pre></td></tr></table></figure></li>
<li><p>在文件中添加如下内容（可根据需要自行修改 <code>echo</code> 部分的内容）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define the filename to use as output</span></span><br><span class="line">motd=&quot;/etc/motd&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Collect useful information about your system</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$USER</span> is automatically defined</span></span><br><span class="line">HOSTNAME=`uname -n`</span><br><span class="line">KERNEL=`uname -r`</span><br><span class="line">CPU=`uname -p`</span><br><span class="line">ARCH=`uname -m`</span><br><span class="line"><span class="meta">#</span><span class="bash"> The different colours as variables</span></span><br><span class="line">W=&quot;\033[01;37m&quot;</span><br><span class="line">B=&quot;\033[01;34m&quot;</span><br><span class="line">R=&quot;\033[01;31m&quot;</span><br><span class="line">X=&quot;\033[00;37m&quot;</span><br><span class="line">G=&quot;\033[01;32m&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> clear &gt; <span class="variable">$motd</span> <span class="comment"># to clear the screen when showing up</span></span></span><br><span class="line">echo -e &quot;                                                         &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;        Welcome to $B Your-Host-Name $X server.          &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;                                                         &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;  $G The world is not you can do, but you should.      $X &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;$B&quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;         \   ,__,                                        &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;          \  (oo)____                                    &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;             (__)    )\                                  &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;                ||--|| *                                 &quot; &gt;&gt; $motd</span><br><span class="line">echo -e &quot;$X&quot; &gt;&gt; $motd</span><br></pre></td></tr></table></figure></li>
<li><p>以root用户执行该脚本</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./motd.sh </span><br><span class="line">或 </span><br><span class="line">$ sh motd.sh</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>motd</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下文件类型说明</title>
    <url>/post/2330113912.html</url>
    <content><![CDATA[<blockquote>
<p>在Linux系统中，文件的后缀名并没有具体意义.但是为了便于区分和管理，推荐给文件加一个后缀名。</p>
</blockquote>
<span id="more"></span>

<p>常见文件类型如下：</p>
<ol>
<li><p>普通文件</p>
<ul>
<li>以 <strong>-</strong> 开头，一般是纯文本文件或二进制文件</li>
</ul>
</li>
<li><p>目录文件</p>
<ul>
<li>以 <strong>b</strong> 开头</li>
</ul>
</li>
<li><p>链接文件</p>
<ul>
<li>以 <strong>l</strong> 开头，分为<em>软链接</em>和<em>硬链接</em></li>
<li>软链接类似 Windows 下的快捷方式；硬链接只是复制了一份源文件的inode信息，并且不能用于目录</li>
</ul>
<ul>
<li>创建方式：<ul>
<li>软链接：<code>ln -s [来源文件]  [目的文件]</code></li>
<li>硬链接：<code>ln [来源文件]  [目的文件]</code></li>
</ul>
</li>
</ul>
</li>
<li><p>设备文件</p>
<ul>
<li>块（block）设备<ul>
<li>以 <strong>b</strong> 开头</li>
<li>一些储存数据，以提供系统存取的接口设备，比如表示一块硬盘的 <code>/dev/sda</code></li>
</ul>
</li>
<li>字符（character）设备<ul>
<li>以 <strong>c</strong> 开头</li>
<li>一些串行端口的接口设备，例如键盘、鼠标等</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 shell 使用 expect 实现 SSH 自动登录远程服务器 </title>
    <url>/post/3553742260.html</url>
    <content><![CDATA[<h3 id="1-效果预览"><a href="#1-效果预览" class="headerlink" title="1. 效果预览"></a>1. 效果预览</h3><center>
<img data-src="https://static.sqiang.net/image%2Fpost%2Flinux_shell_expect.jpg" width="90%">
</center>

<span id="more"></span>

<h3 id="2-相关知识点"><a href="#2-相关知识点" class="headerlink" title="2. 相关知识点"></a>2. 相关知识点</h3><h4 id="2-1-expect"><a href="#2-1-expect" class="headerlink" title="2.1. expect"></a>2.1. expect</h4><p>expect 是一个免费的编程工具，用来实现自动的交互式任务，而无需人为干预。</p>
<p><strong>说白了，expect 就是一套用来实现自动交互功能的软件。</strong></p>
<p>在实际工作中，我们运行命令、脚本或程序时，这些命令、脚本或程序都需要从终端输入某些继续运行的指令，而这些输入都需要人为的手工进行。而利用expect，则可以根据程序的提示，模拟标准输入提供给程序，从而实现自动化交互执行。</p>
<p>这就是 expect！！！</p>
<h4 id="2-2-IFS"><a href="#2-2-IFS" class="headerlink" title="2.2. IFS"></a>2.2. IFS</h4><p>IFS 是存储定界符的环境变量，是Shell环境中的默认定界符字符串，默认值为空白字符（换行符、制表符、空格）</p>
<h3 id="3-主要文件"><a href="#3-主要文件" class="headerlink" title="3. 主要文件"></a>3. 主要文件</h3><p>源码地址：<a href="https://github.com/whorusq/ssh-autologin">https://github.com/whorusq/ssh-autologin</a></p>
<ul>
<li><code>goto.sh</code> 入口脚本</li>
<li><code>goto.ex</code> expect 执行脚本</li>
<li><code>goto.conf</code> 服务器列表参数配置文件</li>
</ul>
<h3 id="4-如何使用"><a href="#4-如何使用" class="headerlink" title="4. 如何使用"></a>4. 如何使用</h3><ol>
<li><p><code>git clone https://github.com/whorusq/shell-ssh-autologin.git</code></p>
</li>
<li><p><code>cd shell-ssh-autologin</code></p>
</li>
<li><p>修改 goto.conf ，追加服务器列表</p>
</li>
<li><p>赋予脚本可执行权限 <code>sudo chmod u+x goto.sh goto.ex</code></p>
</li>
<li><p>使用</p>
<ul>
<li><p>方式一：<code>./goto.sh</code></p>
</li>
<li><p>方式二：将 goto 加入当前用户全局使用</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">echo</span> <span class="string">&quot;alias goto=\&quot;<span class="variable">$PWD</span>/goto.sh\&quot;&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">➜  ~ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line">➜  ~ goto</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h3><h4 id="5-1-提示没有-expect-或-spawn-命令"><a href="#5-1-提示没有-expect-或-spawn-命令" class="headerlink" title="5.1. 提示没有 expect 或 spawn 命令"></a>5.1. 提示没有 expect 或 spawn 命令</h4><p>当前脚本主要基于 expect 使用 spawn 实现。</p>
<p>Expect 是一个用来处理交互的工具，通常用于需要手动输入数据的场景，可在脚本中使用 Expect 来实现自动化。</p>
<p>首先使用以下命令检查 expect 是否已安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  whereis expect</span><br><span class="line">/usr/bin/expect</span><br></pre></td></tr></table></figure>

<p>如果没有安装，请按照以下步骤：</p>
<ol>
<li><p>安装 expect 的依赖 tcl</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  wget https://sourceforge.net/projects/tcl/files/Tcl/8.4.19/tcl8.4.19-src.tar.gz</span><br><span class="line">➜  tar zxvf tcl8.4.19-src.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> tcl8.4.19/unix &amp;&amp; ./configure</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br></pre></td></tr></table></figure></li>
<li><p>安装 expect</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  wget http://sourceforge.net/projects/expect/files/Expect/5.45/expect5.45.tar.gz</span><br><span class="line">➜  tar zxvf expect5.45.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> expect5.45</span><br><span class="line">➜  ./configure --with-tcl=/usr/<span class="built_in">local</span>/lib --with-tclinclude=../tcl8.4.19/generic</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br><span class="line">➜  ln -s /usr/<span class="built_in">local</span>/bin/expect /usr/bin/expect</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-2-特殊字符转义"><a href="#5-2-特殊字符转义" class="headerlink" title="5.2. 特殊字符转义"></a>5.2. 特殊字符转义</h4><p>如果密码中有特殊字符，需要做转义处理，否则使用 expect 的 send 语法是无法发送成功的，具体需要转义的字符如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\ ===&gt; \\\</span><br><span class="line">&#125; ===&gt; \&#125;</span><br><span class="line">[ ===&gt; \[</span><br><span class="line">$ ===&gt; \\\$</span><br><span class="line">` ===&gt; \`</span><br><span class="line">&quot; ===&gt; \\\&quot;</span><br><span class="line">~ ===&gt; \\~</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>expect</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件权限管理</title>
    <url>/post/3913386097.html</url>
    <content><![CDATA[<h3 id="权限位说明"><a href="#权限位说明" class="headerlink" title="权限位说明"></a>权限位说明</h3><p>Linux 终端下执行 <code>ls -la</code> 或 <code>ll</code> 命令，得到如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 root root    0 11-12 22:02 t3.php</span><br></pre></td></tr></table></figure>

<p>其中，最开始位置的 <strong>-rw-r–r–</strong> 是标识文件权限的信息，长度总共十位</p>
<ul>
<li>第1位：代表<a href="/post/2330113912.html">文件类型</a>（- 普通文件；d 目录文件；l 链接文件）</li>
<li>后9位：2-4 属主（user）权限 u；5-7属组（group）权限 g；8-10其他用户权限 o（<strong>r = 读 =  4；w = 写 = 2； x = 执行 = 1</strong>）</li>
</ul>
<span id="more"></span>

<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><h4 id="方式一：通过r-w-x的-与"><a href="#方式一：通过r-w-x的-与" class="headerlink" title="方式一：通过r/w/x的+与-"></a>方式一：通过r/w/x的+与-</h4><ul>
<li><code>chmod u+x test</code> 给文件的属主添加执行权限 <strong>+x</strong></li>
<li><code>chmod u-x test</code> 去除文件属主的执行权限 <strong>-x</strong></li>
<li><code>chmod u=rwx test</code> 给文件属主添加（读 <strong>r</strong> 、写 <strong>w</strong> 、执行 <strong>x</strong> ）权限</li>
<li><code> chmod g+w,o+w test</code> 给文件属主的所属组和其它用户添加（写 <strong>w</strong>）权限</li>
</ul>
<h4 id="方式二：通过对应的数字组合（4-读、2-写、1-执行）"><a href="#方式二：通过对应的数字组合（4-读、2-写、1-执行）" class="headerlink" title="方式二：通过对应的数字组合（4 读、2 写、1 执行）"></a>方式二：通过对应的数字组合（<em>4 读</em>、<em>2 写</em>、<em>1 执行</em>）</h4><p>示例：给目录属主添加读写（4+2）权限，所属组和其它用户添加读、执行（4+1）权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 655 <span class="built_in">test</span></span><br><span class="line">$ ll</span><br><span class="line">总计 4</span><br><span class="line">drw-r-xr-x 2 sq sq 4096 11-12 22:47 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h3 id="权限的意义"><a href="#权限的意义" class="headerlink" title="权限的意义"></a>权限的意义</h3><h4 id="对于目录文件"><a href="#对于目录文件" class="headerlink" title="对于目录文件"></a>对于目录文件</h4><ul>
<li><p><strong>r：读</strong></p>
<p>可以查询目录下的内容，ls、ll</p>
</li>
<li><p><strong>w：写</strong></p>
<p>具有修改目录结构的权限，如新建文件和目录，删除此目录下文件和目录，重命名此目录下文件和目录，剪切，mkdir、touch、rm、mv、cp</p>
</li>
<li><p><strong>x：执行</strong></p>
<p>可以进入目录，cd</p>
</li>
</ul>
<h4 id="对于普通文件"><a href="#对于普通文件" class="headerlink" title="对于普通文件"></a>对于普通文件</h4><ul>
<li><p><strong>r：读</strong></p>
<p>读取文件内容，可执行cat、more、head、tail、vi（但不能编辑）</p>
</li>
<li><p><strong>w：写</strong></p>
<p>对文件内容编辑、新增、修改，可执行vi、echo</p>
</li>
<li><p><strong>x：执行</strong></p>
<p>可执行</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux“万能”分区方案</title>
    <url>/post/1562646191.html</url>
    <content><![CDATA[<p><strong>这里介绍的分区方案只是个通用建议，并不适用于所有情况，需要根据服务器具体配置决定！</strong></p>
<table>
<thead>
<tr>
<th>挂载点</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>20G</td>
<td>根分区</td>
</tr>
<tr>
<td>/boot</td>
<td>100M</td>
<td>启动分区</td>
</tr>
<tr>
<td>swap</td>
<td>建议内存的两倍，最多 16G</td>
<td>内存交换空间</td>
</tr>
<tr>
<td>/usr</td>
<td>20G</td>
<td>用户目录，存放用户安装的软件等</td>
</tr>
<tr>
<td>/data</td>
<td>剩下的所有空间</td>
<td>这里的名称根据需要自定义，主要用于存放各类物理数据。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统切换阿里云软件更新源</title>
    <url>/post/600047155.html</url>
    <content><![CDATA[<blockquote>
<ul>
<li><p>本文整理自阿里云提供的更新源脚本，请以 root 用户操作。</p>
</li>
<li><p>如果使用的是阿里云服务器，将源的域名从 <strong>mirrors.aliyun.com</strong> 改为 <strong>mirrors.aliyuncs.com</strong>，不占用公网流量。</p>
</li>
<li><p>官网：<a href="https://developer.aliyun.com/mirror/?lang=zh-CN">https://developer.aliyun.com/mirror/?lang=zh-CN</a></p>
</li>
</ul>
</blockquote>
<span id="more"></span>

<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 备份</span></span><br><span class="line">$ sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 以下两个文件，在某些版本中可能不存在，可忽略</span></span><br><span class="line">$ sudo mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">$ sudo mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 替换更新源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line"><span class="comment"># 如果系统没有安装 wget 则提示：-bash: wget: command not found</span></span><br><span class="line"><span class="comment"># 可以使用 curl -o 替代 wget -O</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- CentOS 6.x ----------</span></span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- CentOS 7.x ----------</span></span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- CentOS 8.x ----------</span></span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重建缓存</span></span><br><span class="line">$ sudo yum clean metadata</span><br><span class="line">$ sudo yum makecache</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：如果非阿里云 ECS 出现类似 <code>Couldn&#39;t resolve host &#39;mirrors.cloud.aliyuncs.com&#39;</code> 的信息，解决方法 <code>sed -i -e &#39;/mirrors.cloud.aliyuncs.com/d&#39; -e &#39;/mirrors.aliyuncs.com/d&#39; /etc/yum.repos.d/CentOS-Base.repo</code></p>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 备份</span></span><br><span class="line">$ sudo cp -fp /etc/apt/sources.list /etc/apt/sources.list.back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 替换更新源</span></span><br><span class="line">$ sudo vi /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Ubuntu 14.04 (trusty) ----------</span></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">## Not recommended</span></span><br><span class="line"><span class="comment"># deb https://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Ubuntu 16.04 (xenial) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Ubuntu 18.04 (bionic) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Ubuntu 20.04 (focal) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重建缓存</span></span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 备份</span></span><br><span class="line">$ sudo cp -fp /etc/apt/sources.list /etc/apt/sources.list.back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将以下指定系统的内容插入文件头部</span></span><br><span class="line">$ sudo vi /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Debian 7.x (wheezy) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Debian 8.x (jessie) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- Debian 9.x (stretch) ----------</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重建缓存</span></span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>软件更新源</tag>
      </tags>
  </entry>
  <entry>
    <title>dayjs时间处理库</title>
    <url>/post/3076911137.html</url>
    <content><![CDATA[<p><code>Day.js</code> 是一个轻量的 JavaScript 时间日期处理库，与 <code>Moment.js</code> 的 API 设计保持一致。</p>
<blockquote>
<p>本文只介绍了一些常用操作，关于国际化、插件、自定义等高级内容详见官方文档。</p>
</blockquote>
<p>其主要特性如下：</p>
<ul>
<li>与 <code>Moment.js</code> 相同的 API 和用法</li>
<li>不可变数据（Immutable）</li>
<li>支持链式操作（Chainable）</li>
<li>只有 <strong>2kb</strong> 大小（<em>一些高级用法以扩展的形式存在，可按需加载</em>）</li>
<li>全浏览器兼容</li>
<li>强大的国际化支持（I18n）</li>
</ul>
<p>官网：<a href="https://day.js.org/en">https://day.js.org/en</a></p>
<p>Github：<a href="https://github.com/iamkun/dayjs">https://github.com/iamkun/dayjs</a></p>
<span id="more"></span>

<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><h4 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1. 下载"></a>1.1. 下载</h4><p>下载地址：<a href="https://github.com/iamkun/dayjs/releases">https://github.com/iamkun/dayjs/releases</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/dayjs/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  dayjs().format()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-CDN"><a href="#1-2-CDN" class="headerlink" title="1.2. CDN"></a>1.2. CDN</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/dayjs@1.8.21/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>dayjs().format()<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-Node-JS"><a href="#1-3-Node-JS" class="headerlink" title="1.3. Node.JS"></a>1.3. Node.JS</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install dayjs --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dayjs = <span class="built_in">require</span>(<span class="string">&#x27;dayjs&#x27;</span>)</span><br><span class="line"><span class="comment">//import dayjs from &#x27;dayjs&#x27; // ES 2015</span></span><br><span class="line"></span><br><span class="line">dayjs().format()</span><br></pre></td></tr></table></figure>

<h4 id="1-4-TypeScript"><a href="#1-4-TypeScript" class="headerlink" title="1.4. TypeScript"></a>1.4. TypeScript</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install dayjs --save</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line">dayjs().format()</span><br></pre></td></tr></table></figure>

<p>更多见官方文档：<a href="https://day.js.org/docs/en/installation/typescript">https://day.js.org/docs/en/installation/typescript</a></p>
<h3 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h3><h4 id="2-1-解析"><a href="#2-1-解析" class="headerlink" title="2.1. 解析"></a>2.1. 解析</h4><p><code>Day.js</code> 并没有改变或覆盖 Javascript 原生的 <code>Date.prototype</code>， 而是创造了一个全新的包含 <code>Javascript Date</code> 的 <strong><code>Day.js</code></strong> 对象，可以直接使用 <strong><code>dayjs()</code></strong> 来调用。</p>
<p><code>Day.js</code> 对象是不可变的, 所有的 API 操作都将返回一个新的 <code>Day.js</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回包含当前日期和时间的 Day.js 对象</span></span><br><span class="line"><span class="comment">// 什么都不传，相当于 dayjs(new Date())</span></span><br><span class="line"><span class="keyword">let</span> now = dayjs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个标准的 ISO 8601 时间字符串</span></span><br><span class="line"><span class="comment">// https://en.wikipedia.org/wiki/ISO_8601</span></span><br><span class="line"><span class="keyword">let</span> date = dayjs(<span class="string">&#x27;2020-06-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个 Unix 时间戳 (13位)</span></span><br><span class="line"><span class="keyword">let</span> date = dayjs(<span class="number">1591149248030</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个 Javascript Date 对象</span></span><br><span class="line"><span class="keyword">let</span> date = dayjs(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 Day.js 对象是不可变的，可使用如下方法获取一个对象拷贝</span></span><br><span class="line"><span class="keyword">let</span> date1 = date.clone(); <span class="comment">// 方法一：在一个 Day.js 对象上使用 clone 函数</span></span><br><span class="line"><span class="keyword">let</span> date2 = dayjs(date); <span class="comment">// 方法二：传入一个 Day.js 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查当前 Day.js 对象是否是有效日期时间</span></span><br><span class="line"><span class="keyword">if</span> (dayjs().isValid()) &#123;</span><br><span class="line">  <span class="comment">// 有效</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 无效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-获取和设置"><a href="#2-2-获取和设置" class="headerlink" title="2.2. 获取和设置"></a>2.2. 获取和设置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取，返回 number 类型的值</span></span><br><span class="line">dayjs().year(); <span class="comment">// 年 ==&gt; dayjs().get(&#x27;year&#x27;)</span></span><br><span class="line">dayjs().month(); <span class="comment">// 月 ==&gt; dayjs().get(&#x27;month&#x27;)</span></span><br><span class="line">dayjs().date(); <span class="comment">// 日 ==&gt; dayjs().get(&#x27;date&#x27;)</span></span><br><span class="line">dayjs().hour(); <span class="comment">// 时 ==&gt; dayjs().get(&#x27;hour&#x27;)</span></span><br><span class="line">dayjs().minute(); <span class="comment">// 分 ==&gt; dayjs().get(&#x27;minute&#x27;)</span></span><br><span class="line">dayjs().second(); <span class="comment">// 秒 ==&gt; dayjs().get(&#x27;second&#x27;)</span></span><br><span class="line">dayjs().millisecond(); <span class="comment">// 毫秒 ==&gt; dayjs().get(&#x27;millisecond&#x27;)</span></span><br><span class="line">dayjs().day(); <span class="comment">// 本周的第几天 ==&gt; dayjs().get(&#x27;day&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置，单位对应的值大小写不敏感</span></span><br><span class="line">dayjs().set(<span class="string">&#x27;month&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">dayjs().set(<span class="string">&#x27;second&#x27;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-操作"><a href="#2-3-操作" class="headerlink" title="2.3. 操作"></a>2.3. 操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line">dayjs().add(<span class="number">7</span>, <span class="string">&#x27;day&#x27;</span>); <span class="comment">// 增加 7 天</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 减少</span></span><br><span class="line">dayjs().subtract(<span class="number">2</span>, <span class="string">&#x27;month&#x27;</span>); <span class="comment">// 减少 2 个月</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  开头</span></span><br><span class="line">dayjs().startOf(<span class="string">&#x27;month&#x27;</span>); <span class="comment">// 当月第一天</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 末尾</span></span><br><span class="line">dayjs().endOf(<span class="string">&#x27;year&#x27;</span>); <span class="comment">// 当年最后一天</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-显示"><a href="#2-4-显示" class="headerlink" title="2.4. 显示"></a>2.4. 显示</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化</span></span><br><span class="line">dayjs().format(); <span class="comment">// 默认格式，如：2020-06-03T20:06:13+08:00</span></span><br><span class="line">dayjs().format(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>); <span class="comment">// 指定格式 2020-06-03 20:07:12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取两个 Day.js 对象的时间差，默认毫秒，可指定单位</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020&#x27;</span>).diff(dayjs(<span class="string">&#x27;1998&#x27;</span>)); <span class="comment">// 694224000000</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020&#x27;</span>).diff(dayjs(<span class="string">&#x27;1998&#x27;</span>), <span class="string">&#x27;year&#x27;</span>); <span class="comment">// 22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line">dayjs().valueOf(); <span class="comment">// 毫秒</span></span><br><span class="line">dayjs().unix(); <span class="comment">// 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 天数</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020-07&#x27;</span>).daysInMonth(); <span class="comment">// 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 Date 对象</span></span><br><span class="line">dayjs().toDate(); <span class="comment">// Wed Jun 03 2020 20:13:40 GMT+0800 (China Standard Time)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 ISO 8601 格式的字符串</span></span><br><span class="line">dayjs().toJSON(); <span class="comment">// &quot;2020-06-03T12:15:54.635Z&quot;</span></span><br><span class="line">dayjs().toISOString(); <span class="comment">// &quot;2020-06-03T12:16:48.199Z&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-查询"><a href="#2-5-查询" class="headerlink" title="2.5. 查询"></a>2.5. 查询</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查一个日期是否在另一个日期之前</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020-06-03&#x27;</span>).isBefore(dayjs(<span class="string">&#x27;2020-05-03&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查一个日期是否在另一个日期之后</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020-06-03&#x27;</span>).isAfter(dayjs(<span class="string">&#x27;2020-05-03&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查两个日期是否相同</span></span><br><span class="line">dayjs(<span class="string">&#x27;2020-06-03&#x27;</span>).isSame(dayjs(<span class="string">&#x27;2020-06-03&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>dayjs</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中 undefined 与 null 的用法区别</title>
    <url>/post/2719612904.html</url>
    <content><![CDATA[<p>大多数计算机语言，有且仅有一个表示“无”的值，比如：C 语言的 NULL，Java 语言的 null，Python 语言的 None，Ruby 语言的 nil。</p>
<p>但是在 JavaScript 中却同时存在 <code>undefined</code> 和 <code>null</code>，这主要是由于历史原因，感兴趣的可以查一下。</p>
<p>二者的主要用法区别如下：</p>
<ul>
<li><code>undefined</code><ul>
<li>变量被声明了，但没有赋值时，就等于 <code>undefined</code></li>
<li>调用函数时，应该提供的参数没有提供，该参数等于 <code>undefined</code></li>
<li>对象没有赋值的属性，该属性的值为 <code>undefined</code></li>
<li>函数没有返回值时，默认返回 <code>undefined</code></li>
</ul>
</li>
<li><code>null</code><ul>
<li>作为函数的参数，表示该函数的参数不是对象。</li>
<li>作为对象原型链的终点。</li>
</ul>
</li>
</ul>
<blockquote>
<p>⚠️ 注意：在 JavaScript 中 <code>undefined</code> 是一个全局变量，而不是关键字！</p>
<ol>
<li>为了避免无意中被篡改，建议使用 <code>void 0</code> 来获取 <code>undefined</code> 值。</li>
<li>在比较时，建议使用 <code>if (typeof var1 === &#39;undefined&#39;) &#123;&#125;</code>。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2 入门指南</title>
    <url>/post/1046389609.html</url>
    <content><![CDATA[<h3 id="1-PM2-是什么？"><a href="#1-PM2-是什么？" class="headerlink" title="1. PM2 是什么？"></a>1. PM2 是什么？</h3><p>PM2 = Process Manager 2</p>
<blockquote>
<p>ADVANCED, PRODUCTION PROCESS MANAGER FOR NODE.JS</p>
</blockquote>
<blockquote>
<p>PM2 is a daemon process manager that will help you manage and keep your application online 24/7</p>
</blockquote>
<p>上面是官网给出的 title，简单来说：<strong>它是在后台运行的 <code>Node.js</code> 进程管理器，提供一套针对生产环境运行时的工具集，可以保障你的程序 7 * 24 小时在线。</strong></p>
<p>官网：<a href="https://pm2.keymetrics.io/">https://pm2.keymetrics.io</a></p>
<p>文档：<a href="https://pm2.keymetrics.io/docs/usage/quick-start">https://pm2.keymetrics.io/docs/usage/quick-start</a></p>
<p>总结其主要特性如下：</p>
<ul>
<li>日志管理：应用程序日志保存在服务器的硬盘中 <code>~/.pm2/logs/</code></li>
<li>负载均衡：使用 <code>Node cluster</code> 集群模块，可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许您以零秒停机时间重新启动应用程序，实现热重载。</li>
<li>终端监控：可以在终端中监控您的应用程序运行状况，包括CPU使用率，使用的内存，请求/分钟等。</li>
<li>自动停止不稳定的进程（避免无限循环）</li>
<li>支持静态服务器功能</li>
<li>提供 <code>HTTP API</code></li>
</ul>
<span id="more"></span>

<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ yarn global add pm2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用工具 <code>nvm</code> 安装管理 <code>Node.js</code> 和 <code>npm</code> ，参见我的另一篇文章：<a href="https://blog.sqiang.net/post/3176262256.html">借助 nvm 安装、管理多个 NodeJS 版本</a></p>
</blockquote>
<p>检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 --version</span><br><span class="line"></span><br><span class="line">                        -------------</span><br><span class="line"></span><br><span class="line">__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____</span><br><span class="line"> _\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___</span><br><span class="line">  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__</span><br><span class="line">   _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___</span><br><span class="line">    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____</span><br><span class="line">     _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________</span><br><span class="line">      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________</span><br><span class="line">       _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_</span><br><span class="line">        _\///______________\///______________\///__\///////////////__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          Runtime Edition</span><br><span class="line"></span><br><span class="line">        PM2 is a Production Process Manager <span class="keyword">for</span> Node.js applications</span><br><span class="line">                     with a built-in Load Balancer.</span><br><span class="line"></span><br><span class="line">                Start and Daemonize any application:</span><br><span class="line">                $ pm2 start app.js</span><br><span class="line"></span><br><span class="line">                Load Balance 4 instances of api.js:</span><br><span class="line">                $ pm2 start api.js -i 4</span><br><span class="line"></span><br><span class="line">                Monitor <span class="keyword">in</span> production:</span><br><span class="line">                $ pm2 monitor</span><br><span class="line"></span><br><span class="line">                Make pm2 auto-boot at server restart:</span><br><span class="line">                $ pm2 startup</span><br><span class="line"></span><br><span class="line">                To go further checkout:</span><br><span class="line">                http://pm2.io/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        -------------</span><br><span class="line"></span><br><span class="line">[PM2] Spawning PM2 daemon with pm2_home=/Users/sunqiang/.pm2</span><br><span class="line">[PM2] PM2 Successfully daemonized</span><br><span class="line">4.4.0</span><br></pre></td></tr></table></figure>

<h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h3><h4 id="3-1-启动"><a href="#3-1-启动" class="headerlink" title="3.1. 启动"></a>3.1. 启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以指定的 Node server 入口文件启动应用</span></span><br><span class="line">$ pm2 start app.js</span><br><span class="line">[PM2] Starting /Users/sunqiang/mydev/NodeProjects/demo/demo-koa2/app.js <span class="keyword">in</span> fork_mode (1 instance)</span><br><span class="line">[PM2] Done.</span><br><span class="line">┌─────┬────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐</span><br><span class="line">│ id  │ name   │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │</span><br><span class="line">├─────┼────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤</span><br><span class="line">│ 0   │ app    │ default     │ 0.1.0   │ fork    │ 28381    │ 0s     │ 0    │ online    │ 0%       │ 11.9mb   │ sunqiang │ disabled │</span><br><span class="line">└─────┴────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时，指定应用名</span></span><br><span class="line">$ pm2 start app.js --name demo</span><br></pre></td></tr></table></figure>

<p>其它可用选项：</p>
<ul>
<li><code>--watch</code> 以监听模式启动，当文件发生变化时自动重启</li>
<li><code>--max-memory-restart &lt;200MB&gt;</code> 设置应用重载占用的最大内存</li>
<li><code>--log &lt;log_path&gt;</code> 指定日志文件</li>
<li><code>-- arg1 arg2 arg3</code> 给启动脚本传递额外的参数</li>
<li><code>--restart-delay &lt;delay in ms&gt;</code> 延时 x 毫秒自动重启</li>
<li><code>--time</code> 日志里添加时间前缀</li>
<li><code>--no-autorestart</code> 不自动重启</li>
<li><code>--cron &lt;cron_pattern&gt;</code> 按指定的定时任务规则强制重启</li>
<li><code>--no-daemon</code> 以非守护进程模式启动</li>
</ul>
<h4 id="3-2-查看"><a href="#3-2-查看" class="headerlink" title="3.2. 查看"></a>3.2. 查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有已启动应用的基本信息</span></span><br><span class="line"><span class="comment"># 同 pm2 ls 或 pm2 status</span></span><br><span class="line">$ pm2 list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有应用的日志（历史 + 实时）</span></span><br><span class="line">$ pm2 logs</span><br><span class="line">$ pm2 logs www <span class="comment"># 只查看应用 www 的日志</span></span><br><span class="line">$ pm2 logs --lines 10 <span class="comment"># 查看最后10条历史，默认 15 条</span></span><br><span class="line">$ pm2 logs --timestamp <span class="comment"># 实时日志添加时间前缀</span></span><br><span class="line">$ pm2 logs www --lines 10 --err <span class="comment"># 只查看应用 www 的最新 10 条错误日志</span></span><br><span class="line">$ pm2 flush <span class="comment"># ❗️清空所有日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程详情</span></span><br><span class="line">$ pm2 show app_name|app_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个应用的CPU和内存资源实时占用情况</span></span><br><span class="line">$ pm2 monit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线的 Web 诊断系统，跨服务器</span></span><br><span class="line"><span class="comment"># 需要注册登录或使用 Github、Google 账户授权登录</span></span><br><span class="line">$ pm2 monitor</span><br></pre></td></tr></table></figure>

<h4 id="3-3-管理应用状态"><a href="#3-3-管理应用状态" class="headerlink" title="3.3. 管理应用状态"></a>3.3. 管理应用状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 ❗️</span></span><br><span class="line"><span class="comment"># 同时杀死并重启所有进程，短时间内服务不可用。</span></span><br><span class="line"><span class="comment"># 生成环境推荐使用 reload</span></span><br><span class="line">$ pm2 restart app_id|app_name|all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载 👍</span></span><br><span class="line"><span class="comment"># 始终保持一个进程在线，避免宕机</span></span><br><span class="line">$ pm2 reload app_id|app_name|all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ pm2 stop app_id|app_name|all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭并删除</span></span><br><span class="line">$ pm2 delete app_id|app_name|all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接杀死 pm2 守护进程</span></span><br><span class="line">$ pm2 <span class="built_in">kill</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-静态服务器"><a href="#3-4-静态服务器" class="headerlink" title="3.4. 静态服务器"></a>3.4. 静态服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将目录 dist 作为静态服务器根目录，端口为 3333</span></span><br><span class="line">$ pm2 serve ./dist 3333</span><br></pre></td></tr></table></figure>

<h4 id="3-5-集群模式（自动负载均衡）"><a href="#3-5-集群模式（自动负载均衡）" class="headerlink" title="3.5. 集群模式（自动负载均衡）"></a>3.5. 集群模式（自动负载均衡）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># max 表示 PM2 将自动检测可用 CPU 的数量并运行尽可能多的进程</span></span><br><span class="line"><span class="comment"># max 可以自定义，如果是 4 核 CPU，设置为 2 则只占用 2 核</span></span><br><span class="line">pm2 start app.js -i max</span><br></pre></td></tr></table></figure>

<h4 id="3-6-开机自启动"><a href="#3-6-开机自启动" class="headerlink" title="3.6. 开机自启动"></a>3.6. 开机自启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 startup</span><br><span class="line">$ pm2 unstartup</span><br></pre></td></tr></table></figure>

<h4 id="3-7-应用列表"><a href="#3-7-应用列表" class="headerlink" title="3.7. 应用列表"></a>3.7. 应用列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存当前应用列表，以后可以恢复</span></span><br><span class="line">$ pm2 save  <span class="comment"># 同 pm2 dump</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载之前保存的应用列表</span></span><br><span class="line">$ pm2 resurrect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除保存的应用列表</span></span><br><span class="line">$ pm2 cleardump</span><br></pre></td></tr></table></figure>

<h3 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h3><p>生成示例配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 ecosystem <span class="comment"># 或 pm2 init</span></span><br></pre></td></tr></table></figure>

<p>示例配置如下（根据实际项目需要添加、删除配置项）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">apps</span> : [&#123;</span><br><span class="line">  <span class="attr">name</span>      : <span class="string">&#x27;demo&#x27;</span>,      <span class="comment">// 应用名</span></span><br><span class="line">  <span class="attr">script</span>    : <span class="string">&#x27;app.js&#x27;</span>,   <span class="comment">// 应用文件位置</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">PM2_SERVE_PATH</span>: <span class="string">&quot;.&quot;</span>,    <span class="comment">// 静态服务路径</span></span><br><span class="line">    <span class="attr">PM2_SERVE_PORT</span>: <span class="number">8080</span>,   <span class="comment">// 静态服务器访问端口</span></span><br><span class="line">    <span class="attr">NODE_ENV</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">// 设置开发环境运行时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env_production</span> : &#123;</span><br><span class="line">    <span class="attr">NODE_ENV</span>: <span class="string">&#x27;production&#x27;</span>  <span class="comment">// 设置生产环境运行时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">instances</span>: <span class="string">&quot;max&quot;</span>,         <span class="comment">// 将应用程序分布在所有CPU核心上,可以是整数或负数</span></span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>,              <span class="comment">// 监听模式</span></span><br><span class="line">  <span class="attr">output</span>: <span class="string">&#x27;./out.log&#x27;</span>,      <span class="comment">// 指定日志标准输出文件及位置</span></span><br><span class="line">  <span class="attr">error</span>: <span class="string">&#x27;./error.log&#x27;</span>,     <span class="comment">// 错误输出日志文件及位置</span></span><br><span class="line">  <span class="attr">merge_logs</span>: <span class="literal">true</span>,         <span class="comment">// 集群情况下，可以合并日志</span></span><br><span class="line">  <span class="attr">log_type</span>: <span class="string">&quot;json&quot;</span>,         <span class="comment">// 日志类型</span></span><br><span class="line">  <span class="attr">log_date_format</span>: <span class="string">&quot;DD-MM-YYYY&quot;</span>,  <span class="comment">// 日志的日期格式</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">deploy</span> : &#123;</span><br><span class="line">    <span class="attr">production</span> : &#123;</span><br><span class="line">      <span class="attr">user</span> : <span class="string">&#x27;SSH_USERNAME&#x27;</span>,</span><br><span class="line">      <span class="attr">host</span> : <span class="string">&#x27;SSH_HOSTMACHINE&#x27;</span>,</span><br><span class="line">      <span class="attr">ref</span>  : <span class="string">&#x27;origin/master&#x27;</span>,</span><br><span class="line">      <span class="attr">repo</span> : <span class="string">&#x27;GIT_REPOSITORY&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span> : <span class="string">&#x27;DESTINATION_PATH&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pre-deploy-local&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;post-deploy&#x27;</span> : <span class="string">&#x27;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pre-setup&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以配置文件启动示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 start ecosystem.config.js --env production</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 注意：配置文件支持 js 和 yaml 格式，还有一些没有列举的参数项，详见官方文档：<a href="https://pm2.keymetrics.io/docs/usage/application-declaration">https://pm2.keymetrics.io/docs/usage/application-declaration</a></p>
</blockquote>
<h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><h4 id="5-1-升级-PM2"><a href="#5-1-升级-PM2" class="headerlink" title="5.1. 升级 PM2"></a>5.1. 升级 PM2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新前推荐先保存当前应用列表，方便更新后直接恢复</span></span><br><span class="line">$ pm2 save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新主程序</span></span><br><span class="line">$ npm install pm2 -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 紧接着更新内存中的程序</span></span><br><span class="line">$ pm2 update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复应用列表</span></span><br><span class="line">$ pm2 resurrect</span><br></pre></td></tr></table></figure>

<h4 id="5-2-日志切割"><a href="#5-2-日志切割" class="headerlink" title="5.2. 日志切割"></a>5.2. 日志切割</h4><p>安装 <code>pm2-logrotate-ext</code> 扩展模块</p>
<p>项目地址：<a href="https://github.com/Lujo5/pm2-logrotate-ext">https://github.com/Lujo5/pm2-logrotate-ext</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 install pm2-logrotate-ext</span><br></pre></td></tr></table></figure>

<p>重新启动应用后，<code>pm2-logrotate-ext</code> 以模块的形式被加载、启动。</p>
<p>可以通过以下命令对其配置进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当文件大小超过此设置则执行切割</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:max_size 1M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留最新的几个日志文件</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:retain 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启 gzip 压缩</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:compress <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名的日期部分格式</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:dateFormat YYYY-MM-DD_HH-mm-ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 几秒钟检查一次日志文件大小</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:workerInterval 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于系统的定时任务，当满足指定规则时，</span></span><br><span class="line"><span class="comment"># 不管日志文件大小是否达到设置的最大值，直接对日志文件进行切割</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:rotateInterval 0 0 * * *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 pm2 模块产生的日志同样进行切割处理</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:rotateModule <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否按定时任务设置规则强制执行</span></span><br><span class="line"><span class="comment"># 如果设置为否，则只有当日志文件大小超过设置时才进行切割</span></span><br><span class="line">$ pm2 <span class="built_in">set</span> pm2-logrotate-ext:forced <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>PM2</tag>
      </tags>
  </entry>
  <entry>
    <title>借助 nvm 安装、管理多个 NodeJS 版本</title>
    <url>/post/3176262256.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍如何使用 <a href="https://github.com/creationix/nvm">nvm</a> 对 Node 的版本进行管理，当然你也可以选择另一个工具 <a href="https://github.com/tj/n">n</a>。</p>
</blockquote>
<h3 id="安装或升级（参见这里）"><a href="#安装或升级（参见这里）" class="headerlink" title="安装或升级（参见这里）"></a>安装或升级（<a href="https://github.com/nvm-sh/nvm#install--update-script">参见这里</a>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>脚本的作用是将 nvm 仓库源码克隆到 <code>~/.nvm</code> 下面，之后将环境变量添加到配置文件中，如：<code>~/.bash_profile</code>， <code>~/.zshrc</code>，<code>~/.profile</code>，或 <code>~/.bashrc</code>。</p>
<p>所以会用到 git 命令，如果没有 Git，请先安装。</p>
<span id="more"></span>

<p><em><strong>安装完成之后，需要重新打开终端。</strong></em></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前安装的 nvm 版本</span></span><br><span class="line">➜  ~ nvm --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有帮助信息</span></span><br><span class="line">➜  ~ nvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出全部可安装的 LTS 版本</span></span><br><span class="line">➜  ~ nvm ls-remote --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Node</span></span><br><span class="line"><span class="comment"># 10 表示安装 10 系列的最新版；</span></span><br><span class="line"><span class="comment"># 也可以指定具体的版本号，如 10.15.0</span></span><br><span class="line">➜  ~ nvm install 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="comment"># 升级 Node 的同时，把旧版本安装的全局包也一块装上（因为升级时会把全局 node_modules 删除）</span></span><br><span class="line"><span class="comment"># 最后检查升级 npm</span></span><br><span class="line">➜  ~ nvm install 10.21 --reinstall-packages-from=8.17 --latest-npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用淘宝镜像安装</span></span><br><span class="line">➜  ~ NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node nvm install 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的版本</span></span><br><span class="line">➜  ~ nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的版本（通过目录）</span></span><br><span class="line">➜  ~ ls -a ~/.nvm/versions/node</span><br><span class="line">.        ..       v10.15.0 v8.15.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前使用的版本</span></span><br><span class="line">➜  ~ nvm current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">➜  ~ nvm use v8.15.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定默认的 node 版本</span></span><br><span class="line">➜  ~ nvm <span class="built_in">alias</span> default v8.15.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完全删除指定版本</span></span><br><span class="line">➜  ~ sudo chown -R $(whoami) <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br><span class="line">➜  ~ sudo chmod -R u+w <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br><span class="line">➜  ~ nvm uninstall v6.6.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级 npm</span></span><br><span class="line">➜  ~ nvm install-latest-npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前版本的 Node 中重新安装之前在  &lt;version&gt; 安装的全局包</span></span><br><span class="line">➜  ~ nvm reinstall-packages &lt;version&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>nvm</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 nrm 管理 npm 源</title>
    <url>/post/316987977.html</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ npm i nrm -g</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 nrm 内置的几个 npm 源</span></span><br><span class="line">➜  ~ nrm ls</span><br><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">* taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换源</span></span><br><span class="line">➜  ~ nrm use cnpm</span><br><span class="line">    Registry has been <span class="built_in">set</span> to: http://r.cnpmjs.org/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>借助 IPXWrapper 解决基于 IPX 协议的旧游戏局域网联机问题</title>
    <url>/post/438064550.html</url>
    <content><![CDATA[<blockquote>
<p>之前一些热门的老游戏，比如红警、魔兽争霸、星际争霸、暗黑等，都是基于 IPX 协议进行联机的，而在当前使用最多的 Windows7、Windows10 系统中，该协议已经不可用了。如果想要联机，则必须下载对应系统的 IPX 驱动文件进行安装，操作起来还是挺麻烦的。</p>
</blockquote>
<p>本文介绍一个简单的工具 <strong>IPXWrapper</strong>，它的原理是通过 <strong>UDP</strong> 包来模拟 <strong>IPX</strong>。</p>
<p>同时这是一个开源项目，相关地址如下：</p>
<ul>
<li><a href="http://www.solemnwarning.net/ipxwrapper/">官网</a></li>
<li><a href="https://github.com/whorusq/ipxwrapper">源码仓库</a></li>
<li><a href="http://www.solemnwarning.net/ipxwrapper/ipxwrapper-0.6.1.zip">下载 ipxwrapper-0.6.1.zip</a> | <a href="https://github.com/whorusq/ipxwrapper/archive/ipxwrapper-0.6.1.zip">备用下载链接1</a> ｜ <a href="https://bayfiles.com/X8Leq5nbp6/ipxwrapper-0.6.1_zip">备用下载链接2</a></li>
</ul>
<p>下载下来后，按以下步骤操作：</p>
<ol>
<li>把所有文件解压出来，并拷贝到游戏的根目录下，如果文件已经存在则选择覆盖；</li>
<li>根据当前系统版本，执行 <code>directplay-win32.reg</code> 或 <code>directplay-win64.reg</code> 文件添加注册表；</li>
<li>双击运行 <code>ipxconfig.exe</code> 文件配置网卡（一般默认即可）。当存在多张网卡时，在 <code>Network adapters</code> 列表下单击不需要的网卡，然后取消 <code>Enable interface</code> 的勾选，可以避免在游戏的网络设置中出现多个网卡选项。</li>
</ol>
<p><strong>友情提示</strong>：对于这些老旧游戏，建议使用兼容模式运行，选择「Windows XP sp3」。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>ipx</tag>
        <tag>IPXWrapper</tag>
      </tags>
  </entry>
  <entry>
    <title>吴军博士人生进阶三部曲：《态度》</title>
    <url>/post/1479506599.html</url>
    <content><![CDATA[<ul>
<li>夫妻之间的矛盾要在孩子不在场的时候解决。和谐产生快乐。</li>
<li>永远没有完美的时候。将一个比原来更好的一点的版本按时提供给用户，总比为了追求一个完美的版本，最后什么都提供不了好得多。</li>
<li>从做每一件小事开始，慢慢形成习惯，习惯塑造来性格，性格决定来命运。</li>
<li>盖茨和扎克伯格：<ul>
<li>他们至少都上了哈佛；</li>
<li>他们都有过人的技术专长；</li>
<li><code>他们都是在找到了赚钱方法之后，才退学的，而不是在退学之后开始创业的</code>。</li>
</ul>
</li>
<li><strong>好运气后面是三倍的努力</strong>。</li>
<li>成功固然不错，但更重要的是做个好人（It’s nice to be great, yet it’s great to be great.）。</li>
<li>J.P.摩根说：“任意让‘小钱’从身边溜走的人，一定留不住‘大钱’。”</li>
<li>天天操作股票的人，都是在向股市送钱。只有耐得住性子的人，才能赚钱。</li>
<li>关于投资（与巴菲特的午餐）：<ul>
<li>不要过于冒险，会导致灭顶之灾的投资；</li>
<li>不要进行自己不懂的投资。</li>
</ul>
</li>
<li>关于领导力：<ul>
<li>组织和工作能力，能否将一件事分解，组织大家完成；</li>
<li>团结大多数人，让每个人能够各尽其才，发挥作用。</li>
</ul>
</li>
<li>关于沟通：<ul>
<li>有效的沟通要以对方的确认为准；</li>
<li>以对方听得懂的话来沟通；</li>
<li>要简洁，切中要害；</li>
<li>善辩不等于好的沟通。</li>
</ul>
</li>
<li>世界上永远有很多我们觉得无能为力的事情，有些是注定的，或者运气不好，我们能做的事情比较少，但是这些倒霉事如果一再发生，就说明我们做事的方法可能有问题，需要跳出原有的固定思维，寻找更好的方法。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>读书</tag>
        <tag>吴军</tag>
      </tags>
  </entry>
  <entry>
    <title>怀旧游戏《红色警戒2：共和国之辉》</title>
    <url>/post/3045142832.html</url>
    <content><![CDATA[<blockquote>
<p>《红色警戒2：共和国之辉》是即时战略游戏《红色警戒2》的一个非官方游戏模组（MOD），由中国爱好者 <strong>Lord Hero</strong> 制作，将古巴阵营从游戏中剔除，以中国阵营替代，并新增了解放军战士、轻坦克、训练中心等中国阵营特有的兵种及建筑。</p>
</blockquote>
<p><img data-src="https://static.sqiang.net/image/post/red_alert_2.jpg?imageView2/2/w/600" alt="《红色警戒2：共和国之辉》"></p>
<span id="more"></span>

<h3 id="1-游戏信息"><a href="#1-游戏信息" class="headerlink" title="1. 游戏信息"></a>1. 游戏信息</h3><table>
  <thead>
  </thead>
  <tbody>
    <tr>
      <td align="right"><b>中文名</b></td>
      <td>红色警戒2：共和国之辉</td>
      <td align="right"><b>开发商</b></td>
      <td>Westwood公司</td>
    </tr>
    <tr>
      <td align="right"><b>原版名称</b></td>
      <td>Red Alert 2</td>
      <td align="right"><b>发行日期</b></td>
      <td>2001年</td>
    </tr>
        <tr>
      <td align="right"><b>游戏类型</b></td>
      <td>即时战略</td>
      <td align="right"><b>制作人</b></td>
      <td>Lord Hero</td>
    </tr>
        <tr>
      <td align="right"><b>内容主题</b></td>
      <td>战争</td>
      <td align="right"><b>游戏平台</b></td>
      <td>PC</td>
    </tr>
        <tr>
      <td align="right"><b>玩家人数</b></td>
      <td>2 到 8 人</td>
      <td align="right"><b>游戏画面</b></td>
      <td>2D</td>
    </tr>
  </tbody>
  <tfoot>
  </tfoot>
</table>

<h3 id="2-下载地址"><a href="#2-下载地址" class="headerlink" title="2. 下载地址"></a>2. 下载地址</h3><ul>
<li><a href="https://pan.baidu.com/s/1YWrcQ8qrethEGhV24Z7rGQ">百度网盘</a> 提取码: <code>xrqt</code></li>
<li>阿里云网盘(暂不支持)</li>
</ul>
<h3 id="3-安装说明"><a href="#3-安装说明" class="headerlink" title="3. 安装说明"></a>3. 安装说明</h3><h4 id="3-1-基本设置"><a href="#3-1-基本设置" class="headerlink" title="3.1. 基本设置"></a>3.1. 基本设置</h4><blockquote>
<p>提示：操作之前，建议修改系统设置，显示文件扩展名。</p>
</blockquote>
<ol>
<li><p>解压下载的文件到任意位置，包含 <code>GHra2.rar</code>、<code>ddraw.zip</code>、<code>ipxwrapper-0.6.1.zip</code> 三个压缩包。</p>
</li>
<li><p>解压主程序文件 <code>GHra2.rar</code> 到系统的一个目录下，<strong>注意不要使用包含中文的路径</strong>。比如，我的最终目录为 <code>C:\game\GHra2</code></p>
</li>
<li><p>解决游戏卡顿问题</p>
<ul>
<li>解压 <code>ddraw.zip</code> 得到 <code>ddraw.dll</code>，拷贝到游戏根目录下；</li>
<li>找到游戏根目录下的 <code>Ra2.ini</code> 文件，右键选择编辑打开，然后把 <code>[Video]</code> 部分全部替换为以下内容：</li>
</ul>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Video]</span></span><br><span class="line"><span class="attr">VideoBackBuffer</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">AllowHiResModes</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">AllowVRAMSidebar</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">ScreenWidth</span>=<span class="number">1024</span></span><br><span class="line"><span class="attr">ScreenHeight</span>=<span class="number">768</span></span><br><span class="line"><span class="attr">StretchMovies</span>=<span class="literal">no</span></span><br></pre></td></tr></table></figure></li>
<li><p>兼容性设置（这里以 <code>Windows 7</code> 系统为例）</p>
<p> 在 <code>ra2.exe</code> 文件上右键单击，依次选择「属性」 &gt; 「兼容性」：</p>
<ul>
<li>勾选<strong>以兼容模式运行这个程序</strong>，并选择<strong>Windows XP（Service Pack 3）</strong>；</li>
<li>勾选<strong>以管理员身份运行此程序</strong>。</li>
</ul>
</li>
<li><p>双击 <code>ra2.exe</code> 启动游戏。因为绿色免安装版，如果启动游戏没反应，可重试两次；如果还是不行，则先双击运行游戏根目录下的 <code>RegSetup.exe</code> 文件，并根据提示完成安装以修复注册表，然后再打开游戏。</p>
</li>
</ol>
<h4 id="3-2-局域网对战设置"><a href="#3-2-局域网对战设置" class="headerlink" title="3.2. 局域网对战设置"></a>3.2. 局域网对战设置</h4><p>由于该游戏在局域网对战时使用的 <code>IPX</code> 网络协议在高版本系统中已经被抛弃，所以我们需要使用一个工具 <code>IPXWrapper</code> 进行模拟。</p>
<ol>
<li><p>解压 <code>ipxwrapper-0.6.1.zip</code> 到任意目录下，并把所有文件拷贝到游戏根目录下，具体安装说明详见 <a href="/post/438064550.html">借助 IPXWrapper 解决基于 IPX 协议的旧游戏局域网联机问题
</a>。</p>
</li>
<li><p>启动游戏后，依次选择菜单「选项」 &gt; 「网络」，并做如下修改：</p>
<ul>
<li><strong>网卡</strong>：选择连接网络使用的网卡（注意，下拉框里显示的是网卡的 mac 地址）；</li>
<li><strong>Socket 号码</strong>：设置为 <code>0</code></li>
<li><strong>目标网络</strong>：设置为 <code>00.00.00.00</code></li>
</ul>
<p> <strong>注意</strong>：此处的设置，所有准备联网对战的机器需要<strong>保持一致</strong>，否则也会找不到。</p>
</li>
<li><p>返回主菜单，单击「网络」，修改你自己的游戏玩家名称，最后创建或参与游戏。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>红色警戒2</tag>
        <tag>共和国之辉</tag>
      </tags>
  </entry>
  <entry>
    <title>读《小狗钱钱1》</title>
    <url>/post/605289230.html</url>
    <content><![CDATA[<ul>
<li>成功的故事很少有精彩的翻版，但是故事中包含的道理却可以帮助我们在遇到困境时找到最佳的出路。</li>
<li>并非困难使我们放弃，而是因为我们放弃，才显得如此困难。</li>
<li>天下难事，必做于易；天下大事，必做于细。</li>
<li>太多的人做事犹豫不决，就是因为他们觉得没有完全弄懂这件事情。真正付诸实践比纯粹的思考有用的多。</li>
<li>当你决定做一件事情的时候，你必须在 72 小时之内完成，否则你很可能永远不会再做了。</li>
<li>量入为出。</li>
<li>50% 的收入变成‘鹅’（可以产生收益的钱，永远不要随便动），40% 的收入放入梦想储蓄罐（一些目标性的消费计划），剩下的 10% 用来花（日常支出）。</li>
<li>一个人觉得最引以为豪的事情，往往是那些做起来最艰难的事情。</li>
<li>挑选基金时的注意事项：<ul>
<li>至少有 10 年历史；</li>
<li>优先选择大型跨国股票基金；</li>
<li>比较基金走势图，看过去 10 年间哪些年终利润最好。</li>
</ul>
</li>
<li>把钱投在一只大型基金上，5 ～ 10 年内根本不去看他。</li>
<li>学会把某些自己不喜欢做而又不擅长做的事情交给别人就行了。</li>
<li>不要为失去的东西而忧伤，而要对拥有它的时光心存感激。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>读《习惯的力量》</title>
    <url>/post/130164364.html</url>
    <content><![CDATA[<blockquote>
<p>本书通过大量案例，揭示了我们的习惯是如何形成的，刻画了一张图「习惯回路」，它包含提示、惯常行为、奖励三个主要部分。结合这张图，通过认真分析并找到我们内心深处真正的需求，借助惯常行为的改变，就能达到改变旧习惯的目的。</p>
</blockquote>
<p>无意间在网上找到了下面这张图片，它非常好的诠释了本书的主旨：</p>
<p><img data-src="https://static.sqiang.net/image/post/customay_behavior_1.png?imageView2/2/w/600" alt="《习惯的力量》（图片来源网络）" title="《习惯的力量》（图片来源网络）"></p>
<span id="more"></span>

<h3 id="关于习惯回路"><a href="#关于习惯回路" class="headerlink" title="关于习惯回路"></a>关于习惯回路</h3><p>上图中的内圈部分主要说明的是<strong>习惯回路</strong>：</p>
<ul>
<li><code>看到一个「暗示」</code>：这个「暗示」是任何让你产生某种行为的东西，比如：看到篮球，想到的是去打篮球；看到游戏机，想到的是打游戏；看见烟盒或打火机，想到的是吸烟等。</li>
<li><code>采取「惯常行为」</code>：承接上一步的「暗示」而产生的习惯性行为。</li>
<li><code>得到渴望的「奖励」</code>：这一串行为最终会得到什么。比如：喝酒，享受的是那种暂时放下一切的状态；打游戏，得到的是赢得比赛、得到别人膜拜的快感等。当然对于同一样东西，每个人真正的渴求不尽相同，这里只是举例。</li>
</ul>
<h3 id="关于习惯改变"><a href="#关于习惯改变" class="headerlink" title="关于习惯改变"></a>关于习惯改变</h3><p>上图中的外圈部分主要说明的是<strong>如何改变习惯</strong>：</p>
<blockquote>
<p>留住旧习惯回路中的「暗示」，提供旧习惯回路中的「奖励」，但要插入一个新的惯常行为。</p>
</blockquote>
<p>这是书中阐述的一个改变习惯的黄金法则，如果暗示和奖赏不变，几乎所有习惯都是可以改变的。</p>
<p>推荐步骤：</p>
<ul>
<li>1、<code>找出目前的「惯常行为」</code>，也就是你想改变的习惯；</li>
<li>2、<code>尝试使用不同的「奖励」</code>，以找到真正想要得到的东西；</li>
<li>3、<code>找出触发习惯的「暗示」</code>，弄清楚是什么触发了这个习惯；</li>
<li>4、<code>制定计划</code>，采用不同的、更有益的习惯，以得到同样的「奖励」或更好的「奖励」。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>吴军博士人生进阶三部曲：《见识》</title>
    <url>/post/3622989416.html</url>
    <content><![CDATA[<ul>
<li>一条河的水量，由它的<strong>长度</strong>、<strong>宽度</strong>和<strong>深度</strong>三个因素决定，一个人的影响力也是如此。</li>
<li>对于那些试图在金字塔上爬几个台阶的人来讲，要做的不是抱怨社会的不公平，而是需要付出足够多的努力，同时把注意力放到最该关注的事情上去。</li>
<li>恋爱是激情，是化学物质分泌所带来的愉悦；婚姻则是由两个人一同构造一个<strong>舒适</strong>的共同体，在那个共同体中，双方都将受益。</li>
<li>很多时候，我们把太多的精力花在了选择上，而不是<strong>经营</strong>上，导致难以精进。</li>
<li><strong>做减法</strong>。如果一个人不能把一件事做好，他首先想到的就应该是少做事情，而不是让自己更忙碌。</li>
<li>学习是一件长期的事情、一辈子的事情，是马拉松比赛，而不是百米赛跑。</li>
<li>如果一定要说有什么起跑线的话，<strong>父母的见识</strong>就是起跑线。从教育下一代的角度看，一个家庭比贫穷更可怕的是<code>缺乏见识</code>、<code>缺乏爱</code>、<code>缺乏规矩</code>。</li>
<li>但凡那些能够比较长期稳定挣钱的行业，开始的投入都是比较大的，并不存在一种不需要投入就能获得很高回报的行业，否则，这个行业一定太挤，以至一段时间以后行业的回报肯定会急剧下降。</li>
<li>衡量一个专家水平最可靠的方法，就是看他们是将复杂的问题简单化，让每一个人都理解，还是故作高深，将简单的问题复杂化。</li>
<li>一个好的产品设计者会想办法<strong>引导顾客</strong>，而不会去做迎合每一个顾客的事情。</li>
<li><strong>少就是多</strong>。适度的选择给我们自由，但是过多的选择会适得其反。</li>
<li>对于所喜欢的东西，如果付出的代价是让生活质量变差，那就算了。因为钱和任何东西，都是为了让你生活得更好，而不是给你带来麻烦。</li>
<li>每个人无论是自己创业还是为别人做事，都应该有<strong>自己独特的能力</strong>，才有可能高效率的挣钱。</li>
<li>投资大师巴菲特一直在强调长期成功的投资，关键不在于把握了多少次机会，而在于是否能<strong>少犯错误</strong>。</li>
<li>对于任何演讲者，都不要指望一次演讲能够讲清楚 10 件事，真能把一件事讲清楚，目的就达到了。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>读书</tag>
        <tag>吴军</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令速查</title>
    <url>/post/966087952.html</url>
    <content><![CDATA[<h3 id="1-设置"><a href="#1-设置" class="headerlink" title="1. 设置"></a>1. 设置</h3><h4 id="1-1-查看"><a href="#1-1-查看" class="headerlink" title="1.1. 查看"></a>1.1. 查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list <span class="comment"># 所有设置</span></span><br><span class="line">$ git config --list --global <span class="comment"># 全局设置</span></span><br><span class="line">$ git config --list --<span class="built_in">local</span> <span class="comment"># 当前仓库设置</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-最小设置"><a href="#1-2-最小设置" class="headerlink" title="1.2. 最小设置"></a>1.2. 最小设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不进行此设置时，只能执行 git add 操作</span></span><br><span class="line"><span class="comment"># 一般与待 push 的远程仓库保持一致</span></span><br><span class="line"><span class="comment"># 针对 --local 的设置，优先级高于 --global s</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;xxx&quot;</span> <span class="comment"># 用户名</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;xxx@email.com&quot;</span> <span class="comment"># 用户绑定的邮箱</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="1-3-代理加速"><a href="#1-3-代理加速" class="headerlink" title="1.3. 代理加速"></a>1.3. 代理加速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">$ git config --global http.proxy socks5://127.0.0.1:1234</span><br><span class="line">$ git config --global https.proxy socks5://127.0.0.1:1234</span><br><span class="line">$ git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">$ git config --global http.sslVerify <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-命令别名"><a href="#1-4-命令别名" class="headerlink" title="1.4. 命令别名"></a>1.4. 命令别名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git st <span class="comment"># 相当于 git status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接修改配置文件，添加多个</span></span><br><span class="line">$ vim ~/.gitconfig</span><br><span class="line">$ <span class="built_in">source</span> ~/.gitconfig</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.gitconfig</span></span><br><span class="line"><span class="section">[alias]</span></span><br><span class="line">    <span class="attr">st</span> = status</span><br><span class="line">    <span class="attr">co</span> = checkout</span><br><span class="line">    <span class="attr">ci</span> = commit</span><br><span class="line">    <span class="attr">br</span> = branch</span><br><span class="line">    <span class="attr">unstage</span> = <span class="string">&quot;reset HEAD&quot;</span></span><br><span class="line">    <span class="attr">last</span> = <span class="string">&quot;log -n1&quot;</span></span><br><span class="line">    <span class="attr">lg</span> = <span class="string">&quot;log -n10 --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><h4 id="2-1-克隆及更新（clone、pull、fetch）"><a href="#2-1-克隆及更新（clone、pull、fetch）" class="headerlink" title="2.1. 克隆及更新（clone、pull、fetch）"></a>2.1. 克隆及更新（clone、pull、fetch）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> xxx.git <span class="comment"># 从远程仓库克隆一个项目到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> xxx.git <span class="string">&quot;指定目录&quot;</span> <span class="comment"># 克隆的同时，修改目录名</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b &lt;new_branch_name&gt; xxx.git <span class="comment"># 克隆同时，创建一个指定分支</span></span><br><span class="line"></span><br><span class="line">$ git pull <span class="comment"># 拉取远程仓库所有分支更新并合并到本地分支。</span></span><br><span class="line">$ git pull origin master <span class="comment"># 将远程 master 分支合并到当前本地分支</span></span><br><span class="line">$ git pull origin master:master <span class="comment"># 将远程 master 分支合并到本地 master 分支，冒号后面表示本地分支</span></span><br><span class="line"></span><br><span class="line">$ git fetch --all <span class="comment"># 拉取所有远端的最新代码</span></span><br><span class="line">$ git fetch origin master <span class="comment"># 拉取远程最新 master 分支代码</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-提交（add、commit、push）"><a href="#2-2-提交（add、commit、push）" class="headerlink" title="2.2. 提交（add、commit、push）"></a>2.2. 提交（add、commit、push）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add &lt;.|file|dir&gt; <span class="comment"># 提交「工作区」的改动到「暂存区」</span></span><br><span class="line"></span><br><span class="line">$ git commit -m [<span class="string">&quot;本次提交的备注信息&quot;</span>] <span class="comment"># 提交「暂存区」的改动到「本地仓库」</span></span><br><span class="line">$ git commit file1[file2 file3 ...] -m [message] <span class="comment"># 只提交指定文件</span></span><br><span class="line"></span><br><span class="line">$ git push origin master <span class="comment"># 将「本地仓库」的变动全部推送到「远程仓库」 master 分支</span></span><br><span class="line">$ git push --tags <span class="comment"># 推送所有标签</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-分支（branch、checkout、cherry-pick）"><a href="#2-3-分支（branch、checkout、cherry-pick）" class="headerlink" title="2.3. 分支（branch、checkout、cherry-pick）"></a>2.3. 分支（branch、checkout、cherry-pick）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch <span class="comment"># 查看所有本地分支，同 branch -l</span></span><br><span class="line">$ git branch -r  <span class="comment"># 查看所有远程的分支</span></span><br><span class="line">$ git branch -a  <span class="comment"># 查看所有远程分支和本地分支</span></span><br><span class="line"></span><br><span class="line">$ git checkout -b &lt;branch_name&gt;  <span class="comment"># 新建并且切换到新的分支</span></span><br><span class="line">$ git checkout -b &lt;branch_name&gt; &lt;remote_branch|remote_tag&gt; <span class="comment"># 基于远程分支或 tag 创建并切换到新分支</span></span><br><span class="line">$ git checkout -t origin/dev <span class="comment"># 创建与远程分支相同的本地分支</span></span><br><span class="line">$ git branch &lt;branch_name&gt; <span class="comment"># 新建一个分支，但仍停留在原分支不切换</span></span><br><span class="line"></span><br><span class="line">$ git branch -D &lt;branch_name&gt; <span class="comment"># 删除本地分支</span></span><br><span class="line">$ git push origin -d &lt;branchname&gt; <span class="comment"># 删除远程分支</span></span><br><span class="line"></span><br><span class="line">$ git checkout master <span class="comment"># 切换到 master 分支</span></span><br><span class="line"></span><br><span class="line">$ git cherry-pick &lt;branch_name&gt; <span class="comment"># 把指定分支的提交记录全部捡出到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;commit_id&gt; <span class="comment"># 捡出指定提交记录到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;commit_id1&gt;..&lt;commit_idx&gt; <span class="comment"># 捡出从 commit_id1 到 commit_idx 的提交记录到当前分支</span></span><br><span class="line">$ git cherry-pick --abort <span class="comment"># 取消捡出，回退到捡出操作之前（出现异常，不能顺利捡出时）</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-标签（tag）"><a href="#2-4-标签（tag）" class="headerlink" title="2.4. 标签（tag）"></a>2.4. 标签（tag）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag <span class="comment"># 列出所有 tag</span></span><br><span class="line">$ git tag &lt;tag_name&gt; <span class="comment"># 在当前 commit 新建一个 tag</span></span><br><span class="line">$ git tag &lt;tag_name&gt; &lt;commit_id&gt; <span class="comment"># 基于指定 commit 新建一个 tag</span></span><br><span class="line">$ git tag -d &lt;tag_name&gt; <span class="comment"># 删除本地 tag</span></span><br><span class="line">$ git push origin &lt;tag_name&gt; <span class="comment"># 推送 tag 到远程</span></span><br><span class="line">$ git show &lt;tag_name&gt; <span class="comment"># 查看 tag 的文件变化</span></span><br><span class="line">$ git checkout -b &lt;branch_name&gt; &lt;tag_name&gt; <span class="comment"># 新建一个分支，指向某个 tag</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-提交记录（log）"><a href="#2-5-提交记录（log）" class="headerlink" title="2.5. 提交记录（log）"></a>2.5. 提交记录（log）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment"># 查看当前工作区状态</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看「当前分支」的所有提交日志</span></span><br><span class="line">$ git <span class="built_in">log</span> --all <span class="comment"># 查看「所有分支」的所有提交日志</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline <span class="comment"># 单行简单格式显示日志信息</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph <span class="comment"># 以树形展示提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -n5 <span class="comment"># 查看最新的 5 条提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;branch_name&gt; <span class="comment"># 指定分支</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;file1&gt; <span class="comment"># 指定文件</span></span><br><span class="line">$ git <span class="built_in">log</span> -p &lt;file1&gt; <span class="comment"># 根据提交记录，查看某个文件的具体变化</span></span><br><span class="line">$ git blame &lt;file1&gt; <span class="comment"># 从头到尾遍历文件，显示每行文件的修改记录</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --oneline feature1 ^dev <span class="comment"># 在基于 dev 创建的分支 feature1 下，查看做了哪些提交</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-撤销与回退（reset）"><a href="#2-6-撤销与回退（reset）" class="headerlink" title="2.6. 撤销与回退（reset）"></a>2.6. 撤销与回退（reset）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;file1&gt;... <span class="comment"># 恢复「暂存区」中指定文件到 HEAD 的版本</span></span><br><span class="line">$ git checkout &lt;file1&gt;... <span class="comment"># 恢复「工作区」中指定文件到「暂存区」的版本</span></span><br><span class="line">$ git checkout . <span class="comment"># 丢弃「工作区」中的所有变动</span></span><br><span class="line"></span><br><span class="line">$ git reset --soft &lt;commit_id&gt; <span class="comment"># 把版本库上的提交回退到「暂存区」，修改记录保留</span></span><br><span class="line">$ git reset --mixed &lt;commit_id&gt; <span class="comment"># 把版本库上的提交回退到「工作区」，修改记录保留</span></span><br><span class="line">$ git reset --hard &lt;commit_id&gt;  <span class="comment"># 把版本库上的提交彻底回退到指定 commit，修改记录全部 revert</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-查询远程仓库（remote）"><a href="#2-7-查询远程仓库（remote）" class="headerlink" title="2.7. 查询远程仓库（remote）"></a>2.7. 查询远程仓库（remote）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote <span class="comment"># 查看关联的远程仓库名称</span></span><br><span class="line">$ git remote -v <span class="comment"># 查看关联的远程仓库地址</span></span><br><span class="line">$ git remote add &lt;url&gt; <span class="comment"># 添加一个远程仓库</span></span><br><span class="line">$ git remote show &lt;remote_name&gt; <span class="comment"># 显示某个远程仓库的详细信息</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-合并及冲突处理（merge）"><a href="#2-8-合并及冲突处理（merge）" class="headerlink" title="2.8. 合并及冲突处理（merge）"></a>2.8. 合并及冲突处理（merge）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge master  <span class="comment"># 在当前分支上合并 master 分支过来</span></span><br><span class="line">$ git merge --no-ff origin/dev  <span class="comment"># 在当前分支上合并远程分支dev</span></span><br><span class="line">$ git merge --abort <span class="comment"># 终止本次 merge，并回到 merge 前的状态</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-文件差异比较（diff）"><a href="#2-9-文件差异比较（diff）" class="headerlink" title="2.9. 文件差异比较（diff）"></a>2.9. 文件差异比较（diff）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff [-- file1 file2 ...] <span class="comment"># 比较工作区与暂存区差异</span></span><br><span class="line">$ git diff HEAD <span class="comment"># 比较工作区与 HEAD ( 当前工作分支)的差异</span></span><br><span class="line">$ git diff --cached <span class="comment"># 比较暂存区和 HEAD 的差异</span></span><br><span class="line">$ git diff &lt;branch_name&gt; <span class="comment"># 比较与另一个分支的差异</span></span><br><span class="line">$ git diff commit_id <span class="comment"># 比较与某一次提交差异</span></span><br></pre></td></tr></table></figure>

<h4 id="2-10-重命名文件（mv）"><a href="#2-10-重命名文件（mv）" class="headerlink" title="2.10. 重命名文件（mv）"></a>2.10. 重命名文件（mv）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git mv README.md README_2.md</span><br></pre></td></tr></table></figure>

<h4 id="2-11-删除文件（rm）"><a href="#2-11-删除文件（rm）" class="headerlink" title="2.11. 删除文件（rm）"></a>2.11. 删除文件（rm）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm file1 ...</span><br></pre></td></tr></table></figure>

<h4 id="2-12-使用暂存（stash）加塞其它紧急任务"><a href="#2-12-使用暂存（stash）加塞其它紧急任务" class="headerlink" title="2.12. 使用暂存（stash）加塞其它紧急任务"></a>2.12. 使用暂存（stash）加塞其它紧急任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash <span class="comment"># 暂存当前工作区的所有变动，使工作区重新变成干净状态，以便开始其它需要紧急处理的工作</span></span><br><span class="line">$ git stash list <span class="comment"># 显示保存的工作进度列表</span></span><br><span class="line">$ git stash apply [stash num] <span class="comment"># 恢复最后一次保存的工作进度，在工作进度列表不删除</span></span><br><span class="line">$ git stash pop [stash num] <span class="comment"># 恢复最后一次保存的工作进度，并且在工作进度列表删除</span></span><br><span class="line">$ git stash show [stash num] <span class="comment"># 显示做了哪些改动</span></span><br><span class="line">$ git stash drop [stash num] <span class="comment"># 删除一条保存的工作进度</span></span><br><span class="line">$ git stash clear <span class="comment"># 删除所有暂存的改动</span></span><br></pre></td></tr></table></figure>

<h3 id="3-更多学习资源推荐"><a href="#3-更多学习资源推荐" class="headerlink" title="3. 更多学习资源推荐"></a>3. 更多学习资源推荐</h3><ul>
<li><a href="https://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Git - Book</a></li>
<li><a href="https://backlog.com/git-tutorial/cn/">猴子都能懂的GIT入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么使用 Git 向不同平台的仓库提交代码</title>
    <url>/post/3124860628.html</url>
    <content><![CDATA[<blockquote>
<p><strong>场景描述</strong>：日常工作中，公司使用一个基于 gitlab 搭建的 Git 服务，我们自己写的小项目可能放在 Github、Coding 等平台上，不同平台的账户不同，如何便携的拉取、提交代码，而不用每次输入账号、密码呢？</p>
</blockquote>
<span id="more"></span>

<h3 id="1-拉取代码"><a href="#1-拉取代码" class="headerlink" title="1. 拉取代码"></a>1. 拉取代码</h3><h4 id="1-1-方式一：用户名-amp-密码"><a href="#1-1-方式一：用户名-amp-密码" class="headerlink" title="1.1. 方式一：用户名&amp;密码"></a>1.1. 方式一：用户名&amp;密码</h4><p>这种方式主要用于 <code>HTTPS</code> 协议。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  git <span class="built_in">clone</span> https://用户名:密码@github.com/xxx.git</span><br></pre></td></tr></table></figure>

<p>当用户名是邮箱时，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 %40 对应邮箱地址中的 @ 符号</span></span><br><span class="line">➜  git <span class="built_in">clone</span> https://aaaa%40gmail.com:密码@github.com/xxx.git</span><br></pre></td></tr></table></figure>

<h4 id="1-2-方式二：SSH"><a href="#1-2-方式二：SSH" class="headerlink" title="1.2. 方式二：SSH"></a>1.2. 方式二：SSH</h4><p>这种方式主要用于 <code>SSH</code> 协议。</p>
<p>步骤：</p>
<ol>
<li><p>生成对应 Git 的公私钥</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ssh-keygen -t rsa -C <span class="string">&quot;email1@xxx.com” -f ~/.ssh/github_rsa</span></span><br><span class="line"><span class="string">➜  ssh-keygen -t rsa -C &quot;</span>email2@xxx.com” -f ~/.ssh/coding_rsa</span><br></pre></td></tr></table></figure></li>
<li><p>添加私钥</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ssh-add ~/.ssh/github_rsa</span><br><span class="line">➜  ssh-add ~/.ssh/coding_rsa</span><br></pre></td></tr></table></figure>

<p> 解决：<code>Could not open a connection to your authentication agent</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ssh-agent bash</span><br></pre></td></tr></table></figure>

<p> 其它命令：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看私钥列表</span></span><br><span class="line">➜  ssh-add -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空私钥列表</span></span><br><span class="line">➜  ssh-add -D</span><br></pre></td></tr></table></figure></li>
<li><p>添加对应不同平台的配置</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  touch ~/.ssh/config</span><br><span class="line">➜  vim ~/.ssh/config</span><br></pre></td></tr></table></figure>

<p> 文件内容如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_rsa</span><br><span class="line"></span><br><span class="line"># coding</span><br><span class="line">Host coding.net</span><br><span class="line">HostName coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/coding_rsa</span><br></pre></td></tr></table></figure></li>
<li><p>将公钥添加到服务器</p>
<p> 这里以 Github 为例，首先拷贝对应的公钥。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  pbcopy &lt; ~/.ssh/github_rsa.pub</span><br></pre></td></tr></table></figure>

<p> 打开 <a href="https://github.com/">https://github.com</a>，找到设置中的 <code>SSH and GPG keys</code>，如下图：</p>
<p> <img data-src="https://static.sqiang.net/image/post/git_ssh_auth.jpg"></p>
<p> 其中</p>
<ul>
<li><code>Title</code> 设置一个当前公钥的标识</li>
<li><code>Key</code> 公钥复制到这里</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p>测试连接</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ssh -T git@github.com</span><br><span class="line">Hi xxxxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<p> 测试 clone</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  git clone git@xxx:xxx/demo.git</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-提交代码"><a href="#2-提交代码" class="headerlink" title="2. 提交代码"></a>2. 提交代码</h3><p>提交代码时，如果没有设置当前项目对应 Git 的 <code>name</code> 和 <code>email</code>，将提示如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  git commit -m <span class="string">&#x27;added file&#x27;</span></span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">  git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">&#x27;s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fatal: empty ident name (for &lt;&gt;) not allowed</span></span><br></pre></td></tr></table></figure>

<p>此时，我们需要使用以下命令，对当前项目添加本地设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，这里省略了参数 --local ，是针对当前项目的本地设置</span></span><br><span class="line">➜  git config user.name <span class="string">&quot;your git user name&quot;</span></span><br><span class="line">➜  git config user.email <span class="string">&quot;yout git user email&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用如下命令查看设置结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地设置</span></span><br><span class="line">➜  git config --list --<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全局设置</span></span><br><span class="line">➜  git config --list --global</span><br></pre></td></tr></table></figure>

<p>再次重新提交代码即可。</p>
<blockquote>
<p>⚠️ <strong>注意</strong>：如果已经在 Git 的全局设置中添加 <code>name</code> 和 <code>email</code>，在提交时会直接使用全局设置，而不会出现上面的提示信息。并且，之后在仓库中看到的提交人和邮箱也会是全局设置中的 <code>name</code> 和 <code>email</code>， 所以一定要增加项目的本地设置，避免因使用默认全局设置而造成的提交信息混乱。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 常用操作命令及问题处理</title>
    <url>/post/1634855012.html</url>
    <content><![CDATA[<h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h3><h4 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1. 基本使用"></a>1.1. 基本使用</h4><ul>
<li><p>检出 checkout</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检出代码</span></span><br><span class="line">➜  svn co repo_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检出代码，并指定目录名</span></span><br><span class="line">➜  svn co repo_url saved_dir_name</span><br></pre></td></tr></table></figure></li>
<li><p>加入版本控制 add</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件</span></span><br><span class="line">➜  svn add /path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有 .sh 后缀的文件</span></span><br><span class="line">➜  svn add *.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归添加当前目录下的所有新文件</span></span><br><span class="line"><span class="comment"># 如果使用参数 --no-ignore 则新增时会包含被设置为忽略的文件</span></span><br><span class="line">➜  svn add . --force</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>提交 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn ci -m <span class="string">&#x27;提交更改&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>更新 update</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn up [file|path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新到指定版本 11</span></span><br><span class="line">➜  svn up -r 11 [file|path]</span><br></pre></td></tr></table></figure></li>
<li><p>清除锁定 <code>svn cleanup</code></p>
</li>
<li><p>重定向仓库地址到新地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn switch --relocate old_repo_url new_repo_url</span><br></pre></td></tr></table></figure></li>
<li><p>切换当前项目到指定分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn switch svn://branch_url</span><br></pre></td></tr></table></figure></li>
<li><p>检查工作副本下的文件状态 <code>svn st</code></p>
</li>
<li><p>查看工作副本的版本库概览信息 <code>svn info</code></p>
</li>
<li><p>查看版本库上某个目录下的文件列表（不需要本地检出）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn list svn://192.168.1.15/blog</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-2-分支和标签"><a href="#1-2-分支和标签" class="headerlink" title="1.2. 分支和标签"></a>1.2. 分支和标签</h4><ul>
<li><p>创建 branch、tag</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn cp svn://trunk_url svn://branch_url -m <span class="string">&#x27;创建分支&#x27;</span></span><br><span class="line">➜  svn mkdir svn://branch_url -m <span class="string">&#x27;创建空分支&#x27;</span></span><br><span class="line">➜  svn cp svn://trunk_url tag_url -m <span class="string">&#x27;创建标签&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除 branch、tag</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn rm svn://branch_url -m <span class="string">&#x27;删除分支&#x27;</span></span><br><span class="line">➜  svn rm svn://branch_url -m <span class="string">&#x27;删除标签&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看 branch、tag</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn ls ^/branches --verbose</span><br><span class="line">➜  svn ls ^/tags --verbose</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-历史记录"><a href="#1-3-历史记录" class="headerlink" title="1.3. 历史记录"></a>1.3. 历史记录</h4><ul>
<li><p>查看提交记录</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看整个项目或指定文件目录的提交记录</span></span><br><span class="line">➜  svn <span class="built_in">log</span> [file|dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个指定版本之间的提交记录</span></span><br><span class="line">➜   svn <span class="built_in">log</span> -r 11:5 [file|dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最新的 5 条提交记录</span></span><br><span class="line">➜  svn <span class="built_in">log</span> -l 5 [file|dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看带目录信息的提交记录</span></span><br><span class="line">➜  svn <span class="built_in">log</span> -l 5 -v [file|dir]</span><br></pre></td></tr></table></figure></li>
<li><p>查看指定版本号的文件内容</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn cat file -r 版本号</span><br></pre></td></tr></table></figure></li>
<li><p>查看文件的修改详情（行级）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较工作副本下的文件与缓存在 .svn 的“原始”拷贝</span></span><br><span class="line">➜  svn diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较工作副本下的文件与指定版本号 5 下的文件</span></span><br><span class="line">➜  svn diff -r 5 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个版本库下的文件</span></span><br><span class="line">➜  svn diff -r 11:2 file</span><br></pre></td></tr></table></figure></li>
<li><p>查看文件每一行的最后修改人</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn blame file</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-4-忽略文件"><a href="#1-4-忽略文件" class="headerlink" title="1.4. 忽略文件"></a>1.4. 忽略文件</h4><ul>
<li><p>基本使用</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略指定文件或目录</span></span><br><span class="line">➜  svn propset svn:ignore <span class="string">&#x27;file|dir&#x27;</span> dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略当前目录中所有以 .log 结尾的文件</span></span><br><span class="line"><span class="comment"># . 表示当前目录，当指定具体目录时，该目录需处于版本控制状态</span></span><br><span class="line">➜  svn propset svn:ignore -R <span class="string">&#x27;*.log&#x27;</span> .</span><br><span class="line">➜  svn ci -m <span class="string">&#x27;ignore *.log file&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>要忽略的文件已经被 add 过了</p>
<ul>
<li>未提交</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn revert -R [file|dir]</span><br></pre></td></tr></table></figure>

<ul>
<li>已提交</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn del [file|dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只从 svn 中忽略，而不删除本地文件</span></span><br><span class="line">➜  svn del --keep-local [file|dir]</span><br></pre></td></tr></table></figure>

<p>  然后再执行忽略设置并提交。</p>
</li>
<li><p>使用配置文件</p>
<p>  新建 .svnignore 文件，写入类似如下内容：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runtime</span><br><span class="line">*.log</span><br><span class="line">*.apk</span><br><span class="line">*.class</span><br></pre></td></tr></table></figure>

<p>  然后执行设置</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn add .svnignore</span><br><span class="line">➜  svn propset svn:ignore -R -F .svnignore .</span><br></pre></td></tr></table></figure>

<p>  提交设置</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn ci -m <span class="string">&#x27;add .svnignore and set some ignore&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-5-小技巧"><a href="#1-5-小技巧" class="headerlink" title="1.5. 小技巧"></a>1.5. 小技巧</h4><ul>
<li><p>创建了一个文件夹，并且把它加入版本控制，但忽略文件夹中的所有内容</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn mkdir dir2</span><br><span class="line">➜  svn propset svn:ignore <span class="string">&#x27;*&#x27;</span> dir2</span><br><span class="line">➜  svn ci -m <span class="string">&#x27;Adding &quot;dir2&quot; and ignoring its contents.&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建一个不加入版本控制（忽略）的文件夹</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  mkdir dir1</span><br><span class="line">➜  svn propset svn:ignore <span class="string">&#x27;dir1&#x27;</span> .</span><br><span class="line">➜  svn ci -m <span class="string">&#x27;Ignoring a directory called &quot;dir1&quot;.&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>导入一个目录 import</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn import /tmp/upload svn://192.168.0.1/repo1 -m <span class="string">&#x27;add module upload&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-合并-merge"><a href="#2-合并-merge" class="headerlink" title="2. 合并 merge"></a>2. 合并 merge</h3><h4 id="2-1-分支合并到主干"><a href="#2-1-分支合并到主干" class="headerlink" title="2.1. 分支合并到主干"></a>2.1. 分支合并到主干</h4><blockquote>
<p>⚠️<strong>注意</strong>：分支合并到主干后应当删除该分支，因为在 SVN 中该分支已经不能进行刷新也不能合并到主干。</p>
</blockquote>
<p>操作步骤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入主干目录</span></span><br><span class="line">➜  <span class="built_in">cd</span> trunk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建分支时的版本号</span></span><br><span class="line">➜  svn <span class="built_in">log</span> -q -v -l 1 --stop-on-copy svn://branch_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支上的最新代码到主干</span></span><br><span class="line"><span class="comment"># svn1.8+ 可以不加参数 --reintegrate</span></span><br><span class="line">➜  svn merge --reintegrate svn://branch_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支中哪些改动已经被合并到主干</span></span><br><span class="line">➜  svn mergeinfo svn://branch_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支哪些改动还未合并</span></span><br><span class="line">➜  svn mergeinfo svn://branch_url --show-revs eligible</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⚠️ 提交本次合并（不提交的话，合并不会生效，也会影响后面的更新操作）</span></span><br><span class="line">➜  svn ci -m <span class="string">&#x27;merge from branch r11:r5 into trunk&#x27;</span></span><br></pre></td></tr></table></figure>


<h4 id="2-2-主干合并到分支"><a href="#2-2-主干合并到分支" class="headerlink" title="2.2. 主干合并到分支"></a>2.2. 主干合并到分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入分支目录</span></span><br><span class="line">➜  <span class="built_in">cd</span> branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并之前，可以使用 svn mergeinfo 命令查看主干上有哪些待合并的版本信息</span></span><br><span class="line">➜  svn mergeinfo -v svn://trunk_url --show-revs eligible --<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并主干上最新代码到分支</span></span><br><span class="line">➜  svn merge svn://trunk_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⚠️ 提交本次合并（不提交的话，合并不会生效，也会影响后面的更新操作）</span></span><br><span class="line">➜  svn ci -m <span class="string">&#x27;merge from trunk r11:r5 into branch&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-回滚-rollback"><a href="#3-回滚-rollback" class="headerlink" title="3. 回滚 rollback"></a>3. 回滚 rollback</h3><h4 id="3-1-未提交使用-revert"><a href="#3-1-未提交使用-revert" class="headerlink" title="3.1. 未提交使用 revert"></a>3.1. 未提交使用 <code>revert</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件状态</span></span><br><span class="line">➜  svn status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚单个文件</span></span><br><span class="line">➜  svn revert /path/to/file_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚一个目录</span></span><br><span class="line">➜  svn revert dir_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚整个项目</span></span><br><span class="line">➜  <span class="built_in">cd</span> trunk</span><br><span class="line">➜  svn revert -R .</span><br></pre></td></tr></table></figure>

<h4 id="3-2-已提交使用-merge-r"><a href="#3-2-已提交使用-merge-r" class="headerlink" title="3.2. 已提交使用 merge -r"></a>3.2. 已提交使用 <code>merge -r</code></h4><ol>
<li><p>先更新到最新代码</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里得到最新版本号 11</span></span><br><span class="line">➜  svn up</span><br><span class="line">Updating <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">At revision 11.</span><br></pre></td></tr></table></figure></li>
<li><p>找到要回滚到的版本号</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看最新的 50 次提交记录</span></span><br><span class="line"><span class="comment"># 最后的参数可以指定文件或目录</span></span><br><span class="line">➜  <span class="built_in">cd</span> trunk</span><br><span class="line">➜  svn <span class="built_in">log</span> -l 50 [file|dir]</span><br></pre></td></tr></table></figure>

<p> 假如我们想要回退到的版本是 5，可以执行命令 <code>svn diff -r 11:5 [file|dir]</code> 简单查看两个版本的区别。</p>
</li>
<li><p>回滚到指定版本号</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  svn merge -r 11:5 [file|dir]</span><br></pre></td></tr></table></figure>

<p> 验证回滚是否成功</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  svn diff -r [file|dir]</span><br></pre></td></tr></table></figure></li>
<li><p>提交本次回滚操作到仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn ci -m <span class="string">&quot;Revert revision from r28 to r25,because of ...&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>其它地方更新本次回滚操作</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn up</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-3-回退误操作的-svn-up"><a href="#3-3-回退误操作的-svn-up" class="headerlink" title="3.3. 回退误操作的 svn up"></a>3.3. 回退误操作的 <code>svn up</code></h4><p><strong>场景</strong>：我们有一个目录是稳定版本的环境，因为误操作执行了 <code>svn up</code> 后，代码被更新到了仓库中的最新版本，而最新版还没有测试通过，所以我们需要先将更新的代码回滚，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> trunk</span><br><span class="line">➜  svn merge -r 13410:13962 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ <strong>注意</strong>：千万不要提交，否则仓库中的代码也会回滚，而我们只希望本地目录回滚。</p>
<p>等到可以执行 <code>svn up</code> 的时候，再恢复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn revert -R .</span><br><span class="line">➜  svn up</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-附录1"><a href="#4-附录1" class="headerlink" title="4. 附录1"></a>4. 附录1</h3><h4 id="4-1-命令简写对照"><a href="#4-1-命令简写对照" class="headerlink" title="4.1. 命令简写对照"></a>4.1. 命令简写对照</h4><ul>
<li><code>svn checkout</code> <strong>—&gt;</strong> <code>svn co</code></li>
<li><code>svn update</code> <strong>—&gt;</strong> <code>svn up</code></li>
<li><code>svn commit</code> <strong>—&gt;</strong> <code>svn ci</code></li>
<li><code>svn delete</code> <strong>—&gt;</strong> <code>svn rm</code> 或 <code>svn del</code></li>
<li><code>svn copy</code> <strong>—&gt;</strong> <code>svn cp</code></li>
<li><code>svn list</code> <strong>—&gt;</strong> <code>svn ls</code></li>
<li><code>svn status</code> <strong>—&gt;</strong> <code>svn st</code></li>
<li><code>svn switch</code> <strong>—&gt;</strong> <code>svn sw</code></li>
<li><code>svn diff</code> <strong>—&gt;</strong> <code>svn di</code></li>
</ul>
<h4 id="4-2-处理冲突"><a href="#4-2-处理冲突" class="headerlink" title="4.2. 处理冲突"></a>4.2. 处理冲突</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找合并时的冲突文件，手工解决冲突</span></span><br><span class="line">➜  svn st | grep ^C</span><br><span class="line"><span class="comment"># 告知svn冲突已解决</span></span><br><span class="line">➜  svn resolved filename</span><br><span class="line"><span class="comment"># 提示合并后的版本</span></span><br><span class="line">➜  svn commit -m <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>(<strong>p</strong>) postpone    暂时推后处理，我可能要和那个和我冲突的家伙商量一番</li>
<li>(<strong>df</strong>) diff-full        把所有的修改列出来，比比看</li>
<li>(<strong>e</strong>) edit              直接编辑冲突的文件</li>
<li>(<strong>mc</strong>) mine-conflict 如果你很有自信可以只用你的修改，把别人的修改干掉</li>
<li>(<strong>tc</strong>) theirs-conflict  底气不足，还是用别人修改的吧</li>
<li>(<strong>s</strong>) show all options  显示其他可用的命令</li>
</ul>
<h4 id="4-3-文件符号状态"><a href="#4-3-文件符号状态" class="headerlink" title="4.3. 文件符号状态"></a>4.3. 文件符号状态</h4><ul>
<li><strong>U</strong>: 表示从服务器收到文件更新了</li>
<li><strong>G</strong>: 表示本地文件以及服务器文件都已更新,而且成功的合并了</li>
<li><strong>A</strong>: 表示有文件或者目录添加到工作目录</li>
<li><strong>R</strong>: 表示文件或者目录被替换了.</li>
<li><strong>C</strong>: 表示文件的本地修改和服务器修改发生冲突</li>
</ul>
<h4 id="4-4-如何迁移仓库"><a href="#4-4-如何迁移仓库" class="headerlink" title="4.4. 如何迁移仓库"></a>4.4. 如何迁移仓库</h4><ol>
<li><p>备份源仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svnadmin dump /path/to/repo &gt; repo.dump</span><br></pre></td></tr></table></figure></li>
<li><p>新建仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svnadmin create new_repo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ <strong>注意</strong>：如果是迁移到 Windows 下，使用 VisualSVN 创建新仓库时，不要创建默认目录结构（branches、trunk、tags），否则在导入备份时候可能因为目录冲突发生报错而中断。</p>
</blockquote>
</li>
<li><p>从备份文件导入新建的仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svnadmin load /path/to/new_repo &lt; repo.dump</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>建议：切换代码的 svn 仓库地址时，最好使用新 svn 地址进行重新检出的方式操作；如果直接使用 <code>svn switch --relocate svn://svn_old svn://svn_new </code> 进行切换，有可能报类似 <code>uuid</code> 冲突的错误。</strong></p>
<h3 id="5-附录2：常见问题处理"><a href="#5-附录2：常见问题处理" class="headerlink" title="5. 附录2：常见问题处理"></a>5. 附录2：常见问题处理</h3><h4 id="5-1-svn-Can-39-t-convert-string-from-39-UTF-8-39-to-native-encoding"><a href="#5-1-svn-Can-39-t-convert-string-from-39-UTF-8-39-to-native-encoding" class="headerlink" title="5.1. svn: Can&#39;t convert string from &#39;UTF-8&#39; to native encoding"></a>5.1. <code>svn: Can&#39;t convert string from &#39;UTF-8&#39; to native encoding</code></h4><p><strong>解决</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;export LC_ALL=zh_CN.UTF-8&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">➜  <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="5-2-SSL-handshake-failed-SSL-错误：Key-usage-violation-in-certificate-has-been-detected"><a href="#5-2-SSL-handshake-failed-SSL-错误：Key-usage-violation-in-certificate-has-been-detected" class="headerlink" title="5.2. SSL handshake failed: SSL 错误：Key usage violation in certificate has been detected."></a>5.2. <code>SSL handshake failed: SSL 错误：Key usage violation in certificate has been detected.</code></h4><p><strong>场景</strong>：在 CentOS 服务器上，通过 svn 命令检出 VisualSVN 管理的仓库代码时。</p>
<p><strong>解决</strong>：安装高版本的 svn ，如下</p>
<ul>
<li><p>添加软件源 <code>vim /etc/yum.repos.d/wandisco-svn.repo</code></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[WandiscoSVN]</span><br><span class="line">name=Wandisco SVN Repo</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.8/RPMS/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></li>
<li><p>删除旧版本 <code>yum remove subversion*</code></p>
</li>
<li><p>安装新版本</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum clean all</span><br><span class="line">➜  yum install subversion</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>svn</tag>
        <tag>Subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 服务端配置</title>
    <url>/post/1709980602.html</url>
    <content><![CDATA[<h3 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1. 创建版本库"></a>1. 创建版本库</h3><blockquote>
<p>单版本库与多版本库各有优点和缺点，主要根据具体项目情况进行选择。</p>
</blockquote>
<h4 id="1-1-多库模式"><a href="#1-1-多库模式" class="headerlink" title="1.1. 多库模式"></a>1.1. 多库模式</h4><ol>
<li><p>创建</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  mkdir -p /home/repos</span><br><span class="line">➜  svnadmin create /home/repos/resume</span><br><span class="line">➜  svnadmin create /home/repos/blog</span><br><span class="line">➜  <span class="built_in">cd</span> /home/repos</span><br><span class="line">➜  tree -L 2</span><br><span class="line">.</span><br><span class="line">|-- blog</span><br><span class="line">|   |-- README.txt</span><br><span class="line">|   |-- conf</span><br><span class="line">|   |-- db</span><br><span class="line">|   |-- format</span><br><span class="line">|   |-- hooks</span><br><span class="line">|   `-- locks</span><br><span class="line">`-- resume</span><br><span class="line">    |-- README.txt</span><br><span class="line">    |-- conf</span><br><span class="line">    |-- db</span><br><span class="line">    |-- format</span><br><span class="line">    |-- hooks</span><br><span class="line">    `-- locks</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>公用一份 authz 和 passwd 文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  mv blog/conf/authz ./</span><br><span class="line">➜  mv blog/conf/passwd ./</span><br><span class="line">➜  rm -rf resume/conf/authz resume/conf/passwd</span><br></pre></td></tr></table></figure></li>
<li><p>分别设置每个库的 <strong>svnserve.conf</strong> 文件</p>
<p> 以 blog 为例 <code>vim /home/repos/blog/conf/svnserve.conf</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名用户只读(read或none)</span></span><br><span class="line">anon-access = none</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证用户可写</span></span><br><span class="line">auth-access = write</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公用 passwd 文件的位置</span></span><br><span class="line">password-db = ../../passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公用 authz 文件的位置</span></span><br><span class="line">authz-db = ../../authz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库的文件名(具体在客户端更新下载的时候能看到仓库名字)</span></span><br><span class="line">realm = blog</span><br></pre></td></tr></table></figure></li>
<li><p>修改公用的 <strong>passwd</strong> 设置用户名、密码</p>
<p> <code># vim /home/repos/passwd</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">admin = admin</span><br><span class="line">lisi = pwdls</span><br><span class="line">zhansan = pwdzs</span><br></pre></td></tr></table></figure></li>
<li><p>修改公用的 <strong>authz</strong> 设置用户访问权限</p>
<p> <code>vim /home/repos/authz</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[groups]</span><br><span class="line">admin = admin</span><br><span class="line">blog_rw = zhangsan</span><br><span class="line">resume_rw = lisi</span><br><span class="line"></span><br><span class="line">[/]</span><br><span class="line">@admin = rw</span><br><span class="line"></span><br><span class="line">[blog:/]</span><br><span class="line">@blog_rw = rw</span><br><span class="line"></span><br><span class="line">[resume:/]</span><br><span class="line">@resume_rw = rw</span><br></pre></td></tr></table></figure>

<p> 说明：admin 可以读写 blog、resume；zhangsan 只能读写 blog；lisi 只能读写 resume。</p>
</li>
</ol>
<h4 id="1-2-单库模式"><a href="#1-2-单库模式" class="headerlink" title="1.2. 单库模式"></a>1.2. 单库模式</h4><blockquote>
<p>单库方式比较简单，只针对于单一项目的开发管理，并且在单库方式下一台服务器只能创建一个样本库，限制较大！</p>
</blockquote>
<p>创建一个新的单库 cms</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ mkdir -p /home/repos2</span><br><span class="line">➜ svnadmin create /home/repos2/cms</span><br></pre></td></tr></table></figure>

<p>单库模式下，配置文件在 <code>/home/repos2/cms/conf</code> 下，其中 svnserv.conf 和 passwd 的配置方式与多库相似，authz 的配置有较大区别，如下：</p>
<p><code>vim /home/repos2/cms/conf/authz</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[groups]</span><br><span class="line">admin = admin</span><br><span class="line">dev = wanger</span><br><span class="line"></span><br><span class="line">[/]</span><br><span class="line">@admin = rw</span><br><span class="line">@dev = rw</span><br></pre></td></tr></table></figure>

<h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h3><blockquote>
<p>注意：svn 默认监听端口 TCP 3690，如果开启了防火墙需提前加入可访问列表；或者在启动时候，使用参数 <code>--listen-port</code>。</p>
</blockquote>
<p>多库 <code>svnserve -d -r /home/repos</code></p>
<p>单库 <code>svnserve -d -r /home/repos/cms</code></p>
<ul>
<li><code>-d</code> 以守护模式运行</li>
<li><code>-r</code> 指定 svn 服务的根目录</li>
<li><code>--listen-port</code> 指定 svn 服务监听的端口号</li>
</ul>
<h3 id="3-访问"><a href="#3-访问" class="headerlink" title="3. 访问"></a>3. 访问</h3><p>多库模式需要指定具体的库名，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn co svn://192.168.0.1/blog</span><br><span class="line">➜  svn co svn://192.168.0.1/resume</span><br></pre></td></tr></table></figure>

<p>单库模式只需要输入ip或域名地址，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn co svn://192.168.0.1</span><br></pre></td></tr></table></figure>

<h3 id="4-停止服务"><a href="#4-停止服务" class="headerlink" title="4. 停止服务"></a>4. 停止服务</h3><p><code>killall svnserve</code></p>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -aux|grep svnserv</span><br><span class="line">➜  <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>

<h3 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h3><h4 id="5-1-创建通用版本库布局"><a href="#5-1-创建通用版本库布局" class="headerlink" title="5.1. 创建通用版本库布局"></a>5.1. 创建通用版本库布局</h4><p>在开发过程中，推荐创建如下布局文件：</p>
<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>创建目录布局临时文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  mkdir -p /tmp/repos_layout/&#123;trunk,branches,tags&#125;</span><br><span class="line">➜  tree /tmp/repos_layout/</span><br><span class="line">/tmp/repos_layout/</span><br><span class="line">|-- branches</span><br><span class="line">|-- tags</span><br><span class="line">`-- trunk</span><br></pre></td></tr></table></figure></li>
<li><p>导入到版本库中</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn import /tmp/repos_layout svn://192.168.0.1/resume -m <span class="string">&#x27;init&#x27;</span></span><br><span class="line">Adding         /tmp/repos_layout/branches</span><br><span class="line">Adding         /tmp/repos_layout/tags</span><br><span class="line">Adding         /tmp/repos_layout/trunk</span><br><span class="line">Committing transaction...</span><br><span class="line">Committed revision 1.</span><br></pre></td></tr></table></figure>

<p> 查看是否导入成功</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn list --verbose svn://192.168.0.1/resume</span><br></pre></td></tr></table></figure></li>
<li><p>修改权限</p>
<p> 编辑权限文件 <code>vim /home/repos/authz</code>，设置普通用户访问 trunk，管理员访问版本库根目录 trunk、branches、tags，如下：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[resume:/]</span><br><span class="line">@admin = rw</span><br><span class="line"></span><br><span class="line">[resume:/trunk]</span><br><span class="line">@resume_rw = rw</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ <strong>注意</strong>：权限是继承的，管理员既然能访问根目录，那么根下的子目录也是有权限访问的；而普通用户一般设置较小的权限集，只能访问指定的目录，比如这里的 trunk。</p>
</blockquote>
</li>
<li><p>访问</p>
<p> 普通用户 <code>svn co svn://192.168.1.1/resume/trunk</code></p>
<p> 管理员 <code>svn co svn://192.168.1.1/resume/</code></p>
</li>
</ol>
<h4 id="5-x-参照资料"><a href="#5-x-参照资料" class="headerlink" title="5.x. 参照资料"></a>5.x. 参照资料</h4><ul>
<li><a href="https://tortoisesvn.net/docs/nightly/TortoiseSVN_zh_CN/tsvn-preface-readingguide.html">https://tortoisesvn.net/docs/nightly/TortoiseSVN_zh_CN/tsvn-preface-readingguide.html</a></li>
<li><a href="http://wangying.sinaapp.com/archives/1352">http://wangying.sinaapp.com/archives/1352</a></li>
<li><a href="http://www.runoob.com/svn/svn-tutorial.html">http://www.runoob.com/svn/svn-tutorial.html</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>svn</tag>
        <tag>Subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 CentOS 6.x/7.x 上安装 Git 及最新版</title>
    <url>/post/2026663390.html</url>
    <content><![CDATA[<blockquote>
<p>Git 是一个分布式版本控制软件，最初由<a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">林纳斯·托瓦兹</a>创作，于 2005 年以 GPL 发布。最初目的是为更好地管理 Linux 内核开发而设计。</p>
</blockquote>
<p>更多介绍，详见：</p>
<ul>
<li>官网：<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></li>
<li>wiki：<a href="https://zh.wikipedia.org/wiki/Git">https://zh.wikipedia.org/wiki/Git</a></li>
</ul>
<span id="more"></span>

<h3 id="方式一、yum安装"><a href="#方式一、yum安装" class="headerlink" title="方式一、yum安装"></a>方式一、yum安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum info git</span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Available Packages</span><br><span class="line">Name        : git</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 1.8.3.1 &lt;--- 说明：当前系统是 CentOS7.x，在 6.x 上是 1.7.1</span><br><span class="line">Release     : 12.el7_4</span><br><span class="line">Size        : 4.4 M</span><br><span class="line">Repo        : updates/7/x86_64</span><br><span class="line">Summary     : Fast Version Control System</span><br><span class="line">URL         : http://git-scm.com/</span><br><span class="line">License     : GPLv2</span><br><span class="line">Description : Git is a fast, scalable, distributed revision control system with an</span><br><span class="line">            : unusually rich <span class="built_in">command</span> <span class="built_in">set</span> that provides both high-level operations</span><br><span class="line">            : and full access to internals.</span><br><span class="line">            :</span><br><span class="line">            : The git rpm installs the core tools with minimal dependencies.  To</span><br><span class="line">            : install all git packages, including tools <span class="keyword">for</span> integrating with other</span><br><span class="line">            : SCMs, install the git-all meta-package.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了安装较新版本，需要手动添加一个仓库源</span></span><br><span class="line">➜  yum install -y http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">➜  yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始安装</span></span><br><span class="line">➜  yum install -y git</span><br></pre></td></tr></table></figure>

<h3 id="方式二、源码包安装"><a href="#方式二、源码包安装" class="headerlink" title="方式二、源码包安装"></a>方式二、源码包安装</h3><blockquote>
<p>提示：请使用 root 用户操作</p>
</blockquote>
<h4 id="2-1-安装依赖包"><a href="#2-1-安装依赖包" class="headerlink" title="2.1. 安装依赖包"></a>2.1. 安装依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>

<h4 id="2-2-卸载旧的git版本（如果之前有安装rpm包）"><a href="#2-2-卸载旧的git版本（如果之前有安装rpm包）" class="headerlink" title="2.2. 卸载旧的git版本（如果之前有安装rpm包）"></a>2.2. 卸载旧的git版本（如果之前有安装rpm包）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum remove -y git</span><br></pre></td></tr></table></figure>

<h4 id="2-3-下载-amp-解压"><a href="#2-3-下载-amp-解压" class="headerlink" title="2.3. 下载&amp;解压"></a>2.3. 下载&amp;解压</h4><p>源码文件（当前最新版本 **v2.29.2 ** @ <strong>2020年12月14日</strong>）</p>
<ul>
<li>地址1：<a href="https://www.kernel.org/pub/software/scm/git/">https://www.kernel.org/pub/software/scm/git/</a></li>
<li>地址2：<a href="https://github.com/git/git/releases">https://github.com/git/git/releases</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> ~</span><br><span class="line">➜  wget -c https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.29.2.tar.gz</span><br><span class="line">➜  tar -zxvf git-2.29.2.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="2-4-编译安装"><a href="#2-4-编译安装" class="headerlink" title="2.4. 编译安装"></a>2.4. 编译安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> git-2.29.2</span><br><span class="line">➜  ./configure --prefix=/usr/<span class="built_in">local</span>/git</span><br><span class="line">➜  make &amp;&amp; make install</span><br><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class="line">➜  <span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>

<h4 id="2-5-检查git版本"><a href="#2-5-检查git版本" class="headerlink" title="2.5. 检查git版本"></a>2.5. 检查git版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  git --version</span><br><span class="line">git version 2.5.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ <strong>注意</strong>：如果安装完查看版本不是我们安装的最新版，请重新执行下面的操作</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum remove -y git</span><br><span class="line">➜  <span class="built_in">source</span> /etc/bashrc</span><br><span class="line">➜  git --versione</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://github.com/git/git/blob/master/INSTALL">https://github.com/git/git/blob/master/INSTALL</a></li>
<li><a href="http://stackoverflow.com/questions/21820715/how-to-install-latest-version-of-git-on-centos-6-x-7-x">http://stackoverflow.com/questions/21820715/how-to-install-latest-version-of-git-on-centos-6-x-7-x</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 svn 最新版本 1.10.x</title>
    <url>/post/3349016682.html</url>
    <content><![CDATA[<p>SVN 的全称是 <strong>Subversion</strong>，即版本控制系统。它曾经是最流行的一个开放源代码的版本控制系统（现在肯定是 Git）。</p>
<p>Subversion 是一个通用的系统，可用来管理任何类型的文件，其中包括程序源码。</p>
<span id="more"></span>

<h3 id="一、使用包管理器自动安装"><a href="#一、使用包管理器自动安装" class="headerlink" title="一、使用包管理器自动安装"></a>一、使用包管理器自动安装</h3><p>官网提供了常见 Linux 发行版的安装命令，此处仅以 <em>CentOS</em>、<em>Debian</em> 及 <em>Ubuntu</em> 为例进行说明，其它系统详见官网：<a href="https://subversion.apache.org/packages.html">https://subversion.apache.org/packages.html</a></p>
<blockquote>
<p>⚠️ <strong>注意</strong>：一般各发行版系统中内置的软件包都不是最新的，如果需要安装最新稳定版的 Subversion，请使用方法二中的源码安装。</p>
</blockquote>
<ul>
<li><p>CentOS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  yum install subversion</span><br><span class="line">➜  yum install mod_dav_svn</span><br></pre></td></tr></table></figure></li>
<li><p>Debian</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  apt-get install subversion</span><br><span class="line">➜  apt-get install libapache2-mod-svn</span><br></pre></td></tr></table></figure></li>
<li><p>Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  apt-get install subversion</span><br><span class="line">➜  apt-get install libapache2-svn</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、源码编译安装"><a href="#二、源码编译安装" class="headerlink" title="二、源码编译安装"></a>二、源码编译安装</h3><p>官网源码下载页：<a href="https://subversion.apache.org/download.cgi">https://subversion.apache.org/download.cgi</a></p>
<table>
<thead>
<tr>
<th>最新稳定版（推荐）</th>
<th>上一稳定版</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.10.2.tar.bz2">subversion-1.10.2.tar.bz2</a></td>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.9.9.tar.bz2">subversion-1.9.9.tar.bz2</a></td>
</tr>
<tr>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.10.2.tar.gz">subversion-1.10.2.tar.gz</a></td>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.9.9.tar.gz">subversion-1.9.9.tar.gz</a></td>
</tr>
<tr>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.10.2.zip">subversion-1.10.2.zip</a></td>
<td><a href="http://mirrors.shu.edu.cn/apache/subversion/subversion-1.9.9.zip">subversion-1.9.9.zip</a></td>
</tr>
</tbody></table>
<h4 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h4><p>本文安装的最新 subversion-1.10.x 版本，需要安装依赖 <strong>apr</strong> 和 <strong>apr-uti</strong>，官网下载地址在这里： <a href="http://apr.apache.org/download.cgi">http://apr.apache.org/download.cgi</a>。</p>
<p>低于当前最新版本的源码，可能还需要下面的基础依赖，请根据安装过程是否报错自行选择：</p>
<ul>
<li><code>yum install -y zlib zlib-devel</code></li>
<li><code>yum install -y openssl openssl-devel</code></li>
<li><code>yum install -y expat-devel</code></li>
<li><code>yum install -y bzip2</code> 解压 ***.bz2** 文件时需要用到。</li>
<li><a href="https://www.sqlite.org/2018/sqlite-autoconf-3250100.tar.gz">sqlite-autoconf-3250100.tar.gz</a> 在高版本的 Subversion 源码包中已内置。</li>
</ul>
<p>另外，对于 <strong>v1.7</strong> 以下的版本，官方有直接提供依赖包的安装下载，比如：<a href="http://subversion.tigris.org/downloads/subversion-deps-1.6.12.tar.gz">subversion-deps-1.6.12.tar.gz</a>、 <a href="http://subversion.tigris.org/downloads/subversion-1.6.12.tar.gz">subversion-1.6.12.tar.gz</a>，直接进入 <code>subversion-deps*</code> 目录下安装所需依赖即可。</p>
<ul>
<li><p>安装 <strong>apr</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  wget -c http://mirrors.shu.edu.cn/apache//apr/apr-1.6.5.tar.gz</span><br><span class="line">➜  tar  -zxvf apr-1.6.5.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> apr-1.6.5</span><br><span class="line">➜  ./configure --prefix=/usr/<span class="built_in">local</span>/apr</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br></pre></td></tr></table></figure></li>
<li><p>安装 <strong>apr-util</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  wget -c http://mirrors.shu.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span><br><span class="line">➜  tar  -zxvf apr-util-1.6.1.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> apr-util-1.6.1</span><br><span class="line">➜  ./configure --prefix=/usr/<span class="built_in">local</span>/apr-util --with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-2-安装-Subversion"><a href="#2-2-安装-Subversion" class="headerlink" title="2.2. 安装 Subversion"></a>2.2. 安装 Subversion</h4><p>下载、编译、安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  wget -c http://mirrors.shu.edu.cn/apache/subversion/subversion-1.10.2.tar.gz</span><br><span class="line">➜  tar -zxvf subversion-1.10.2.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> subversion-1.10.2</span><br><span class="line">➜  ./configure --prefix=/usr/<span class="built_in">local</span>/subversion --with-apr=/usr/<span class="built_in">local</span>/apr --with-apr-util=/usr/<span class="built_in">local</span>/apr-util --with-lz4=internal --with-utf8proc=internal</span><br><span class="line">➜  make</span><br><span class="line">➜  make install</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><p><code>--with-lz4=internal</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configure: error: Subversion requires LZ4 &gt;= r129, or use --with-lz4=internal --with-serf=/usr/local/serf</span><br></pre></td></tr></table></figure></li>
<li><p><code>--with-utf8proc=internal</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configure: error: Subversion requires UTF8PROC</span><br></pre></td></tr></table></figure></li>
<li><p><code>--with-serf=/usr/local/serf</code> 开启 HTTP 和 HTTPS 访问支持</p>
<p>可能报错：<code>configure: error: Serf was explicitly enabled but an appropriate version was not found.</code></p>
<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 scons 编译、安装</span></span><br><span class="line">➜  wget https://svwh.dl.sourceforge.net/project/scons/scons/2.3.3/scons-2.3.3.tar.gz</span><br><span class="line">➜  tar xvf scons-2.3.3.tar.gz</span><br><span class="line">➜  <span class="built_in">cd</span> scons-2.3.3</span><br><span class="line">➜  python setup.py install</span><br><span class="line"></span><br><span class="line">➜  wget https://archive.apache.org/dist/serf/serf-1.3.9.tar.bz2</span><br><span class="line">➜  tar xjvf serf-1.3.9.tar.bz2</span><br><span class="line">➜  scons PREFIX=/usr/<span class="built_in">local</span>/serf APR=/usr/<span class="built_in">local</span>/apr APU=/usr/<span class="built_in">local</span>/apr-util</span><br><span class="line">➜  scons install</span><br><span class="line">➜  scons -c</span><br></pre></td></tr></table></figure>

<p>报错：<code>svn: error while loading shared libraries: libserf-1.so.1: cannot open shared object file: No such file or directory</code></p>
<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/subversion/lib</span><br><span class="line">➜  cp /usr/<span class="built_in">local</span>/serf/lib/libserf-1.so.1 ./</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-添加环境变量"><a href="#2-3-添加环境变量" class="headerlink" title="2.3. 添加环境变量"></a>2.3. 添加环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="string">&quot;export PATH=/usr/local/subversion/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">➜  <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="2-4-验证安装"><a href="#2-4-验证安装" class="headerlink" title="2.4. 验证安装"></a>2.4. 验证安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn --version</span><br><span class="line">➜  svnserve --version</span><br></pre></td></tr></table></figure>

<p>当遇到下面的问题时：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  svn --version</span><br><span class="line">svn: warning: cannot <span class="built_in">set</span> LC_CTYPE locale</span><br><span class="line">svn: warning: environment variable LC_CTYPE is UTF-8</span><br><span class="line">svn: warning: please check that your locale name is correct</span><br></pre></td></tr></table></figure>

<p>修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">echo</span> <span class="string">&#x27;export LC_ALL=C&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">➜  <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>版本管理</tag>
        <tag>svn</tag>
        <tag>Subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL int(M) 中 M 的作用</title>
    <url>/post/1100143026.html</url>
    <content><![CDATA[<p>在数据库设计时，我们经常会这样设置 <strong>int(M)</strong></p>
<p>⚠️ <strong>误区</strong>：<em>大部分人把这个 M 当做能够存储多少位的数据，其实不然，这个M表示的是“显示宽度”。</em></p>
<p><strong>使用场景</strong>：在前端的要显示一个 <code>integer</code> 类型的数据，数据库里设置对应的数据类型 <code>int(4)</code>，但是写入的数据不足 <code>4</code> 位时，那么就会在左侧填充空格（如果开启 <code>zerofill</code>，则填充 <code>0</code>），以保证够 <code>4</code> 位，那么在前端显示的时候就是对应 <code>4</code> 个宽度的要求了。</p>
<span id="more"></span>

<p><img data-src="https://static.sqiang.net/image%2Fpost%2Fmysql_int_m.png"></p>
<blockquote>
<p>官方强调，用不用这个 <code>M</code> 主要取决于你程序的需要 （ <code>Whether it is used or not is up to the application</code>），因为这个“<strong>显示宽度</strong>”并不限制可以存储在列中的值的范围。</p>
</blockquote>
<p>以上是根据上面官方截图的理解，详见：<a href="http://dev.mysql.com/doc/refman/5.6/en/numeric-type-attributes.html">http://dev.mysql.com/doc/refman/5.6/en/numeric-type-attributes.html</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 导入数据时查看实时进度</title>
    <url>/post/2437365066.html</url>
    <content><![CDATA[<h3 id="1-安装-pv-工具"><a href="#1-安装-pv-工具" class="headerlink" title="1. 安装 pv 工具"></a>1. 安装 pv 工具</h3><p>pv 全名为 Pipe Viewer，利用它我们可以查看到命令执行的进度，更多功能详见其参数 <code>pv --help</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">➜  yum install pv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">➜  sudo apt-get install pv</span><br></pre></td></tr></table></figure>

<h3 id="2-导出"><a href="#2-导出" class="headerlink" title="2. 导出"></a>2. 导出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  pv -t -p back_20181109_020001.sql | mysql -uroot -p123123 -D dbname1</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">0:02:28 [======================================================================================================================&gt;] 100%</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>pv</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中索引的使用</title>
    <url>/post/3209749235.html</url>
    <content><![CDATA[<h3 id="1-关于索引"><a href="#1-关于索引" class="headerlink" title="1. 关于索引"></a>1. 关于索引</h3><blockquote>
<p>在 MySQL 中，索引在存储引擎层实现</p>
</blockquote>
<h4 id="1-1-使用索引的好处"><a href="#1-1-使用索引的好处" class="headerlink" title="1.1. 使用索引的好处"></a>1.1. 使用索引的好处</h4><ul>
<li>大大减少存储引擎需要扫描的数据量</li>
<li>帮助我们进行排序，以避免使用临时表</li>
<li>可以把随机 I/O 改为顺序 I/O</li>
</ul>
<h4 id="1-2-建立原则"><a href="#1-2-建立原则" class="headerlink" title="1.2. 建立原则"></a>1.2. 建立原则</h4><ul>
<li><strong>适量，不是越多越好！！！</strong></li>
<li>过多索引的影响<ul>
<li>增加写操作的成本</li>
<li>增加查询优化器的选择时间</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="2-索引方式"><a href="#2-索引方式" class="headerlink" title="2. 索引方式"></a>2. 索引方式</h3><h4 id="2-1-BTREE"><a href="#2-1-BTREE" class="headerlink" title="2.1. BTREE"></a>2.1. BTREE</h4><ul>
<li><p>特点</p>
<ul>
<li>以 <code>B+</code> 的结构存储数据</li>
<li>加快数据的查询速度</li>
<li>更适合进行范围查找</li>
</ul>
</li>
<li><p>适用场景</p>
<ul>
<li>全值匹配的查询</li>
<li>匹配最左前缀的查询</li>
<li>匹配列前缀查询</li>
<li>匹配范围值的查询</li>
<li>精确匹配左前列并范围匹配另外一列</li>
<li>只访问索引的查询</li>
</ul>
</li>
<li><p>限制</p>
<ul>
<li>如果不是按照索引最左列开始查找，则无法使用索引</li>
<li>使用索引时不能跳过索引中的列</li>
<li><code>NOT IN</code> 和 <code>&lt;&gt;</code> 操作无法使用索引</li>
<li>如果查询中有某个列的范围查询，则右边所有列都无法使用索引</li>
</ul>
</li>
</ul>
<h4 id="2-2-HASH"><a href="#2-2-HASH" class="headerlink" title="2.2. HASH"></a>2.2. HASH</h4><ul>
<li><p>特点</p>
<ul>
<li>基于 Hash 表实现</li>
<li>只有查询调价精确匹配 Hash 索引中的所有列时，才能够使用到 Hash 索引</li>
<li>对于 Hash 索引中的所有列，存储引擎都会为每一行计算一个 Hash 码，Hash 索引中存储的就是 Hash 码。</li>
</ul>
</li>
<li><p>适用场景</p>
</li>
<li><p>限制</p>
<ul>
<li>必须进行二次查找：先 Hash 码定位到行，再找到具体数据</li>
<li>无法用于排序</li>
<li>不支持部分索引查找、也不支持范围查找</li>
<li>Hash 码的计算可能存在 Hash 冲突</li>
</ul>
</li>
</ul>
<h4 id="3-建议"><a href="#3-建议" class="headerlink" title="3. 建议"></a>3. 建议</h4><ul>
<li>索引列上不能使用表达式或函数</li>
<li>建立联合索引时如何选择索引列的顺序<ul>
<li>经常被使用到的列优先</li>
<li>选择性高的列优先</li>
<li>宽度小的列优先</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之数据库结构设计</title>
    <url>/post/2048329622.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍了在数据库结构设计过程中需要考虑的一些问题，来源于以往工作、项目经历以及网络资料等，如果有不准确的地方，欢迎指正交流。</p>
</blockquote>
<p>在数据库结构的设计过程中，务必注意以下两点：</p>
<ul>
<li>减少数据冗余，节约数据库存储空间；</li>
<li>尽量避免在数据维护过程中出现更新、插入、删除异常。</li>
</ul>
<p>一般我们按照如下步骤开始：</p>
<ol>
<li><strong>需求分析</strong>：全面了解产品设计的存储需求，保证数据的安全性和完整性</li>
<li><strong>逻辑设计</strong>：设计数据的逻辑存储结构，处理数据实体之间的逻辑关系，解决数据冗余和数据维护异常</li>
<li><strong>物理设计</strong>：根据具体所使用数据库的特点进行表结构设计</li>
<li><strong>维护优化</strong>：根据实际情况，对索引、存储结构等进行优化</li>
</ol>
<p>其中 1、2 是确立大方向；3 是对 1、2 的具体实施（本文会介绍一些注意事项和建议，详见下文）；4 是后期的迭代优化。</p>
<span id="more"></span>

<h3 id="1-如何进行物理设计"><a href="#1-如何进行物理设计" class="headerlink" title="1. 如何进行物理设计"></a>1. 如何进行物理设计</h3><h4 id="1-1-定义数据库、表、字段的命名规范"><a href="#1-1-定义数据库、表、字段的命名规范" class="headerlink" title="1.1. 定义数据库、表、字段的命名规范"></a>1.1. 定义数据库、表、字段的命名规范</h4><ul>
<li>可读性</li>
<li>表意性</li>
<li>长名</li>
</ul>
<h4 id="1-2-选择合适的存储引擎"><a href="#1-2-选择合适的存储引擎" class="headerlink" title="1.2. 选择合适的存储引擎"></a>1.2. 选择合适的存储引擎</h4><h5 id="1-2-0-如何选择"><a href="#1-2-0-如何选择" class="headerlink" title="1.2.0. 如何选择"></a>1.2.0. 如何选择</h5><ol>
<li>首选 <code>InnoDB</code>，适用于大部分场景</li>
<li>参考因素：事务、备份、崩溃恢复、各存储引擎的专有特性（详见下文）</li>
<li>注意：<strong>尽量不要混合使用多种存储引擎</strong></li>
</ol>
<h5 id="1-2-1-MyISAM"><a href="#1-2-1-MyISAM" class="headerlink" title="1.2.1. MyISAM"></a>1.2.1. MyISAM</h5><p><code>v5.5 之前默认</code></p>
<p>文件组成</p>
<ul>
<li><code>.frm</code> 表结构</li>
<li><code>.MYD</code> 数据</li>
<li><code>.MYI</code> 索引</li>
</ul>
<p>特性</p>
<ul>
<li>表级锁</li>
<li>基本的表损坏修复，非事务性，会造成数据丢失</li>
<li>支持「全文索引」</li>
<li>支持数据压缩（<strong>压缩之后只支持读操作</strong>）</li>
</ul>
<p>限制</p>
<ul>
<li>小于 v5.0 版本时，单表默认大小 <code>4G</code></li>
<li>大于 v5.0 版本，单表默认 <code>256TB</code></li>
</ul>
<p>适用场景</p>
<ul>
<li>非事务型应用</li>
<li>只读类应用（如：数据报表）</li>
<li>空间类应用（如：GPS）</li>
</ul>
<h5 id="1-2-2-InnoDB"><a href="#1-2-2-InnoDB" class="headerlink" title="1.2.2. InnoDB"></a>1.2.2. InnoDB</h5><p><code>v5.58 之后默认</code></p>
<p>使用表空间进行数据存储，通过配置参数 <code>innodb_file_per_table</code></p>
<ul>
<li><p><code>ON</code> 独立表空间（<code>v5.6</code> 之后默认）</p>
<ul>
<li>tablename.ibd 数据</li>
<li>tablename.frm 表结构</li>
</ul>
</li>
<li><p><code>OFF</code> 系统表空间</p>
<ul>
<li>ibdata[1 ~ n]</li>
</ul>
</li>
</ul>
<p>特性</p>
<ul>
<li>事务性存储引擎</li>
<li>完全支持事务的 ACID 特性</li>
<li>日志<ul>
<li><code>Redo Log</code> 已提交的事务</li>
<li><code>Undo Log</code> 未提交的事务</li>
</ul>
</li>
<li>支持行级锁<ul>
<li>可以最大程度支持并发</li>
<li>由存储引擎层实现</li>
<li>关于锁<ul>
<li>主要作用是管理共享资源的并发访问</li>
<li>用于实现事务的隔离性</li>
<li>常用类型<ul>
<li>共享锁（读锁）</li>
<li>独占锁（写锁）</li>
</ul>
</li>
<li>常用锁粒度（策略）<ul>
<li>表级</li>
<li>行级</li>
</ul>
</li>
<li>其它<ul>
<li>阻塞</li>
<li>死锁</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>状态检查<ul>
<li><code>show engine innodb status</code></li>
</ul>
</li>
</ul>
<h5 id="1-2-3-CSV"><a href="#1-2-3-CSV" class="headerlink" title="1.2.3. CSV"></a>1.2.3. CSV</h5><p>文件组成</p>
<ul>
<li><code>.CSV</code> 表内容</li>
<li><code>.CSM</code> 表的元数据，如表状态、数据量</li>
<li><code>.frm</code> 表结构</li>
</ul>
<p>特性</p>
<ul>
<li>数据以文本方式存储在文件中</li>
<li>所有列不能为 NULL</li>
<li>不支持索引（不适合大表、在线处理）</li>
<li>对数据文件直接编辑</li>
</ul>
<p>适用场景</p>
<ul>
<li>数据交互的中间表</li>
</ul>
<h5 id="1-2-4-ARCHIVE"><a href="#1-2-4-ARCHIVE" class="headerlink" title="1.2.4. ARCHIVE"></a>1.2.4. ARCHIVE</h5><p>以 <code>zlib</code> 对表数据进行压缩，磁盘 I/O 更少</p>
<p>文件组成</p>
<ul>
<li><code>.ARZ</code> 数据</li>
<li><code>.frm</code> 表结构</li>
</ul>
<p>特性</p>
<ul>
<li>只支持 insert 和 select 操作</li>
<li>只支持在自增 ID 列上添加索引</li>
</ul>
<p>适用场景</p>
<ul>
<li>日志和数据采集类</li>
</ul>
<h5 id="1-2-5-MEMORY"><a href="#1-2-5-MEMORY" class="headerlink" title="1.2.5. MEMORY"></a>1.2.5. MEMORY</h5><p>也被称为 <code>HEAP</code> 存储引擎，所有数据保存在内存中</p>
<p>文件组成</p>
<ul>
<li>.frm 表结构</li>
</ul>
<p>特性</p>
<ul>
<li>支持的索引类型<ul>
<li>HASH（默认，适用于：等值查找）</li>
<li>BTree（适用于：范围查找）</li>
</ul>
</li>
<li>所有字段都是固定长度</li>
<li>不支持 <code>BLOG</code> 和 <code>TEXT</code> 等大字段</li>
<li>使用表级锁</li>
<li>单表大小由参数 <code>max_heap_table_size</code> 决定（默认 16M）</li>
</ul>
<p>适用场景</p>
<ul>
<li>查找或映射类，如：邮编和地区对应</li>
<li>保存数据分析中产生的中间表</li>
<li>缓存周期性聚合数据的结果表</li>
</ul>
<p>⚠️ <strong>注意</strong>：</p>
<ul>
<li><strong>数据易丢失，所以要求数据是可再生的</strong>。</li>
</ul>
<h5 id="1-2-6-FEDERATED-？"><a href="#1-2-6-FEDERATED-？" class="headerlink" title="1.2.6. FEDERATED ？"></a>1.2.6. FEDERATED ？</h5><p>默认禁止，启用需要在启动时追加 federated 参数（<code>federated=1</code>）</p>
<p>特性</p>
<ul>
<li>提供了访问远程 MySQL 服务器上表的方法</li>
<li>本地不存储数据，数据全部存放在远程服务器上</li>
<li>本地需要保存表结构和远程服务器的连接信息</li>
</ul>
<p>适用场景</p>
<ul>
<li>偶尔的统计分析及手工查询</li>
</ul>
<h4 id="1-3-为表中字段选择合适的数据类型"><a href="#1-3-为表中字段选择合适的数据类型" class="headerlink" title="1.3. 为表中字段选择合适的数据类型"></a>1.3. 为表中字段选择合适的数据类型</h4><h5 id="1-3-1-基本原则"><a href="#1-3-1-基本原则" class="headerlink" title="1.3.1. 基本原则"></a>1.3.1. 基本原则</h5><ul>
<li>当一个列可以选择多种数据类型时，应该<strong>优先选择数字类型</strong>，其次是日期或二进制类型，最后是字符类型。</li>
<li>对于相同级别的数据类型，应该<strong>优先选择占用空间小的</strong>。</li>
</ul>
<h5 id="1-3-2-整数类型"><a href="#1-3-2-整数类型" class="headerlink" title="1.3.2. 整数类型"></a>1.3.2. 整数类型</h5><table>
<thead>
<tr>
<th>列类型</th>
<th>存储空间</th>
<th>取值范围（SIGNED）</th>
<th>取值范围（UNSIGNED）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>tinyint</strong></td>
<td>1 个字节</td>
<td><code>-128</code> ~ <code>127</code></td>
<td><code>0</code> ~ <code>255</code></td>
</tr>
<tr>
<td><strong>smallint</strong></td>
<td>2 个字节</td>
<td><code>-3276</code> ~ <code>3276</code></td>
<td><code>0</code> ~ <code>65535</code></td>
</tr>
<tr>
<td><strong>mediumint</strong></td>
<td>3 个字节</td>
<td><code>-8388608</code> ~ <code>8388607</code></td>
<td><code>0</code> ~ <code>16777215</code></td>
</tr>
<tr>
<td><strong>int</strong></td>
<td>4 个字节</td>
<td><code>-2147483648</code> ~ <code>2147483647</code></td>
<td><code>0</code> ~ <code>4294967295</code></td>
</tr>
<tr>
<td><strong>bigint</strong></td>
<td>8 个字节</td>
<td><code>-9223372036854775808</code> ~ <code>9223372036854775807</code></td>
<td><code>0    </code> ~ <code>18446744073709551615</code></td>
</tr>
</tbody></table>
<p>⚠️ <strong>注意</strong>：</p>
<ul>
<li>整型默认 <code>SIGNED</code> 有符号</li>
<li>后面括号中的数字，表示的是显示宽度，不表示长度，参见这篇文章：<a href="https://blog.sqiang.net/post/1100143026.html">MySQL int(M) 中 M 的作用</a></li>
</ul>
<h5 id="1-3-3-实数类型"><a href="#1-3-3-实数类型" class="headerlink" title="1.3.3. 实数类型"></a>1.3.3. 实数类型</h5><table>
<thead>
<tr>
<th>列类型</th>
<th>存储空间</th>
<th>是否精确类型</th>
</tr>
</thead>
<tbody><tr>
<td><strong>float</strong></td>
<td>4 个字节</td>
<td>否</td>
</tr>
<tr>
<td><strong>double</strong></td>
<td>8 个字节</td>
<td>否</td>
</tr>
<tr>
<td><strong>decimal</strong></td>
<td>每 4 个字节存 9 个数字，小数点占一个字节</td>
<td>是</td>
</tr>
</tbody></table>
<h5 id="1-3-4-字符串类型"><a href="#1-3-4-字符串类型" class="headerlink" title="1.3.4. 字符串类型"></a>1.3.4. 字符串类型</h5><ul>
<li><strong>varchar</strong><ul>
<li><code>特点</code><ul>
<li>存储<strong>变长</strong>字符串，只占用必要的存储空间</li>
<li>列的最大长度小于 255，则只占用一个字节用于记录字符串长度。</li>
<li>列的最大长度大于 255，则要占用两个字节用于记录字符串长度。</li>
</ul>
</li>
<li><code>长度（宽度）问题</code><ul>
<li>使用最小的符合需求的长度（根据实际情况，保留一定的空间）</li>
</ul>
</li>
<li><code>适用场景</code><ul>
<li>列的最大长度比平均长度大很多</li>
<li>列很少被更新</li>
<li>使用了多字节的字符集存储字符串</li>
</ul>
</li>
</ul>
</li>
<li><strong>char</strong><ul>
<li><code>特点</code><ul>
<li><strong>定长</strong></li>
<li>末尾的空格会被删除</li>
<li>最大宽度 255</li>
</ul>
</li>
<li><code>适用场景</code><ul>
<li>适合存储长度近似的值</li>
<li>短小的字符串</li>
<li>存储经常被更新的字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="1-3-5-日期类型"><a href="#1-3-5-日期类型" class="headerlink" title="1.3.5. 日期类型"></a>1.3.5. 日期类型</h5><ul>
<li><p><strong>datetime</strong></p>
<ul>
<li>精度<ul>
<li><code>秒</code> v5.6 之前</li>
<li><code>微妙</code> v5.6 之后 datime(6)</li>
</ul>
</li>
<li>与时区无关</li>
<li>占用 8 个字节存储长度</li>
<li>时间范围 <code>1000-01-01 00:00:00 到 9999-12-31 23:59:59</code></li>
</ul>
</li>
<li><p><strong>timestamp</strong></p>
<ul>
<li>只占用 4 个字节</li>
<li>时间范围 <code>1970-01-01 到 2038-01-19</code></li>
<li><strong>依赖于指定的时区</strong></li>
<li>在行的数据被修改时，可以自动修改 TIMESTAMP 列的值。</li>
</ul>
</li>
<li><p>MySQL v5.6 新增了 <code>date</code>（只需要 3 个字节）、<code>time</code> ，可根据需要了解。</p>
</li>
</ul>
<p>⚠️ <strong>注意</strong>：</p>
<ul>
<li>不要使用字符串类型来存储日期数据</li>
<li>使用 <code>int</code> 存储日期时间不如直接使用 <code>timestamp</code> 类型</li>
</ul>
<h4 id="1-4-建立数据库结构"><a href="#1-4-建立数据库结构" class="headerlink" title="1.4. 建立数据库结构"></a>1.4. 建立数据库结构</h4><p>根据前 3 点给出的建议和注意事项，结合具体业务，依次建立每一个数据表。</p>
<h3 id="2-关于范式化"><a href="#2-关于范式化" class="headerlink" title="2. 关于范式化"></a>2. 关于范式化</h3><h4 id="2-1-什么是三范式"><a href="#2-1-什么是三范式" class="headerlink" title="2.1. 什么是三范式"></a>2.1. 什么是三范式</h4><ul>
<li><strong>第一范式</strong><ul>
<li>表中所有字段都只具有单一属性</li>
<li>单一属性的列由基本的数据类型所构成</li>
<li>设计出来的表都是简单的二维表</li>
</ul>
</li>
<li><strong>第二范式</strong><ul>
<li>以「第一范式」为基础</li>
<li>一个业务表中只能有一个业务主键</li>
</ul>
</li>
<li><strong>第三范式</strong><ul>
<li>以「第二范式」为基础</li>
<li>每一个非主属性既不部分依赖也不传递依赖于业务主键</li>
</ul>
</li>
</ul>
<h4 id="2-2-什么是反范式化"><a href="#2-2-什么是反范式化" class="headerlink" title="2.2. 什么是反范式化"></a>2.2. 什么是反范式化</h4><p>以空间换时间，进行适当的冗余，以提高查询效率</p>
<h4 id="2-3-如何选择"><a href="#2-3-如何选择" class="headerlink" title="2.3. 如何选择"></a>2.3. 如何选择</h4><p>对比优缺点如下，建议<strong>根据业务需要合理的结合二者使用</strong> 👍。</p>
<p><strong>范式化</strong></p>
<ul>
<li><code>优点</code><ul>
<li>可以尽量的减少数据冗余</li>
<li>更新操作比「反范式化」更快</li>
<li>数据表通常比「反范式化」的更小</li>
</ul>
</li>
<li><code>缺点</code><ul>
<li>查询需要关联多个表</li>
<li>索引优化困难</li>
</ul>
</li>
</ul>
<p><strong>反范式化</strong></p>
<ul>
<li><code>优点</code><ul>
<li>减少表的关联</li>
<li>更好的进行索引优化</li>
</ul>
</li>
<li><code>缺点</code><ul>
<li>存在数据冗余及数据维护异常</li>
<li>对数据对修改需要更多成本</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>数据库结构</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL如何查询最新审核过的一条数据</title>
    <url>/post/1623733608.html</url>
    <content><![CDATA[<blockquote>
<p>本文只是项目过程中暂时能想到的一种方法，如果你有其它实现方式，欢迎留言与我交流。</p>
</blockquote>
<p><strong>原始数据</strong></p>
<table>
<thead>
<tr>
<th>id（主键）</th>
<th>organization_id</th>
<th>audit_time（审核时间）</th>
</tr>
</thead>
<tbody><tr>
<td>2orejelw5td3bwfkv</td>
<td>2oo2v3mqwrd832efh</td>
<td>2021-06-02 15:23:37</td>
</tr>
<tr>
<td>2or7zo75ygc7fi2l7</td>
<td>2oo2v3mqwrd832efh</td>
<td>2021-07-02 15:23:37</td>
</tr>
<tr>
<td>2or81tr5evpean60d</td>
<td>202106171149548es5ntrhd</td>
<td>2021-06-19 11:12:16</td>
</tr>
<tr>
<td>2or81tt1m5rnw1h0o</td>
<td>202106171149548es5ntrhd</td>
<td>2021-05-19 11:57:00</td>
</tr>
<tr>
<td>2or96z2524ac1zw0v</td>
<td>202106171149548es5ntrhd</td>
<td>2021-07-09 13:31:00</td>
</tr>
</tbody></table>
<p><strong>目标描述</strong>：针对每个 organization_id， 根据审核时间，获取最新审核的一条数据</p>
<p><strong>预期结果</strong>：</p>
<table>
<thead>
<tr>
<th>id（主键）</th>
<th>organization_id</th>
<th>audit_time（审核时间）</th>
</tr>
</thead>
<tbody><tr>
<td>2or7zo75ygc7fi2l7</td>
<td>2oo2v3mqwrd832efh</td>
<td>2021-07-02 15:23:37</td>
</tr>
<tr>
<td>2or96z2524ac1zw0v</td>
<td>202106171149548es5ntrhd</td>
<td>2021-07-09 13:31:00</td>
</tr>
</tbody></table>
<p><strong>完整 SQL 如下:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	SUBSTRING_INDEX(GROUP_CONCAT(id <span class="keyword">ORDER</span> <span class="keyword">BY</span> audit_time),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>) <span class="keyword">AS</span> id,</span><br><span class="line">	organization_id</span><br><span class="line"><span class="keyword">FROM</span> organization_auth_request</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> organization_id</span><br></pre></td></tr></table></figure>

<p><strong>关键点说明:</strong></p>
<ul>
<li><code>GROUP_CONCAT(id ORDER BY audit_time)</code> 分组后拼接的时候，可以指定排序字段和排序方式，以确保能够按照指定顺序拼接</li>
<li><code>SUBSTRING_INDEX(&#39;待截取的字符串&#39;,&#39;,&#39;,-1)</code><ul>
<li>第一个参数是待截取的字符串；</li>
<li>第二个参数是截取时以什么字符分组，比如这里是以 <code>,</code> 分组；</li>
<li>第三个参数是截取方向和个数，<code>-1</code> 表示从末尾截取一组字符（正数从开头开始截取；负数从末尾开始截取）。</li>
</ul>
</li>
</ul>
<p>关于这两个函数的更多使用方式，参见官方文档或搜索引擎。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语法速查1：基础命令篇</title>
    <url>/post/2913088232.html</url>
    <content><![CDATA[<h3 id="1-1-关于-SQL"><a href="#1-1-关于-SQL" class="headerlink" title="1.1. 关于 SQL"></a>1.1. 关于 SQL</h3><p>SQL 是 Structure Query Language（结构化查询语言）的缩写，是关系型数据库的基本语言，由 IBM 在 20 世纪 70 年代开发出来，作为 IBM 关系数据库原型 System R 的原型关系语言，实现了关系数据库中的信息检索。</p>
<p>20 世纪 80 年代初，美国国家标准局（ANSI）开始着手制作 SQL 标准，并于 1986 年完成，被叫做 SQL-86。</p>
<p>SQL 标准几经修改，日趋完善，大多数关系型数据库系统都支持，而 <strong>(My)SQL</strong> 是在标准 SQL 的基础上进行了扩展。</p>
<h3 id="1-2-SQL-分类"><a href="#1-2-SQL-分类" class="headerlink" title="1.2. SQL 分类"></a>1.2. SQL 分类</h3><ul>
<li>DDL（Data Definition Language）：数据定义语句<ul>
<li>主要用于操作<strong>数据库对象</strong>；</li>
<li>常用关键字 create、drop、alter等；</li>
</ul>
</li>
<li>DML（Data Manipulation Language）：数据操作语句<ul>
<li>主要用于操作<strong>数据库记录</strong>;</li>
<li>常用关键字 insert、delete、update、select等；</li>
</ul>
</li>
<li>DCL（Data Control Language）：数据控制语句<ul>
<li>主要用于控制数据的<strong>访问权限</strong>；</li>
<li>常用关键字 grant、revoke等。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="1-3-DDL"><a href="#1-3-DDL" class="headerlink" title="1.3. DDL"></a>1.3. DDL</h3><h4 id="1-3-1-创建数据库"><a href="#1-3-1-创建数据库" class="headerlink" title="1.3.1. 创建数据库"></a>1.3.1. 创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-删除数据库"><a href="#1-3-2-删除数据库" class="headerlink" title="1.3.2. 删除数据库"></a>1.3.2. 删除数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-创建表"><a href="#1-3-3-创建表" class="headerlink" title="1.3.3. 创建表"></a>1.3.3. 创建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">    field1_name field1_type [field1_constraints],</span><br><span class="line">    field2_name field2_type [field2_constraints],</span><br><span class="line">    field3_name field3_type [field3_constraints],</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">PRIMARY</span> KEY ( field1_name ),]</span><br><span class="line">    [INDEX `idx_field1_name`(`field1_name`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;&#x27;</span>,]</span><br><span class="line">    ...</span><br><span class="line">) [table_constraints];</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>field1_name 字段名，建议以下划线分隔单词，如 <code>update_at</code>。</li>
<li>field1_type 字段类型<ul>
<li>int、char、varchar、float、decimal、datatime等。</li>
<li>数值型的字段后跟括号，用于设置字段的显示宽度，如 <code>int(11)</code>。<ul>
<li>如果所插入数值的位数小于指定的宽度时会用空格填充；若同时使用 <code>zerofill</code> 约束，则会以 <strong>0</strong> 来填充。</li>
<li><strong>注意：显示宽度只用于显示，并不能限制取值范围和占用空间，每种数据类型的实际取值范围决定数据能否最终插入数据库</strong>。</li>
<li>如果插入的值超过字段的实际取值范围，则提示：<code>1264 - Out of range value for column xxxx</code></li>
</ul>
</li>
<li>字符型的字段后跟括号，用于设置可存放值的范围，如：<code>varcahr(5)</code><ul>
<li>严格模式下，如果插入 6 位字符串，则提示：<code>406 - Data too long for column xxxx</code>。</li>
<li>非严格模式下，如果插入 6 位字符串，则会进行截取后成功插入数据库，并且显示一个 warning。</li>
</ul>
</li>
</ul>
</li>
<li>field1_constraints 字段约束条件<ul>
<li><code>NOT NULL</code> 不允许为空，默认允许为空。</li>
<li><code>AUTO_INCREMENT</code> 设置为自增列，在 MySQL 中无论 <strong>InnoDB</strong> 引擎还是 <strong>MyISAM</strong> 引擎的表，只能有一个自增列，并且自增列一定是索引列，无论是二级索引还是主键索引。</li>
<li><code>DEFAULT</code> 默认值，默认 NULL。</li>
<li><code>COMMENT &#39;注释信息&#39;</code> 字段注释</li>
<li><code>unsigned</code> 数值型字段无符号，默认有符合。</li>
<li><code>zerofill</code> 当所插入字段值的长度没有达到在<strong>字段类型</strong>中设置的长度时，用 0 来补全。</li>
<li><code>CHARACTER SET utf8mb4</code> 设置字段的字符集。</li>
<li><code>COLLATE utf8mb4_bin</code></li>
</ul>
</li>
<li>table_constraints 表约束条件<ul>
<li><code>ENGINE=InnoDB</code> 设置表的存储引擎，默认 <strong>InnoDB</strong>，MySQL5.x 以下默认 <strong>MyISAM</strong>。<ul>
<li><strong>MyISAM</strong> 支持全文本搜索</li>
<li><strong>InnoDB</strong> 支持事务处理</li>
<li><strong>MEMORY</strong> 类似MyISAM，但数据存储在内存中，速度很快（特别适合临时表）。</li>
</ul>
</li>
<li><code>DEFAULT CHARSET=utf8</code> 设置默认字符集</li>
<li><code>AUTO_INCREMENT=10</code> 设置自增列的开始位置，查看表中自增字段的下一个值，使用 <code>SHOW TABLE STATUS LIKE &#39;table_name&#39;;</code> 获取字段 <strong>Auto_increment</strong> 的值。</li>
<li><code>COMMENT &#39;注释信息&#39;</code> 表的注释信息</li>
</ul>
</li>
</ul>
<p>查看表的定义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name \G;</span><br></pre></td></tr></table></figure>


<h4 id="1-3-4-删除表"><a href="#1-3-4-删除表" class="headerlink" title="1.3.4. 删除表"></a>1.3.4. 删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除多张表，并且删除之前先判断是否存在</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> table1_name,table2_name,.....;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-5-修改表"><a href="#1-3-5-修改表" class="headerlink" title="1.3.5. 修改表"></a>1.3.5. 修改表</h4><blockquote>
<blockquote>
<p><strong>注意</strong> ⚠️：</p>
</blockquote>
<ol>
<li><p>关键字 <code>CHANGE</code> 和 <code>FIRST</code> | <code>AFTER COLUMN</code> 属于 MySQL 在标准 SQL 上的扩展，并不一定适用于其它数据库。</p>
</li>
<li><p><strong>field_definition</strong> 至少包含<strong>字段名</strong>和<strong>字段类型</strong>。</p>
</li>
</ol>
</blockquote>
<ul>
<li><p>修改表类型</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY [<span class="keyword">COLUMN</span>] field_definition [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER field_name];</span><br></pre></td></tr></table></figure></li>
<li><p>增加表字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [COLUMNM] field_definition [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER field_name];</span><br></pre></td></tr></table></figure></li>
<li><p>删除表字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] field_name;</span><br></pre></td></tr></table></figure></li>
<li><p>修改字段名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CHANGE [<span class="keyword">COLUMN</span>] old_field_name field_definition [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER field_name];</span><br></pre></td></tr></table></figure></li>
<li><p>修改字段排列顺序</p>
<p>  使用前面的可选参数 <code>[FIRST | AFTER field_name]</code>，其中：</p>
<ul>
<li>ADD 新增的字段默认在表的最后位置；</li>
<li>CHANGE 或 MODIFY 默认不改变字段的位置。</li>
</ul>
</li>
<li><p>更改表名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME [<span class="keyword">TO</span>] new_table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-6-修改表-外键"><a href="#1-3-6-修改表-外键" class="headerlink" title="1.3.6. 修改表-外键"></a>1.3.6. 修改表-外键</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_table1_table2 <span class="keyword">FOREIGN</span> KEY (table1) <span class="keyword">REFERENCES</span> table2 (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_table1_table2;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-7-修改表-索引"><a href="#1-3-7-修改表-索引" class="headerlink" title="1.3.7. 修改表-索引"></a>1.3.7. 修改表-索引</h4><p>这里只介绍了通过修改表结构的方式创建索引，此外还有其它两种方式（<code>CREATE INDEX</code> 或 在 <code>CREATE TABLE</code> 时指定 `），详见后续文章索引部分。</p>
<ul>
<li><p>普通索引</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">ADD</span> INDEX idx_name(field1);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">DROP</span> INDEX idx_name;</span><br></pre></td></tr></table></figure></li>
<li><p>主键索引</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加</span></span><br><span class="line"><span class="comment">-- 先修改要设置为主键的字段：无符号、非空、自增</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> `id` <span class="type">int</span>(<span class="number">11</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (`id`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li>
<li><p>唯一索引</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [idx_name] (field1(length))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1 <span class="keyword">DROP</span> <span class="keyword">UNIQUE</span> field1;</span><br></pre></td></tr></table></figure></li>
<li><p>查询表的索引</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-DML"><a href="#1-4-DML" class="headerlink" title="1.4. DML"></a>1.4. DML</h3><h4 id="1-4-1-新增记录（增）"><a href="#1-4-1-新增记录（增）" class="headerlink" title="1.4.1. 新增记录（增）"></a>1.4.1. 新增记录（增）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入一条</span></span><br><span class="line"><span class="keyword">INSERT</span> INFO table_name(field1,field2,...,fieldn) <span class="keyword">VALUES</span>(val1,val2,...,valn);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(field1,field2,...,fieldn)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(record1_val1,record1_val2,...,record1_valn),</span><br><span class="line">(record2_val1,record2_val2,...,record2_valn),</span><br><span class="line">...</span><br><span class="line">(recordn_val1,recordn_val2,...,recordn_valn);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>field1,field2,...,fieldn</code> 可以不用写，但是后面 <code>VALUES</code> 里值的顺序需要与表中的字段顺序保持一致；</li>
<li>如果待插入的数据，不包含以下类型的字段，可以不用写<ul>
<li>可空：自动设置为 NULL；</li>
<li>有默认值：自动设置为默认值；</li>
<li>自增：自动设置为下一个自增值。</li>
</ul>
</li>
</ul>
<h4 id="1-4-2-删除记录（删）"><a href="#1-4-2-删除记录（删）" class="headerlink" title="1.4.2. 删除记录（删）"></a>1.4.2. 删除记录（删）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次删除多张表</span></span><br><span class="line"><span class="keyword">DELETE</span> t1,t2,... <span class="keyword">FROM</span> table1 t1,table2 t2,... [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-更新记录（改）"><a href="#1-4-3-更新记录（改）" class="headerlink" title="1.4.3. 更新记录（改）"></a>1.4.3. 更新记录（改）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE table_name <span class="keyword">SET</span> field1<span class="operator">=</span>val1,field2<span class="operator">=</span>val2,...,fieldn<span class="operator">=</span>valn [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次更新多个表</span></span><br><span class="line">UPDATE table1 a,table2 b, tablen n <span class="keyword">SET</span> a.field1<span class="operator">=</span>val1,...,n.fieldn<span class="operator">=</span>valn [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>

<h4 id="1-4-4-查询记录（查）"><a href="#1-4-4-查询记录（查）" class="headerlink" title="1.4.4. 查询记录（查）"></a>1.4.4. 查询记录（查）</h4><ul>
<li><p>基本</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table_name</span><br><span class="line">[WHERE condition]</span><br><span class="line">[ORDER BY field1 [DESC|ASC], field2 [DESC|ASC], ...]</span><br><span class="line">[LIMIT offset_start,row_count];</span><br></pre></td></tr></table></figure>

<p>  说明：</p>
<ul>
<li><code>[WHERE condition]</code> 过滤条件</li>
<li><code>[ORDER BY field1 [DESC|ASC], field2 [DESC|ASC], ...]</code> 排序<ul>
<li>ASC 升序（默认）</li>
<li>DESC 降序</li>
</ul>
</li>
<li><code>[LIMIT offset_start,row_count]</code> 限制</li>
</ul>
</li>
<li><p>去重查询</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> field1 <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure></li>
<li><p>聚合（汇总统计）</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [field1,field2,...] func_name <span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> field1,field2,...]</span><br><span class="line">[<span class="keyword">WITH</span> ROLLUIP]</span><br><span class="line">[<span class="keyword">HAVING</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<p>  说明：</p>
<ul>
<li><code>func_name</code> 聚合函数，常用：sum 求和、count(*) 记录数、max 最大值、min 最小值。</li>
<li><code>[WHERE condition]</code> 聚合前按条件对结果进行过滤，<strong>应尽量使用此过滤以减少待聚合的结果集，提高聚合效率</strong>。</li>
<li><code>[GROUP BY field1,field2,...]</code> 分类聚合字段</li>
<li><code>[WITH ROLLUIP]</code> 是否对分类聚合后的结果进行再汇总。</li>
<li><code>[HAVING condition]</code> 对聚合后的结果再进行条件过滤。</li>
</ul>
</li>
<li><p>内连接</p>
<p>  仅获取两张表中互相匹配的记录</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1,field2 <span class="keyword">FROM</span> table1 t1,table2 t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.outid<span class="operator">=</span>t2.outid</span><br></pre></td></tr></table></figure>

<p>  其中 <code>field1,field2,...</code> 分别存储在两张表中。</p>
</li>
<li><p>外连接</p>
<ul>
<li><p>左连接</p>
<p>  包含所有左边表中的记录，甚至是右边表中没有和它匹配的记录。</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1,field2,... <span class="keyword">FROM</span> table1 t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 t2 <span class="keyword">ON</span> t2.outid<span class="operator">=</span>t1.outid</span><br></pre></td></tr></table></figure></li>
<li><p>右连接</p>
<p>  包含所有右边表中的记录，甚至是右边表中没有和它匹配的记录。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT field1,field2,... FROM table1 t1</span><br><span class="line">RIGHT JOIN table2 t2 ON t2.outid=t1.outid</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>子查询</p>
<p>  当进行查询时，需要的条件是另一个 select 语句的结果时将用到子查询功能。</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1,field2,... <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> outid <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> outid <span class="keyword">FROM</span> table2</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>  除了 IN，用于子查询的关键字还有：<code>NOT IN</code>、<code>=</code>、<code>!=</code>、<code>EXISTS</code>、<code>NOT EXISTS</code>等。</p>
<p>  MySQL4.1 以前的版本不支持子查询，需要用表连接来实现，如：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.<span class="operator">*</span> <span class="keyword">FROM</span> table1 t1,table2 t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.outid<span class="operator">=</span>t2.outid</span><br></pre></td></tr></table></figure></li>
<li><p>联合（合并结果集）</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="operator">|</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UNION</span> <span class="operator">|</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tablen</span><br></pre></td></tr></table></figure>

<p>  说明：</p>
<ul>
<li><code>UNION ALL</code> 把结果集直接合并在一起。</li>
<li><code>UNION</code> 是将 <code>UNION ALL</code> 的结果集执行一次 <code>DISTINCT</code>，去除重复记录后的结果。</li>
</ul>
</li>
</ul>
<h3 id="1-5-DCL"><a href="#1-5-DCL" class="headerlink" title="1.5. DCL"></a>1.5. DCL</h3><h4 id="1-5-1-授予权限"><a href="#1-5-1-授予权限" class="headerlink" title="1.5.1. 授予权限"></a>1.5.1. 授予权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">ON</span> db1.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-收回权限"><a href="#1-5-2-收回权限" class="headerlink" title="1.5.2. 收回权限"></a>1.5.2. 收回权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">insert</span> <span class="keyword">ON</span> db1.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-附录"><a href="#1-6-附录" class="headerlink" title="1.6. 附录"></a>1.6. 附录</h3><h4 id="1-6-1-连接数据库"><a href="#1-6-1-连接数据库" class="headerlink" title="1.6.1. 连接数据库"></a>1.6.1. 连接数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql [-h127.0.0.1] [-P3306] -uroot -p[password]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>-h</code> 可选，数据库地址（IP或域名），默认 127.0.0.1。</li>
<li><code>-P</code> 可选，数据库端口号，默认 3306.</li>
<li><code>-u</code> 数据库登录用户</li>
<li><code>-p</code> 数据库登录用户对应的密码</li>
</ul>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.24-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-如何使用系统帮助"><a href="#1-6-2-如何使用系统帮助" class="headerlink" title="1.6.2. 如何使用系统帮助"></a>1.6.2. 如何使用系统帮助</h4><p>在命令行模式下，使用 <code>? contents</code> 命令查看对应分类的帮助信息。</p>
<p>如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看 show 相关的所有命令等</span></span><br><span class="line">mysql<span class="operator">&gt;</span> ? <span class="keyword">show</span></span><br></pre></td></tr></table></figure>

<h4 id="1-6-3-什么是元数据信息"><a href="#1-6-3-什么是元数据信息" class="headerlink" title="1.6.3. 什么是元数据信息"></a>1.6.3. 什么是元数据信息</h4><p>元数据指数据的数据，比如表名、列名、列类型、索引名等表的各种属性名称。<strong>MySQL 5.0</strong> 之后提供来一个新的数据库 <code>information_schema</code>，用来记录 MySQL 中的元数据信息。</p>
<ul>
<li>这是一个比较特殊的数据库，它在物理上并不存在相关的目录和文件；</li>
<li>对应数据库里使用 <code>show tables</code> 显示的各种“表”也并不是实际存在的物理表，而全部是视图。</li>
</ul>
<p>常用的视图如下：</p>
<ul>
<li><code>SCHEMATA</code> 提供当前 MySQL 实例中所有的数据库信息，对应 <code>show  databases;</code> 的结果。</li>
<li><code>TABLES</code> 提供关于数据库中的表信息（包括视图），详细表述里某个表属于那个 schema、表类型、表引擎、创建时间等，对应 <code>show tables from schemaname;</code> 的结果。</li>
<li><code>COLUMNS</code> 提供所有表中的列信息，对应 <code>show columns from schemaname.tablename;</code> 的结果。</li>
<li><code>STATISTICS</code> 提供关于表索引的信息，对应 <code>show index from schemaname.tablename;</code> 的结果。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 与 Memcache 的区别</title>
    <url>/post/3127178255.html</url>
    <content><![CDATA[<h4 id="MemCache"><a href="#MemCache" class="headerlink" title="MemCache"></a>MemCache</h4><ul>
<li>多线程、异步I/O，可以充分利用多核 CPU 的优势，性能优秀</li>
<li>功能简单，使用内存存储数据</li>
<li>限制<ul>
<li>key 小于 250B</li>
<li>value 小于 1M</li>
<li>key 最大失效时间小于 30 天</li>
<li>只支持 K-V 结构，不支持持久化和主从同步</li>
</ul>
</li>
</ul>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul>
<li>单线程（可以借助多进程，以更好的发挥单机性能）<ul>
<li>异步非阻塞I/O（多路复用）<ul>
<li>多路：多个网络连接</li>
<li>复用：复用同一个线程</li>
</ul>
</li>
<li>避免多线程上下文切换的代价</li>
<li>避免多线程造成各种锁的问题</li>
</ul>
</li>
<li>数据在内存存储，支持持久化</li>
<li>支持更多的数据类型，list、hash、set等</li>
<li>主从 Sentinel +集群 Cluster，能够提供高可用服务</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 的基本特性和 5 个常用数据结构</title>
    <url>/post/2119054721.html</url>
    <content><![CDATA[<h3 id="1-基本特性"><a href="#1-基本特性" class="headerlink" title="1. 基本特性"></a>1. 基本特性</h3><ul>
<li><p>速度快</p>
<ul>
<li>基于 C 语言开发，源码短小精悍</li>
<li>数据存在内存中</li>
<li>单线程（高性能，<strong>因为 Redis 一次只会运行一条命令，应避免在生产环境使用比较耗时的命令</strong>。）</li>
</ul>
</li>
<li><p>支持数据持久化，异步保存到磁盘</p>
</li>
<li><p>丰富的数据结构（key-value）：string、list、hash、set、zset</p>
</li>
<li><p>多语言客户端</p>
</li>
<li><p>功能丰富：发布订阅；Lua 脚本；等</p>
</li>
<li><p>简单</p>
<ul>
<li>核心代码量小</li>
<li>不依赖外部库</li>
<li>单线程模型</li>
</ul>
</li>
<li><p>支持主从复制</p>
</li>
<li><p>原生高可用和分布式解决方案</p>
<ul>
<li><code>Redis-Sentinel</code> 高可用 <code>v2.8+</code></li>
<li><code>Redis-Cluster</code> 分布式 <code>v3.0+</code></li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="2-常用数据结构"><a href="#2-常用数据结构" class="headerlink" title="2. 常用数据结构"></a>2. 常用数据结构</h3><p><img data-src="https://static.sqiang.net/image/post/redis-data-structure-types.jpeg"></p>
<p>下面是一些通用的 API（不依赖具体数据类型）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照规则遍历所有 key</span></span><br><span class="line"><span class="comment"># ⚠️ 注意：生产环境禁用，可以用 scan 替代，或只在从节点执行</span></span><br><span class="line">&gt; keys [patern]</span><br><span class="line">&gt; scan cursor [MATCH pattern] [COUNT count]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 key 的数据类型</span></span><br><span class="line">&gt; <span class="built_in">type</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 key 是否存在</span></span><br><span class="line">&gt; exists key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">&gt; del key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计 key 的数量</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(1)，通过内部计数器使用</span></span><br><span class="line">&gt; dbsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置过期时间（单位：秒），到期后自动删除</span></span><br><span class="line">&gt; expire key seconds</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 key 的剩余过期时间</span></span><br><span class="line"><span class="comment"># &gt; 0 剩余时间</span></span><br><span class="line"><span class="comment"># -1 key 存在，但没有设置过期时间</span></span><br><span class="line"><span class="comment"># -2 key 过期后被自动删除</span></span><br><span class="line">&gt; ttl key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除 key 的过期时间</span></span><br><span class="line">&gt; persist key</span><br></pre></td></tr></table></figure>

<h4 id="2-1-sting-字符串"><a href="#2-1-sting-字符串" class="headerlink" title="2.1. sting 字符串"></a>2.1. sting 字符串</h4><h5 id="2-1-1-结构"><a href="#2-1-1-结构" class="headerlink" title="2.1.1. 结构"></a>2.1.1. 结构</h5><ul>
<li>key</li>
<li>value</li>
</ul>
<h5 id="2-1-2-场景"><a href="#2-1-2-场景" class="headerlink" title="2.1.2. 场景"></a>2.1.2. 场景</h5><ul>
<li>缓存</li>
<li>计数器</li>
<li>分布式锁</li>
<li>……</li>
</ul>
<h5 id="2-1-3-专有-API"><a href="#2-1-3-专有-API" class="headerlink" title="2.1.3. 专有 API"></a>2.1.3. 专有 API</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key 不管是否存在，都设置：存在则更新，不存在则新增</span></span><br><span class="line">&gt; <span class="built_in">set</span> key value</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 不存在才设置 &lt;==&gt; 新增</span></span><br><span class="line">&gt; setnx key value</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 存在才设置 &lt;==&gt; 更新</span></span><br><span class="line">&gt; <span class="built_in">set</span> key value xx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定 key 的 value</span></span><br><span class="line">&gt; get key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量设置</span></span><br><span class="line">&gt; mset key value [key value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量获取</span></span><br><span class="line">&gt; mget key [ key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字符串长度</span></span><br><span class="line">&gt; strlen key</span><br></pre></td></tr></table></figure>

<p>子串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 追加子串</span></span><br><span class="line"><span class="comment"># 返回追加成功的字符串长度</span></span><br><span class="line">&gt; append key value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取子串</span></span><br><span class="line">&gt; getrange key start end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖子串</span></span><br><span class="line">&gt; setrange key offset value</span><br></pre></td></tr></table></figure>

<p>计数器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递增</span></span><br><span class="line"><span class="comment"># 不能超过 Long.Max 9223372036854775807</span></span><br><span class="line">&gt; incr key</span><br><span class="line">&gt; incrby key increment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递减</span></span><br><span class="line"><span class="comment"># 不能低于 Long.Min -9223372036854775808</span></span><br><span class="line">&gt; decr key</span><br><span class="line">&gt; decrby key decrement</span><br></pre></td></tr></table></figure>

<h4 id="2-2-hash-哈希"><a href="#2-2-hash-哈希" class="headerlink" title="2.2. hash 哈希"></a>2.2. hash 哈希</h4><h5 id="2-2-1-结构"><a href="#2-2-1-结构" class="headerlink" title="2.2.1. 结构"></a>2.2.1. 结构</h5><ul>
<li><p>key</p>
</li>
<li><p>value</p>
<ul>
<li><p>field 不能相同</p>
</li>
<li><p>value 可以相同</p>
</li>
</ul>
</li>
</ul>
<h5 id="2-2-3-专有-API"><a href="#2-2-3-专有-API" class="headerlink" title="2.2.3. 专有 API"></a>2.2.3. 专有 API</h5><p>基本操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为 key 增加一个键值对</span></span><br><span class="line"><span class="comment"># field 存在则修改，不存在，则新增</span></span><br><span class="line">&gt; hset key field value</span><br><span class="line"></span><br><span class="line"><span class="comment"># field 不存在才设置 &lt;==&gt; 新增</span></span><br><span class="line">&gt; hsetnx key field value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 key 增加多个键值对</span></span><br><span class="line">&gt; hmset key field value [field value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 key 中指定的键</span></span><br><span class="line">&gt; hdel key field [field ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递增</span></span><br><span class="line">&gt; hincrby key field increment</span><br><span class="line">&gt; hincrbyfloat key field increment</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 key 的一个键的值</span></span><br><span class="line">&gt; hget key field</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 key 的多个键的值</span></span><br><span class="line">&gt; hmget key field [field ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 key 的所有 field 和 value</span></span><br><span class="line">&gt; hgetall key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有 field</span></span><br><span class="line">&gt; hkeys key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有 value</span></span><br><span class="line">&gt; hvals key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 hash 中的一个 field 是否存在</span></span><br><span class="line">&gt; hexists key field</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 hash 中所有 field 的数量</span></span><br><span class="line">&gt; hlen key</span><br></pre></td></tr></table></figure>

<h4 id="2-3-list-列表"><a href="#2-3-list-列表" class="headerlink" title="2.3.  list 列表"></a>2.3.  list 列表</h4><h5 id="2-3-1-特点"><a href="#2-3-1-特点" class="headerlink" title="2.3.1. 特点"></a>2.3.1. 特点</h5><ul>
<li>有序</li>
<li>可重复</li>
<li>左右两端插入、弹出</li>
</ul>
<h5 id="2-3-2-场景"><a href="#2-3-2-场景" class="headerlink" title="2.3.2. 场景"></a>2.3.2. 场景</h5><ul>
<li><p>Stack 栈 <code>lpush</code> + <code>lpop</code></p>
</li>
<li><p>Queue 队列 <code>lpush</code> + <code>rpop</code></p>
</li>
<li><p>Capped Collection 有限队列集合（固定数量） <code>lpush</code> + <code>ltrim</code></p>
</li>
<li><p>Message Queue 消息队列 <code>lpush</code> + <code>brpop</code></p>
</li>
</ul>
<h5 id="2-3-3-专有-API"><a href="#2-3-3-专有-API" class="headerlink" title="2.3.3. 专有 API"></a>2.3.3. 专有 API</h5><p>增（<strong>入</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从列表左边添加</span></span><br><span class="line">&gt; lpush key value [value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表右边添加</span></span><br><span class="line">&gt; rpush key value [value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表元素 pivot 的前面或后面插入一个新元素</span></span><br><span class="line">&gt; linsert key BEFORE|AFTER pivot newValue</span><br></pre></td></tr></table></figure>

<p>删（<strong>出</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从列表左边弹出一个 value</span></span><br><span class="line">&gt; lpop key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表右边弹出一个 value</span></span><br><span class="line">&gt; rpop key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有 value 相等的项</span></span><br><span class="line">&gt; lrem key count value</span><br><span class="line"><span class="comment"># count = 0 删除所有 value 相等的项</span></span><br><span class="line"><span class="comment"># count &gt; 0 从左到右，删除最多 count 个 value 相等的项</span></span><br><span class="line"><span class="comment"># count &lt; 0 从右到左，删除最多 Math.abs(count) 个 value 相等的项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照索引范围修剪列表</span></span><br><span class="line">&gt; ltrim key start stop</span><br></pre></td></tr></table></figure>

<p>改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改指定下标的元素</span></span><br><span class="line">&gt; lset key index newValue</span><br></pre></td></tr></table></figure>

<p>查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定索引范围的所有项（包含 stop 的项）</span></span><br><span class="line">&gt; lrange key start stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询一个 key 下的所有项</span></span><br><span class="line">&gt; lrange key 0 -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定下标的项</span></span><br><span class="line">&gt; lindex key index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表长度</span></span><br><span class="line">&gt; llen key</span><br></pre></td></tr></table></figure>

<p>其它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class="line"><span class="comment"># timeout 单位：秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lpop 的阻塞版本</span></span><br><span class="line">&gt; blpop key [key ...] timeout</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpop 的阻塞版本</span></span><br><span class="line">&gt; brpop key [key ...] timeout</span><br></pre></td></tr></table></figure>

<h4 id="2-4-set-集合"><a href="#2-4-set-集合" class="headerlink" title="2.4. set 集合"></a>2.4. set 集合</h4><h5 id="2-4-1-特点"><a href="#2-4-1-特点" class="headerlink" title="2.4.1. 特点"></a>2.4.1. 特点</h5><ul>
<li>无序</li>
<li>不可以重复</li>
<li>集合之间的操作</li>
</ul>
<h5 id="2-4-2-场景"><a href="#2-4-2-场景" class="headerlink" title="2.4.2. 场景"></a>2.4.2. 场景</h5><ul>
<li><p>Tagging 标签化 <code>sadd</code></p>
</li>
<li><p>Random Item 随机元素 <code>srandmember</code> 或 <code>spop</code></p>
</li>
<li><p>Social Graph 社交图谱 <code>sadd</code> + <code>sinter</code></p>
</li>
</ul>
<h5 id="2-4-3-专有-API"><a href="#2-4-3-专有-API" class="headerlink" title="2.4.3. 专有 API"></a>2.4.3. 专有 API</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加元素到集合中（重复的元素会被忽略）</span></span><br><span class="line">&gt; sadd key member [member ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从集合中删除元素</span></span><br><span class="line">&gt; srem key member [member ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算集合中元素个数</span></span><br><span class="line">&gt; scard key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查集合中是否存在指定的元素</span></span><br><span class="line">&gt; sismember key member</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从集合中随机取出 count 个元素</span></span><br><span class="line"><span class="comment"># 不会破坏集合</span></span><br><span class="line">&gt; srandmember key [count]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从集合中随机弹出 count 个元素</span></span><br><span class="line"><span class="comment">#会破坏集合（元素的顺序）</span></span><br><span class="line">&gt; spop key [count]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出集合中所有元素</span></span><br><span class="line">&gt; smembers key</span><br><span class="line"><span class="comment"># 注意：1. 获取到的元素是无序的；2. 元素较多时会阻塞其它操作</span></span><br><span class="line"><span class="comment"># 替代：sscan ?</span></span><br></pre></td></tr></table></figure>

<p>集合间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取一个集合与其它集合的差集</span></span><br><span class="line">&gt; sdiff key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个集合与其它集合的交集</span></span><br><span class="line">&gt; sinter key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个集合与其它集合的并集</span></span><br><span class="line">&gt; sunion key [key ...]</span><br></pre></td></tr></table></figure>

<h4 id="2-5-zset-有序集合"><a href="#2-5-zset-有序集合" class="headerlink" title="2.5. zset 有序集合"></a>2.5. zset 有序集合</h4><h5 id="2-5-1-特点"><a href="#2-5-1-特点" class="headerlink" title="2.5.1. 特点"></a>2.5.1. 特点</h5><ul>
<li>有序</li>
<li>不可以重复</li>
<li>元素多一个 score 用于排序</li>
</ul>
<h5 id="2-5-2-场景"><a href="#2-5-2-场景" class="headerlink" title="2.5.2. 场景"></a>2.5.2. 场景</h5><ul>
<li>排行榜</li>
</ul>
<h5 id="2-5-3-专有-API"><a href="#2-5-3-专有-API" class="headerlink" title="2.5.3. 专有 API"></a>2.5.3. 专有 API</h5><p>基本操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line"><span class="comment"># score 可重复，member 不可以重复</span></span><br><span class="line">&gt; zadd key score member [score member ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">&gt; zrem key member [member ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加或减少元素的分数（score）</span></span><br><span class="line"><span class="comment"># increment 传负数表示减少</span></span><br><span class="line">&gt; zincrby key increment member</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元素总个数</span></span><br><span class="line">&gt; zcard key</span><br></pre></td></tr></table></figure>

<p>排名和分数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回元素分数（score）</span></span><br><span class="line">&gt; zscore key member</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素的升序（score 从小到大）排名</span></span><br><span class="line">&gt; zrank key member</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素的降序（score 从大到小）排名</span></span><br><span class="line">&gt; zrevrank key member</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定分数间的成员数量</span></span><br><span class="line">&gt; zcount</span><br></pre></td></tr></table></figure>

<p>根据范围获取元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定索引范围内的升序（score 从小到大）元素[分数]</span></span><br><span class="line"><span class="comment"># star 0 第一条；stop -1 最后一条</span></span><br><span class="line">zrange key start stop [withscores]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定索引范围内的降序（score 从大到小）元素[分数]</span></span><br><span class="line">zrevrange key start stop [withscores]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回指定分数（score）范围内的升序元素[分数]</span></span><br><span class="line">&gt; zrangebyscore key min max [withscores]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回指定分数（score）范围内的降序元素[分数]</span></span><br><span class="line">&gt; zrevrangebyscore key max min [withscores]</span><br></pre></td></tr></table></figure>

<p>根据范围移除元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除指定排名范围内的元素</span></span><br><span class="line">&gt; zremrangebyrank key start stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定分数范围内的元素</span></span><br><span class="line">&gt; zremrangebyscore key min max</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
